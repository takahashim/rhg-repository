head	1.1;
access;
symbols
	v1_6_3:1.1
	ruby_1_6:1.1.0.4
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1d1:1.1.2.1
	v1_1d0:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1c7:1.1.2.1
	v1_1c6:1.1.2.1
	v1_1d-start:1.1.2.1
	v1_1c5:1.1.2.1
	v1_1dev:1.1.2.1.0.2
	v1_1c4:1.1.2.1
	v1_1c3:1.1.2.1
	v1_1c2:1.1.2.1
	v1_1c1:1.1.2.1
	v1_1c0:1.1.2.1
	v1_1b9_31:1.1.2.1
	v1_1b9_30:1.1.2.1
	v1_1b9_28:1.1.2.1
	v1_1b9_27:1.1.2.1
	v1_1b9_26:1.1.2.1
	r1_1b9_25:1.1.2.1
	r1_1b9_24:1.1.2.1
	v1_1b9_23:1.1.2.1
	v1_1b9_22:1.1.2.1
	v1_1b9_20:1.1.2.1
	v1_1b9_18:1.1.2.1
	v1_1b9_16:1.1.2.1
	v1_1b9_15:1.1.2.1
	v1_1b9_13:1.1.2.1
	v1_1b9_12:1.1.2.1
	v1_1b9_11:1.1.2.1
	v1_1b9_08:1.1.2.1
	v1_1b9_07:1.1.2.1
	r1_1b9:1.1.2.1
	v1_1b8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	98.02.18.10.01.46;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.32;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	99.08.06.06.48.22;	author matz;	state dead;
branches;
next	;

1.1.2.1
date	98.02.18.10.01.46;	author matz;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file cygwin32_ld.rb was initially added on branch v1_1r.
@
text
@@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 90
#!/usr/local/bin/ruby
require '../../rbconfig'
include Config

args = ARGV.join(" ")

objs = []
flags = []
libname = ''
Init = "../init"

path = ''

def writeInit
  out = open("#{Init}.c", "w")

  out.print %q@@
#include <windows.h>
#include <stdio.h>

extern struct _reent *__imp_reent_data;
WINAPI dll_entry(int a, int b, int c)
{
    _impure_ptr =__imp_reent_data;
    return 1;
}
main(){}
//void impure_setup(struct _reent *_impure_ptrMain)
//{
//    _impure_ptr =__imp_reent_data;
//}
@@
  out.close
end

def xsystem cmd
  print cmd, "\n"
  system cmd
end

if args =~ /-o (\w+)\.dll/i
  libname = $1
  # Check for path:
  if libname =~ /(\w+\/)(\w+)$/
    path = $1
    libname = $2
  end
  for arg in ARGV
    case arg
    when /\.[oa]$/i
      objs.push(arg)
    when /-o/, /\w+\.dll/i
      ;
    else
      flags << arg
    end
  end

  writeInit unless FileTest.exist?("#{Init}.c")
  unless FileTest.exist?("#{Init}.o") and
    File.mtime("#{Init}.c") < File.mtime("#{Init}.o")
    xsystem "gcc -c #{Init}.c -o #{Init}.o"
  end
  
  command = "echo EXPORTS > #{libname}.def"
  xsystem command
#  xsystem "echo impure_setup >> #{libname}.def"
  xsystem "nm --extern-only " + objs.join(" ") +
    "  | sed -n '/^........ [CDT] _/s///p' >> #{libname}.def"

  command = "gcc -nostdlib -o junk.o -Wl,--base-file,#{libname}.base,--dll " +
    objs.join(" ") + "  #{Init}.o "
  command.concat(flags.join(" ") +
    " -Wl,-e,_dll_entry@@12 -lcygwin -lkernel32 #{CONFIG['srcdir']}/libruby.a")
  xsystem command

  command = "dlltool --as=as --dllname #{libname}.dll --def #{libname}.def --base-file #{libname}.base --output-exp #{libname}.exp"
  xsystem command
  
  command = "gcc -s -nostdlib -o #{libname}.dll -Wl,--dll #{libname}.exp " +
    objs.join(" ") + "  #{Init}.o "
  command.concat(flags.join(" ") +
    " -Wl,-e,_dll_entry@@12 -lcygwin -lkernel32 #{CONFIG['srcdir']}/libruby.a")
  xsystem command
  File.unlink "junk.o" if FileTest.exist? "junk.o"

else
  # no special processing, just call ld
  xsystem "ld #{args}"
end
@


1.1.1.1.2.1
log
@990806
@
text
@@


1.1.2.1
log
@cygwin patches
@
text
@a0 90
#!/usr/local/bin/ruby
require '../../rbconfig'
include Config

args = ARGV.join(" ")

objs = []
flags = []
libname = ''
Init = "../init"

path = ''

def writeInit
  out = open("#{Init}.c", "w")

  out.print %q@@
#include <windows.h>
#include <stdio.h>

extern struct _reent *__imp_reent_data;
WINAPI dll_entry(int a, int b, int c)
{
    _impure_ptr =__imp_reent_data;
    return 1;
}
main(){}
//void impure_setup(struct _reent *_impure_ptrMain)
//{
//    _impure_ptr =__imp_reent_data;
//}
@@
  out.close
end

def xsystem cmd
  print cmd, "\n"
  system cmd
end

if args =~ /-o (\w+)\.dll/i
  libname = $1
  # Check for path:
  if libname =~ /(\w+\/)(\w+)$/
    path = $1
    libname = $2
  end
  for arg in ARGV
    case arg
    when /\.[oa]$/i
      objs.push(arg)
    when /-o/, /\w+\.dll/i
      ;
    else
      flags << arg
    end
  end

  writeInit unless FileTest.exist?("#{Init}.c")
  unless FileTest.exist?("#{Init}.o") and
    File.mtime("#{Init}.c") < File.mtime("#{Init}.o")
    xsystem "gcc -c #{Init}.c -o #{Init}.o"
  end
  
  command = "echo EXPORTS > #{libname}.def"
  xsystem command
#  xsystem "echo impure_setup >> #{libname}.def"
  xsystem "nm --extern-only " + objs.join(" ") +
    "  | sed -n '/^........ [CDT] _/s///p' >> #{libname}.def"

  command = "gcc -nostdlib -o junk.o -Wl,--base-file,#{libname}.base,--dll " +
    objs.join(" ") + "  #{Init}.o "
  command.concat(flags.join(" ") +
    " -Wl,-e,_dll_entry@@12 -lcygwin -lkernel32 #{CONFIG['srcdir']}/libruby.a")
  xsystem command

  command = "dlltool --as=as --dllname #{libname}.dll --def #{libname}.def --base-file #{libname}.base --output-exp #{libname}.exp"
  xsystem command
  
  command = "gcc -s -nostdlib -o #{libname}.dll -Wl,--dll #{libname}.exp " +
    objs.join(" ") + "  #{Init}.o "
  command.concat(flags.join(" ") +
    " -Wl,-e,_dll_entry@@12 -lcygwin -lkernel32 #{CONFIG['srcdir']}/libruby.a")
  xsystem command
  File.unlink "junk.o" if FileTest.exist? "junk.o"

else
  # no special processing, just call ld
  xsystem "ld #{args}"
end
@
