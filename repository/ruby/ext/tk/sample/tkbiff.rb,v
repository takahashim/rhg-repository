head	1.3;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.3
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.3.0.2
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2000.12.28.05.00.43;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.52;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.11.17.09.12.44;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.34;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.17.09.12.44;	author matz;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changes from personal modifies -- matz
@
text
@#! /usr/local/bin/ruby

if ARGV[0] != '-d'
  unless $DEBUG
    exit if fork
  end
else
  ARGV.shift
end

if ARGV.length == 0
  if ENV['MAIL']
    $spool = ENV['MAIL']
  else  
    $spool = '/usr/spool/mail/' + ENV['USER']
  end
else 
  $spool = ARGV[0]
end

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while line = f.gets()
      line.chop!
      next if /^From / =~ line	# skip From-line  
      break if /^$/ =~ line	# end of header
      if /^(\S+):\s*(.*)/ =~ line
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return unless $_

    while line = f.gets()
      break if /^From / =~ line
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

require "tkscrollbox"

$top = TkRoot.new
$top.withdraw
$list = TkScrollbox.new($top) {
  relief 'raised'
  width 80
  height 8
  setgrid 'yes'
  pack
}
TkButton.new($top) {
  text 'Dismiss'
  command proc {$top.withdraw}
  pack('fill'=>'both','expand'=>'yes')
}
$top.bind "Control-c", proc{exit}
$top.bind "Control-q", proc{exit}
$top.bind "space", proc{exit}

$spool_size = 0
$check_time = Time.now

def check
  $check_time = Time.now
  size = File.size($spool)
  if size and size != $spool_size
    $spool_size = size
    pop_up if size > 0
  end
  Tk.after 5000, proc{check}
end

if defined? Thread
  Thread.start do
    loop do
      sleep 600
      if Time.now - $check_time > 200
	Tk.after 5000, proc{check}
      end
    end
  end
end

def pop_up
  outcount = 0;
  $list.delete 0, 'end'
  f = open($spool, "r")
  while !f.eof?
    mail = Mail.new(f)
    date, from, subj =  mail.header['Date'], mail.header['From'], mail.header['Subject']
    next if !date
    y = m = d = 0
    y, m, d = parsedate(date) if date
    from = "sombody@@somewhere" if ! from
    subj = "(nil)" if ! subj
    from = decode_b(from)
    subj = decode_b(subj)
    $list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
    outcount += 1
  end
  f.close
  if outcount == 0
    $list.insert 'end', "You have no mail."
  else
    $list.see 'end'
  end
  $top.deiconify
  Tk.after 2000, proc{$top.withdraw}
end

$list.insert 'end', "You have no mail."
check
Tk.after 2000, proc{$top.withdraw}
begin
  Tk.mainloop
rescue
  `echo #$! > /tmp/tkbiff`
end
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d41 5
a45 5
    while f.gets()
      $_.chop!
      next if /^From /	# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
d53 1
a53 1
    return if ! $_
d55 2
a56 2
    while f.gets()
      break if /^From /
@


1.1
log
@file tkbiff.rb was initially added on branch v1_1r.
@
text
@d1 149
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 149
#! /usr/local/bin/ruby

if ARGV[0] != '-d'
  unless $DEBUG
    exit if fork
  end
else
  ARGV.shift
end

if ARGV.length == 0
  if ENV['MAIL']
    $spool = ENV['MAIL']
  else  
    $spool = '/usr/spool/mail/' + ENV['USER']
  end
else 
  $spool = ARGV[0]
end

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while f.gets()
      $_.chop!
      next if /^From /	# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return if ! $_

    while f.gets()
      break if /^From /
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

require "tkscrollbox"

$top = TkRoot.new
$top.withdraw
$list = TkScrollbox.new($top) {
  relief 'raised'
  width 80
  height 8
  setgrid 'yes'
  pack
}
TkButton.new($top) {
  text 'Dismiss'
  command proc {$top.withdraw}
  pack('fill'=>'both','expand'=>'yes')
}
$top.bind "Control-c", proc{exit}
$top.bind "Control-q", proc{exit}
$top.bind "space", proc{exit}

$spool_size = 0
$check_time = Time.now

def check
  $check_time = Time.now
  size = File.size($spool)
  if size and size != $spool_size
    $spool_size = size
    pop_up if size > 0
  end
  Tk.after 5000, proc{check}
end

if defined? Thread
  Thread.start do
    loop do
      sleep 600
      if Time.now - $check_time > 200
	Tk.after 5000, proc{check}
      end
    end
  end
end

def pop_up
  outcount = 0;
  $list.delete 0, 'end'
  f = open($spool, "r")
  while !f.eof?
    mail = Mail.new(f)
    date, from, subj =  mail.header['Date'], mail.header['From'], mail.header['Subject']
    next if !date
    y = m = d = 0
    y, m, d = parsedate(date) if date
    from = "sombody@@somewhere" if ! from
    subj = "(nil)" if ! subj
    from = decode_b(from)
    subj = decode_b(subj)
    $list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
    outcount += 1
  end
  f.close
  if outcount == 0
    $list.insert 'end', "You have no mail."
  else
    $list.see 'end'
  end
  $top.deiconify
  Tk.after 2000, proc{$top.withdraw}
end

$list.insert 'end', "You have no mail."
check
Tk.after 2000, proc{$top.withdraw}
begin
  Tk.mainloop
rescue
  `echo #$! > /tmp/tkbiff`
end
@


1.1.2.1
log
@1.1c8
@
text
@a0 149
#! /usr/local/bin/ruby

if ARGV[0] != '-d'
  unless $DEBUG
    exit if fork
  end
else
  ARGV.shift
end

if ARGV.length == 0
  if ENV['MAIL']
    $spool = ENV['MAIL']
  else  
    $spool = '/usr/spool/mail/' + ENV['USER']
  end
else 
  $spool = ARGV[0]
end

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while f.gets()
      $_.chop!
      next if /^From /	# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return if ! $_

    while f.gets()
      break if /^From /
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

require "tkscrollbox"

$top = TkRoot.new
$top.withdraw
$list = TkScrollbox.new($top) {
  relief 'raised'
  width 80
  height 8
  setgrid 'yes'
  pack
}
TkButton.new($top) {
  text 'Dismiss'
  command proc {$top.withdraw}
  pack('fill'=>'both','expand'=>'yes')
}
$top.bind "Control-c", proc{exit}
$top.bind "Control-q", proc{exit}
$top.bind "space", proc{exit}

$spool_size = 0
$check_time = Time.now

def check
  $check_time = Time.now
  size = File.size($spool)
  if size and size != $spool_size
    $spool_size = size
    pop_up if size > 0
  end
  Tk.after 5000, proc{check}
end

if defined? Thread
  Thread.start do
    loop do
      sleep 600
      if Time.now - $check_time > 200
	Tk.after 5000, proc{check}
      end
    end
  end
end

def pop_up
  outcount = 0;
  $list.delete 0, 'end'
  f = open($spool, "r")
  while !f.eof?
    mail = Mail.new(f)
    date, from, subj =  mail.header['Date'], mail.header['From'], mail.header['Subject']
    next if !date
    y = m = d = 0
    y, m, d = parsedate(date) if date
    from = "sombody@@somewhere" if ! from
    subj = "(nil)" if ! subj
    from = decode_b(from)
    subj = decode_b(subj)
    $list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
    outcount += 1
  end
  f.close
  if outcount == 0
    $list.insert 'end', "You have no mail."
  else
    $list.see 'end'
  end
  $top.deiconify
  Tk.after 2000, proc{$top.withdraw}
end

$list.insert 'end', "You have no mail."
check
Tk.after 2000, proc{$top.withdraw}
begin
  Tk.mainloop
rescue
  `echo #$! > /tmp/tkbiff`
end
@

