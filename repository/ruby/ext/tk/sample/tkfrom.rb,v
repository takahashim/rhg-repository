head	1.3;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.3
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.3.0.2
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2000.12.28.05.00.43;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.52;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.11.17.09.12.44;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.34;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.17.09.12.44;	author matz;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changes from personal modifies -- matz
@
text
@#! /usr/local/bin/ruby

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super(f)
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while line = f.gets()
      $_.chop!
      next if /^From / =~ line	# skip From-line  
      break if /^$/ =~ line	# end of header
      if /^(\S+):\s*(.*)/ =~ line
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return unless $_

    while line = f.gets()
      break if /^From / =~ line
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

if ARGV.length == 0
  if ENV['MAIL']
    ARGV[0] = ENV['MAIL']
  elsif ENV['USER']
    ARGV[0] = '/usr/spool/mail/' + ENV['USER']
  elsif ENV['LOGNAME']
    ARGV[0] = '/usr/spool/mail/' + ENV['LOGNAME']
  end
end

require "tk"
list = scroll = nil
TkFrame.new{|f|
  list = TkListbox.new(f) {
    yscroll proc{|idx|
	scroll.set *idx
    }
    relief 'raised'
#    geometry "80x5"
    width 80
    height 5
    setgrid 'yes'
    pack('side'=>'left','fill'=>'both','expand'=>'yes')
  }
  scroll = TkScrollbar.new(f) {
    command proc{|idx|
      list.yview *idx
    }
    pack('side'=>'right','fill'=>'y')
  }
  pack
}
root = Tk.root
TkButton.new(root) {
  text 'Dismiss'
  command proc {exit}
  pack('fill'=>'both','expand'=>'yes')
}
root.bind "Control-c", proc{exit}
root.bind "Control-q", proc{exit}
root.bind "space", proc{exit}

$outcount = 0;
for file in ARGV
  next if File.exist?(file)
  atime = File.atime(file)
  mtime = File.mtime(file)
  f = open(file, "r")
  begin
    until f.eof
      mail = Mail.new(f)
      date = mail.header['Date']
      next unless date
      from = mail.header['From']
      subj = mail.header['Subject']
      y = m = d = 0
      y, m, d = parsedate(date) if date
      from = "sombody@@somewhere" unless from
      subj = "(nil)" unless subj
      from = decode_b(from)
      subj = decode_b(subj)
      list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
      $outcount += 1
    end
  ensure
    f.close
    File.utime(atime, mtime, file)
    list.see 'end'
  end
end

limit = 10000
if $outcount == 0
  list.insert 'end', "You have no mail."
  limit = 2000
end
Tk.after limit, proc{
  exit
}
Tk.mainloop
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d23 1
a23 1
    while f.gets()
d25 3
a27 3
      next if /^From /		# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
d35 1
a35 1
    return if ! $_
d37 2
a38 2
    while f.gets()
      break if /^From /
@


1.1
log
@file tkfrom.rb was initially added on branch v1_1r.
@
text
@d1 132
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 132
#! /usr/local/bin/ruby

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super(f)
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while f.gets()
      $_.chop!
      next if /^From /		# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return if ! $_

    while f.gets()
      break if /^From /
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

if ARGV.length == 0
  if ENV['MAIL']
    ARGV[0] = ENV['MAIL']
  elsif ENV['USER']
    ARGV[0] = '/usr/spool/mail/' + ENV['USER']
  elsif ENV['LOGNAME']
    ARGV[0] = '/usr/spool/mail/' + ENV['LOGNAME']
  end
end

require "tk"
list = scroll = nil
TkFrame.new{|f|
  list = TkListbox.new(f) {
    yscroll proc{|idx|
	scroll.set *idx
    }
    relief 'raised'
#    geometry "80x5"
    width 80
    height 5
    setgrid 'yes'
    pack('side'=>'left','fill'=>'both','expand'=>'yes')
  }
  scroll = TkScrollbar.new(f) {
    command proc{|idx|
      list.yview *idx
    }
    pack('side'=>'right','fill'=>'y')
  }
  pack
}
root = Tk.root
TkButton.new(root) {
  text 'Dismiss'
  command proc {exit}
  pack('fill'=>'both','expand'=>'yes')
}
root.bind "Control-c", proc{exit}
root.bind "Control-q", proc{exit}
root.bind "space", proc{exit}

$outcount = 0;
for file in ARGV
  next if File.exist?(file)
  atime = File.atime(file)
  mtime = File.mtime(file)
  f = open(file, "r")
  begin
    until f.eof
      mail = Mail.new(f)
      date = mail.header['Date']
      next unless date
      from = mail.header['From']
      subj = mail.header['Subject']
      y = m = d = 0
      y, m, d = parsedate(date) if date
      from = "sombody@@somewhere" unless from
      subj = "(nil)" unless subj
      from = decode_b(from)
      subj = decode_b(subj)
      list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
      $outcount += 1
    end
  ensure
    f.close
    File.utime(atime, mtime, file)
    list.see 'end'
  end
end

limit = 10000
if $outcount == 0
  list.insert 'end', "You have no mail."
  limit = 2000
end
Tk.after limit, proc{
  exit
}
Tk.mainloop
@


1.1.2.1
log
@1.1c8
@
text
@a0 132
#! /usr/local/bin/ruby

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super(f)
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while f.gets()
      $_.chop!
      next if /^From /		# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return if ! $_

    while f.gets()
      break if /^From /
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

if ARGV.length == 0
  if ENV['MAIL']
    ARGV[0] = ENV['MAIL']
  elsif ENV['USER']
    ARGV[0] = '/usr/spool/mail/' + ENV['USER']
  elsif ENV['LOGNAME']
    ARGV[0] = '/usr/spool/mail/' + ENV['LOGNAME']
  end
end

require "tk"
list = scroll = nil
TkFrame.new{|f|
  list = TkListbox.new(f) {
    yscroll proc{|idx|
	scroll.set *idx
    }
    relief 'raised'
#    geometry "80x5"
    width 80
    height 5
    setgrid 'yes'
    pack('side'=>'left','fill'=>'both','expand'=>'yes')
  }
  scroll = TkScrollbar.new(f) {
    command proc{|idx|
      list.yview *idx
    }
    pack('side'=>'right','fill'=>'y')
  }
  pack
}
root = Tk.root
TkButton.new(root) {
  text 'Dismiss'
  command proc {exit}
  pack('fill'=>'both','expand'=>'yes')
}
root.bind "Control-c", proc{exit}
root.bind "Control-q", proc{exit}
root.bind "space", proc{exit}

$outcount = 0;
for file in ARGV
  next if File.exist?(file)
  atime = File.atime(file)
  mtime = File.mtime(file)
  f = open(file, "r")
  begin
    until f.eof
      mail = Mail.new(f)
      date = mail.header['Date']
      next unless date
      from = mail.header['From']
      subj = mail.header['Subject']
      y = m = d = 0
      y, m, d = parsedate(date) if date
      from = "sombody@@somewhere" unless from
      subj = "(nil)" unless subj
      from = decode_b(from)
      subj = decode_b(subj)
      list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
      $outcount += 1
    end
  ensure
    f.close
    File.utime(atime, mtime, file)
    list.see 'end'
  end
end

limit = 10000
if $outcount == 0
  list.insert 'end', "You have no mail."
  limit = 2000
end
Tk.after limit, proc{
  exit
}
Tk.mainloop
@

