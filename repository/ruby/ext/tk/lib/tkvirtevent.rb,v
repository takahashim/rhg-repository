head	1.5;
access;
symbols
	v1_6_7:1.3.2.1
	v1_6_6:1.3.2.1
	v1_6_5:1.3.2.1
	v1_6_4:1.3.2.1
	v1_7_1:1.4
	v1_6_4_preview4:1.3.2.1
	v1_6_4_preview3:1.3.2.1
	v1_6_4_preview2:1.3.2.1
	v1_6_4_preview1:1.3.2.1
	v1_6_3:1.3
	ruby_m17n:1.3.0.4
	ruby_1_6:1.3.0.2
	v1_6_2:1.3
	v1_6_1:1.3
	v1_6_0:1.3
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2002.10.02.06.02.17;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.06.15.04.27;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.24.04.34.23;	author matz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.08.13.05.37.52;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.11.17.09.12.44;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.34;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.17.09.12.44;	author matz;	state Exp;
branches;
next	;

1.3.2.1
date	2001.04.06.05.42.43;	author matz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* commit miss;  and tcltklib fix too.
@
text
@#
#   tkvirtevent.rb : treats virtual events
#                     1998/07/16 by Hidetoshi Nagai <nagai@@ai.kyutech.ac.jp>
#
require 'tk'

class TkVirtualEvent<TkObject
  extend Tk

  TkVirtualEventID = [0]
  TkVirtualEventTBL = {}

  class PreDefVirtEvent<self
    def initialize(event)
      @@path = @@id = event
      TkVirtualEvent::TkVirtualEventTBL[@@id] = self
    end
  end

  def TkVirtualEvent.getobj(event)
    obj = TkVirtualEventTBL[event]
    if obj
      obj
    else
      if tk_call('event', 'info').index("<#{event}>")
	PreDefVirtEvent.new(event)
      else
	fail ArgumentError, "undefined virtual event '<#{event}>'"
      end
    end
  end

  def TkVirtualEvent.info
    tk_call('event', 'info').split(/\s+/).collect!{|seq|
      TkVirtualEvent.getobj(seq[1..-2])
    }
  end

  def initialize(*sequences)
    @@path = @@id = format("<VirtEvent%.4d>", TkVirtualEventID[0])
    TkVirtualEventID[0] += 1
    add(*sequences)
  end

  def add(*sequences)
    if sequences != []
      tk_call('event', 'add', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirtualEventTBL[@@id] = self
    end
    self
  end

  def delete(*sequences)
    if sequences == []
      tk_call('event', 'delete', "<#{@@id}>")
      TkVirtualEventTBL.delete(@@id)
    else
      tk_call('event', 'delete', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirtualEventTBL.delete(@@id) if info == []
    end
    self
  end

  def info
    tk_call('event', 'info', "<#{@@id}>").split(/\s+/).collect!{|seq|
      l = seq.scan(/<*[^<>]+>*/).collect!{|subseq|
	case (subseq)
	when /^<<[^<>]+>>$/
	  TkVirtualEvent.getobj(subseq[1..-2])
	when /^<[^<>]+>$/
	  subseq[1..-2]
	else
	  subseq.split('')
	end
      }.flatten
      (l.size == 1) ? l[0] : l
    }
  end
end
@


1.4
log
@forgot some checkins.
@
text
@d57 1
a57 1
      TkVirtualEventTBL[@@id] = nil
d61 1
a61 1
      TkVirtualEventTBL[@@id] = nil if info == []
@


1.3
log
@2000-05-24
@
text
@d10 9
a18 2
  TkVirturlEventID = [0]
  TkVirturlEventTBL = {}
d21 10
a30 2
    obj = TkVirturlEventTBL[event]
    obj ? obj : event
d40 2
a41 2
    @@path = @@id = format("<VirtEvent%.4d>", TkVirturlEventID[0])
    TkVirturlEventID[0] += 1
d49 1
a49 1
      TkVirturlEventTBL[@@id] = self
d57 1
a57 1
      TkVirturlEventTBL[@@id] = nil
d61 1
a61 1
      TkVirturlEventTBL[@@id] = nil if info == []
@


1.3.2.1
log
@* variable.c (rb_const_get): no recursion to show full class path
  for modules.

* eval.c (rb_set_safe_level): should set safe level in curr_thread
  as well.

* eval.c (safe_setter): ditto.

* object.c (rb_obj_is_instance_of): nil belongs to false, not true.

* time.c (make_time_t): proper (I hope) daylight saving time
  handling for both US and Europe.  I HATE SUMMER TIME!

* eval.c (rb_thread_wait_for): non blocked signal interrupt should
  stop the interval.

* class.c (rb_mod_clone): should copy method bodies too.

* bignum.c (bigdivrem): should trim trailing zero bdigits of
  remainder, even if dd == 0.
@
text
@d10 2
a11 9
  TkVirtualEventID = [0]
  TkVirtualEventTBL = {}

  class PreDefVirtEvent<self
    def initialize(event)
      @@path = @@id = event
      TkVirtualEvent::TkVirtualEventTBL[@@id] = self
    end
  end
d14 2
a15 10
    obj = TkVirtualEventTBL[event]
    if obj
      obj
    else
      if tk_call('event', 'info').index("<#{event}>")
	PreDefVirtEvent.new(event)
      else
	fail ArgumentError, "undefined virtual event '<#{event}>'"
      end
    end
d25 2
a26 2
    @@path = @@id = format("<VirtEvent%.4d>", TkVirtualEventID[0])
    TkVirtualEventID[0] += 1
d34 1
a34 1
      TkVirtualEventTBL[@@id] = self
d42 1
a42 1
      TkVirtualEventTBL[@@id] = nil
d46 1
a46 1
      TkVirtualEventTBL[@@id] = nil if info == []
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d19 1
a19 1
    tk_call('event', 'info').split(/\s+/).filter{|seq|
d52 2
a53 2
    tk_call('event', 'info', "<#{@@id}>").split(/\s+/).filter{|seq|
      l = seq.scan(/<*[^<>]+>*/).filter{|subseq|
@


1.1
log
@file tkvirtevent.rb was initially added on branch v1_1r.
@
text
@d1 66
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 66
#
#   tkvirtevent.rb : treats virtual events
#                     1998/07/16 by Hidetoshi Nagai <nagai@@ai.kyutech.ac.jp>
#
require 'tk'

class TkVirtualEvent<TkObject
  extend Tk

  TkVirturlEventID = [0]
  TkVirturlEventTBL = {}

  def TkVirtualEvent.getobj(event)
    obj = TkVirturlEventTBL[event]
    obj ? obj : event
  end

  def TkVirtualEvent.info
    tk_call('event', 'info').split(/\s+/).filter{|seq|
      TkVirtualEvent.getobj(seq[1..-2])
    }
  end

  def initialize(*sequences)
    @@path = @@id = format("<VirtEvent%.4d>", TkVirturlEventID[0])
    TkVirturlEventID[0] += 1
    add(*sequences)
  end

  def add(*sequences)
    if sequences != []
      tk_call('event', 'add', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = self
    end
    self
  end

  def delete(*sequences)
    if sequences == []
      tk_call('event', 'delete', "<#{@@id}>")
      TkVirturlEventTBL[@@id] = nil
    else
      tk_call('event', 'delete', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = nil if info == []
    end
    self
  end

  def info
    tk_call('event', 'info', "<#{@@id}>").split(/\s+/).filter{|seq|
      l = seq.scan(/<*[^<>]+>*/).filter{|subseq|
	case (subseq)
	when /^<<[^<>]+>>$/
	  TkVirtualEvent.getobj(subseq[1..-2])
	when /^<[^<>]+>$/
	  subseq[1..-2]
	else
	  subseq.split('')
	end
      }.flatten
      (l.size == 1) ? l[0] : l
    }
  end
end
@


1.1.2.1
log
@1.1c8
@
text
@a0 66
#
#   tkvirtevent.rb : treats virtual events
#                     1998/07/16 by Hidetoshi Nagai <nagai@@ai.kyutech.ac.jp>
#
require 'tk'

class TkVirtualEvent<TkObject
  extend Tk

  TkVirturlEventID = [0]
  TkVirturlEventTBL = {}

  def TkVirtualEvent.getobj(event)
    obj = TkVirturlEventTBL[event]
    obj ? obj : event
  end

  def TkVirtualEvent.info
    tk_call('event', 'info').split(/\s+/).filter{|seq|
      TkVirtualEvent.getobj(seq[1..-2])
    }
  end

  def initialize(*sequences)
    @@path = @@id = format("<VirtEvent%.4d>", TkVirturlEventID[0])
    TkVirturlEventID[0] += 1
    add(*sequences)
  end

  def add(*sequences)
    if sequences != []
      tk_call('event', 'add', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = self
    end
    self
  end

  def delete(*sequences)
    if sequences == []
      tk_call('event', 'delete', "<#{@@id}>")
      TkVirturlEventTBL[@@id] = nil
    else
      tk_call('event', 'delete', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = nil if info == []
    end
    self
  end

  def info
    tk_call('event', 'info', "<#{@@id}>").split(/\s+/).filter{|seq|
      l = seq.scan(/<*[^<>]+>*/).filter{|subseq|
	case (subseq)
	when /^<<[^<>]+>>$/
	  TkVirtualEvent.getobj(subseq[1..-2])
	when /^<[^<>]+>$/
	  subseq[1..-2]
	else
	  subseq.split('')
	end
      }.flatten
      (l.size == 1) ? l[0] : l
    }
  end
end
@
