head	1.12;
access;
symbols
	v1_6_7:1.6.2.4
	v1_6_6:1.6.2.1
	v1_6_5:1.6
	v1_6_4:1.6
	v1_7_1:1.6
	v1_6_4_preview4:1.6
	v1_6_4_preview3:1.6
	v1_6_4_preview2:1.6
	v1_6_4_preview1:1.6
	v1_6_3:1.6
	ruby_m17n:1.6.0.4
	ruby_1_6:1.6.0.2
	v1_6_2:1.6
	v1_6_1:1.6
	v1_6_0:1.6
	v1_4_6:1.2.2.3
	v1_4_5:1.2.2.3
	v1_4_4:1.2.2.1
	ruby_1_4_3:1.2.2.1
	ruby1_4_3:1.2.2.1
	v1_4_3:1.2.2.1
	v1_5_0:1.3
	ruby_1_4_3_pre1:1.2.2.1
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1.2.2
	v1_3_6_repack:1.1.1.1.2.2
	v1_3_6:1.1.1.1.2.2
	v1_3_5:1.1.1.1.2.2
	v1_2_6repack:1.1.2.3
	v1_3_4_990625:1.1.1.1.2.2
	v1_3_4_990624:1.1.1.1.2.2
	v1_2_6:1.1.2.3
	v1_3_4_990611:1.1.1.1.2.1
	v1_3_4_990531:1.1.1.1.2.1
	v1_3_3_990518:1.1.1.1.2.1
	v1_3_3_990513:1.1.1.1.2.1
	v1_3_3_990507:1.1.1.1.2.1
	v1_2_5:1.1.2.3
	v1_2_4:1.1.2.3
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.3
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.3
	v1_2_1repack:1.1.2.2
	v1_2_1:1.1.2.2
	v1_2_stable:1.1.2.2
	v1_1c9_1:1.1.2.2
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.12
date	2002.10.02.06.02.17;	author matz;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.04.07.03.33;	author nagai;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.08.07.03.07;	author matz;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.28.06.53.33;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.28.08.44.43;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.19.05.02.17;	author matz;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.02.04.54.21;	author matz;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.06.13.09.57.03;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.12.07.48.28;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	99.11.04.08.39.38;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.52;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.11.17.09.12.44;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.34;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	99.03.24.08.52.34;	author matz;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	99.06.24.04.24.07;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.17.09.12.44;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.12.14.09.00.07;	author matz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	99.01.18.09.08.51;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	99.11.04.08.39.57;	author matz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.06.13.09.50.58;	author matz;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2000.06.13.09.57.40;	author matz;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2000.08.07.05.05.01;	author matz;	state Exp;
branches;
next	;

1.6.2.1
date	2001.11.19.04.58.07;	author matz;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.01.28.08.42.40;	author matz;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2002.02.28.06.52.49;	author matz;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2002.03.01.14.12.05;	author matz;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2002.03.08.06.59.55;	author matz;	state Exp;
branches;
next	;


desc
@@


1.12
log
@* commit miss;  and tcltklib fix too.
@
text
@#
#  tkfont.rb - the class to treat fonts on Ruby/Tk
#
#                               by  Hidetoshi NAGAI (nagai@@ai.kyutech.ac.jp)
#
require 'tk'

class TkFont
  include Tk
  extend TkCore

  Tk_FontID = [0]
  Tk_FontNameTBL = {}
  Tk_FontUseTBL = {}

  # set default font
  case Tk::TK_VERSION
  when /^4\.*/
    DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
    DEFAULT_KANJI_FONT_NAME = 'k14'.freeze
  when /^8\.*/
    if JAPANIZED_TK
      begin
        fontnames = tk_call('font', 'names')
	case fontnames
	when /defaultgui/
          # Tcl/Tk-JP for Windows
          ltn = 'defaultgui'
          knj = 'defaultgui'
	when /Mincho:Helvetica-12/
          # Tcl/Tk-JP for UNIX/X
          ltn, knj = tk_split_simplelist(tk_call('font', 'configure', 
                                                 'Mincho:Helvetica-12', 
                                                 '-compound'))
        else
          # unknown Tcl/Tk-JP
	  platform = tk_call('set', 'tcl_platform(platform)')
	  case platform
	  when 'unix'
	    ltn = {'family'=>'Helvetica'.freeze, 'size'=>-12}
	    knj = 'k14'
	    #knj = '-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0'
	  when 'windows'
	    ltn = {'family'=>'MS Sans Serif'.freeze, 'size'=>8}
	    knj = 'mincho'
	  when 'macintosh'
	    ltn = 'system'
	    knj = 'mincho'
	  else # unknown
	    ltn = 'Helvetica'
	    knj = 'mincho'
	  end
        end
      rescue
        ltn = 'Helvetica'
        knj = 'mincho'
      end

    else # not JAPANIZED_TK
      begin
	platform = tk_call('set', 'tcl_platform(platform)')
	case platform
	when 'unix'
	  ltn = {'family'=>'Helvetica'.freeze, 'size'=>-12}
	  knj = 'k14'
	  #knj = '-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0'
	when 'windows'
	  ltn = {'family'=>'MS Sans Serif'.freeze, 'size'=>8}
	  knj = 'mincho'
	when 'macintosh'
	  ltn = 'system'
	  knj = 'mincho'
	else # unknown
	  ltn = 'Helvetica'
	  knj = 'mincho'
	end
      rescue
	ltn = 'Helvetica'
	knj = 'mincho'
      end
    end

    DEFAULT_LATIN_FONT_NAME = ltn.freeze
    DEFAULT_KANJI_FONT_NAME = knj.freeze

  else # unknown version
    DEFAULT_LATIN_FONT_NAME = 'Helvetica'.freeze
    DEFAULT_KANJI_FONT_NAME = 'mincho'.freeze

  end

  if $DEBUG
    print "default latin font = "; p DEFAULT_LATIN_FONT_NAME
    print "default kanji font = "; p DEFAULT_KANJI_FONT_NAME
  end

  ###################################
  # class methods
  ###################################
  def TkFont.families(window=nil)
    case (Tk::TK_VERSION)
    when /^4\.*/
      ['fixed']

    when /^8\.*/
      if window
	tk_split_simplelist(tk_call('font', 'families', '-displayof', window))
      else
	tk_split_simplelist(tk_call('font', 'families'))
      end
    end
  end

  def TkFont.names
    case (Tk::TK_VERSION)
    when /^4\.*/
      r = ['fixed']
      r += ['a14', 'k14'] if JAPANIZED_TK
      Tk_FontNameTBL.each_value{|obj| r.push(obj)}
      r | []

    when /^8\.*/
      tk_split_simplelist(tk_call('font', 'names'))

    end
  end

  def TkFont.create_copy(font)
    fail 'source-font need to be TkFont' unless font.kind_of? TkFont
    keys = {}
    font.configinfo.each{|key,value| keys[key] = value }
    TkFont.new(font.latin_font, font.kanji_font, keys)
  end

  def TkFont.get_obj(name)
    if name =~ /^(@@font[0-9]+)(|c|l|k)$/
      Tk_FontNameTBL[$1]
    else
      nil
    end
  end

  def TkFont.init_widget_font(path, *args)
    case (Tk::TK_VERSION)
    when /^4\.*/
      conf = tk_split_simplelist(tk_call(*args)).
	find_all{|prop| prop[0..5]=='-font ' || prop[0..10]=='-kanjifont '}.
	collect{|prop| tk_split_simplelist(prop)}
      if font_inf = conf.assoc('-font')
	ltn = font_inf[4]
	ltn = nil if ltn == []
      else 
	#ltn = nil
	raise RuntimeError, "unknown option '-font'"
      end
      if font_inf = conf.assoc('-kanjifont')
	knj = font_inf[4]
	knj = nil if knj == []
      else
	knj = nil
      end
      TkFont.new(ltn, knj).call_font_configure(path, *(args + [{}]))

    when /^8\.*/
      font_prop = tk_split_simplelist(tk_call(*args)).find{|prop| 
	prop[0..5] == '-font '
      }
      unless font_prop
	raise RuntimeError, "unknown option '-font'"
      end
      fnt = tk_split_simplelist(font_prop)[4]
      if fnt == ""
	TkFont.new(nil, nil).call_font_configure(path, *(args + [{}]))
      else
	begin
	  compound = tk_split_simplelist(
            Hash[*tk_split_simplelist(tk_call('font', 'configure', 
					       fnt))].collect{|key,value|
              [key[1..-1], value]
            }.assoc('compound')[1])
	rescue
	  compound = []
	end
	if compound == []
	  #TkFont.new(fnt, DEFAULT_KANJI_FONT_NAME) \
	  #.call_font_configure(path, *(args + [{}]))
	  TkFont.new(fnt).call_font_configure(path, *(args + [{}]))
	else
	  TkFont.new(compound[0], compound[1]) \
	  .call_font_configure(path, *(args + [{}]))
	end
      end
    end
  end

  def TkFont.used_on(path=nil)
    if path
      Tk_FontUseTBL[path]
    else
      Tk_FontUseTBL.values | []
    end
  end

  def TkFont.failsafe(font)
    begin
      if /^8\.*/ === Tk::TK_VERSION  && JAPANIZED_TK
        tk_call('font', 'failsafe', font)
      end
    rescue
    end
  end

  ###################################
  private
  ###################################
  def initialize(ltn=DEFAULT_LATIN_FONT_NAME, knj=nil, keys=nil)
    @@id = format("@@font%.4d", Tk_FontID[0])
    Tk_FontID[0] += 1
    Tk_FontNameTBL[@@id] = self
    knj = DEFAULT_KANJI_FONT_NAME if JAPANIZED_TK && !knj
    create_compoundfont(ltn, knj, keys)
  end

  def _get_font_info_from_hash(font)
    font = _symbolkey2str(font)
    foundry  = (info = font['foundry'] .to_s)?  info: '*'
    family   = (info = font['family']  .to_s)?  info: '*'
    weight   = (info = font['weight']  .to_s)?  info: '*'
    slant    = (info = font['slant']   .to_s)?  info: '*'
    swidth   = (info = font['swidth']  .to_s)?  info: '*'
    adstyle  = (info = font['adstyle'] .to_s)?  info: '*'
    pixels   = (info = font['pixels']  .to_s)?  info: '*'
    points   = (info = font['points']  .to_s)?  info: '*'
    resx     = (info = font['resx']    .to_s)?  info: '*'
    resy     = (info = font['resy']    .to_s)?  info: '*'
    space    = (info = font['space']   .to_s)?  info: '*'
    avgWidth = (info = font['avgWidth'].to_s)?  info: '*'
    charset  = (info = font['charset'] .to_s)?  info: '*'
    encoding = (info = font['encoding'].to_s)?  info: '*'

    [foundry, family, weight, slant, swidth, adstyle,
      pixels, points, resx, resy, space, avgWidth, charset, encoding]
  end

  def create_latinfont_tk4x(font)
    if font.kind_of? Hash
      @@latinfont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@latinfont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@latinfont = font.latin_font

    else
      if font
        @@latinfont = font
      else
        @@latinfont = DEFAULT_LATIN_FONT_NAME
      end

    end
  end

  def create_kanjifont_tk4x(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

    if font.kind_of? Hash
      @@kanjifont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@kanjifont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'
    elsif font.kind_of? TkFont
      @@kanjifont = font.kanji_font
    else
      if font
        @@kanjifont = font
      else
        @@kanjifont = DEFAULT_KANJI_FONT_NAME
      end
    end
  end

  def create_compoundfont_tk4x(ltn, knj, keys)
    create_latinfont(ltn)
    create_kanjifont(knj)

    if JAPANIZED_TK
      @@compoundfont = [[@@latinfont], [@@kanjifont]]
      @@fontslot = {'font'=>@@latinfont, 'kanjifont'=>@@kanjifont}
    else
      @@compoundfont = @@latinfont
      @@fontslot = {'font'=>@@latinfont}
    end
  end

  def create_latinfont_tk8x(font)
    @@latinfont = @@id + 'l'

    if JAPANIZED_TK
      if font.kind_of? Hash
	if font[:charset] || font['charset']
	  tk_call('font', 'create', @@latinfont, *hash_kv(font))
	else
	  tk_call('font', 'create', @@latinfont, 
                  '-charset', 'iso8859', *hash_kv(font))
	end
      elsif font.kind_of? Array
	tk_call('font', 'create', @@latinfont, '-copy', array2tk_list(font))
        tk_call('font', 'configure', @@latinfont, '-charset', 'iso8859')
      elsif font.kind_of? TkFont
	tk_call('font', 'create', @@latinfont, '-copy', font.latin_font)
      elsif font
	tk_call('font', 'create', @@latinfont, '-copy', font, 
                '-charset', 'iso8859')
      else
	tk_call('font', 'create', @@latinfont, '-charset', 'iso8859')
      end
    else
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      else
	keys = {}
	if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
	elsif font.kind_of? TkFont
	  actual_core(font.latin_font).each{|key,val| keys[key] = val}
	elsif font
	  actual_core(font).each{|key,val| keys[key] = val}
	end
	tk_call('font', 'create', @@latinfont, *hash_kv(keys))
      end

      if font && @@compoundfont
        keys = {}
        actual_core(@@latinfont).each{|key,val| keys[key] = val}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
      end
    end
  end

  def create_kanjifont_tk8x(font)
    @@kanjifont = @@id + 'k'

    if JAPANIZED_TK
      if font.kind_of? Hash
        if font[:charset] || font['charset']
	  tk_call('font', 'create', @@kanjifont, *hash_kv(font))
        else
	  tk_call('font', 'create', @@kanjifont, 
		  '-charset', 'jisx0208.1983', *hash_kv(font))
        end
      elsif font.kind_of? Array
        tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
        tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')
      elsif font.kind_of? TkFont
        tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)
      elsif font
        tk_call('font', 'create', @@kanjifont, '-copy', font, 
	        '-charset', 'jisx0208.1983')
      else
        tk_call('font', 'create', @@kanjifont, '-charset', 'jisx0208.1983')
      end
      # end of JAPANIZED_TK

    else
      if font.kind_of? Hash
        tk_call('font', 'create', @@kanjifont, *hash_kv(font))
      else
        keys = {}
        if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
        elsif font.kind_of? TkFont
	  actual_core(font.kanji_font).each{|key,val| keys[key] = val}
        elsif font
	  actual_core(font).each{|key,val| keys[key] = val}
        end
        tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
      end

      if font && @@compoundfont
        keys = {}
        actual_core(@@kanjifont).each{|key,val| keys[key] = val}
        tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
      end
    end
  end

  def create_compoundfont_tk8x(ltn, knj, keys)
    create_latinfont(ltn)
    create_kanjifont(knj)

    @@compoundfont = @@id + 'c'
    if JAPANIZED_TK
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'create', @@compoundfont, 
	      '-compound', [@@latinfont, @@kanjifont], *hash_kv(keys))
    else
      tk_call('font', 'create', @@compoundfont)

      latinkeys = {}
      begin
	actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
      rescue
	latinkeys {}
      end
      if latinkeys != {}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
      end

      if knj
	kanjikeys = {}
	begin
	  actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
	rescue
	  kanjikeys {}
	end
	if kanjikeys != {}
	  tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
	end
      end

      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
  end

  def actual_core_tk4x(font, window=nil, option=nil)
    # dummy
    if option
      ""
    else
      [['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	['underline',[]], ['overstrike',[]], ['charset',[]], 
	['pointadjust',[]]]
    end
  end

  def actual_core_tk8x(font, window=nil, option=nil)
    if option == 'compound'
      ""
    elsif option
      if window
	tk_call('font', 'actual', font, "-displayof", window, "-#{option}")
      else
	tk_call('font', 'actual', font, "-#{option}")
      end
    else
      l = tk_split_simplelist(if window
			 	 tk_call('font', 'actual', font, 
					             "-displayof", window)
			      else
			  	 tk_call('font', 'actual', font)
			      end)
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def configure_core_tk4x(font, slot, value=None)
    ""
  end

  def configinfo_core_tk4x(font, option=nil)
    # dummy
    if option
      ""
    else
      [['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	['underline',[]], ['overstrike',[]], ['charset',[]], 
	['pointadjust',[]]]
    end
  end

  def configure_core_tk8x(font, slot, value=None)
    if slot.kind_of? Hash
      tk_call 'font', 'configure', font, *hash_kv(slot)
    else
      tk_call 'font', 'configure', font, "-#{slot}", value
    end
  end

  def configinfo_core_tk8x(font, option=nil)
    if option == 'compound'
      ""
    elsif option
      tk_call('font', 'configure', font, "-#{option}")
    else
      l = tk_split_simplelist(tk_call('font', 'configure', font))
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def delete_core_tk4x
    Tk_FontNameTBL.delete(@@id)
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def delete_core_tk8x
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@compoundfont)
    rescue
    end
    Tk_FontNameTBL.delete(@@id)
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def latin_replace_core_tk4x(ltn)
    create_latinfont_tk4x(ltn)
    @@compoundfont[0] = [@@latinfont] if JAPANIZED_TK
    @@fontslot['font'] = @@latinfont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'font'=>@@latinfont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-font', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('font'=>@@latinfont)
	    tk_call(w, 'configure', '-font', @@latinfont)
	  end
	rescue
	  Tk_FontUseTBL.delete(w)
	end
      end
    }
    self
  end

  def kanji_replace_core_tk4x(knj)
    return self unless JAPANIZED_TK

    create_kanjifont_tk4x(knj)
    @@compoundfont[1] = [@@kanjifont]
    @@fontslot['kanjifont'] = @@kanjifont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'kanjifont'=>@@kanjifont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-kanjifont', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('kanjifont'=>@@kanjifont)
	    tk_call(w, 'configure', '-kanjifont', @@kanjifont)
	  end
	rescue
	  Tk_FontUseTBL.delete(w)
	end
      end
    }
    self
  end

  def latin_replace_core_tk8x(ltn)
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    create_latinfont(ltn)
    self
  end

  def kanji_replace_core_tk8x(knj)
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    create_kanjifont(knj)
    self
  end

  def measure_core_tk4x(window, text)
    0
  end

  def measure_core_tk8x(window, text)
    if window
      number(tk_call('font', 'measure', @@compoundfont, 
		     '-displayof', window, text))
    else
      number(tk_call('font', 'measure', @@compoundfont, text))
    end
  end

  def metrics_core_tk4x(font, window, option=nil)
    # dummy
    if option
      ""
    else
      [['ascent',[]], ['descent',[]], ['linespace',[]], ['fixed',[]]]
    end
  end

  def metrics_core_tk8x(font, window, option=nil)
    if option
      if window
	number(tk_call('font', 'metrics', font, 
		       "-displayof", window, "-#{option}"))
      else
	number(tk_call('font', 'metrics', font, "-#{option}"))
      end
    else
      l = tk_split_list(if window
			  tk_call('font','metrics',font,"-displayof",window)
			else
			  tk_call('font','metrics',font)
			end)
      r = []
      while key=l.shift
	r.push [key[1..-1], l.shift.to_i]
      end
      r
    end
  end

  ###################################
  # private alias
  ###################################
  case (Tk::TK_VERSION)
  when /^4\.*/
    alias create_latinfont    create_latinfont_tk4x
    alias create_kanjifont    create_kanjifont_tk4x
    alias create_compoundfont create_compoundfont_tk4x
    alias actual_core         actual_core_tk4x
    alias configure_core      configure_core_tk4x
    alias configinfo_core     configinfo_core_tk4x
    alias delete_core         delete_core_tk4x
    alias latin_replace_core  latin_replace_core_tk4x
    alias kanji_replace_core  kanji_replace_core_tk4x
    alias measure_core        measure_core_tk4x
    alias metrics_core        metrics_core_tk4x

  when /^8\.[0123]/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk8x
    alias create_compoundfont create_compoundfont_tk8x
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk8x
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.*/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk8x
    alias create_compoundfont create_compoundfont_tk8x
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk8x
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  end

  ###################################
  public
  ###################################
  def method_missing(id, *args)
    name = id.id2name
    case args.length
    when 1
      configure name, args[0]
    when 0
      begin
	configinfo name
      rescue
	fail NameError, "undefined local variable or method `#{name}' for #{self.to_s}", error_at
      end
    else
      fail NameError, "undefined method `#{name}' for #{self.to_s}", error_at
    end
  end

  def call_font_configure(path, *args)
    args += hash_kv(args.pop.update(@@fontslot))
    tk_call(*args)
    Tk_FontUseTBL[path] = self
    self
  end

  def used
    ret = []
    Tk_FontUseTBL.each{|key,value|
      if key.include?(';')
	win, tag = key.split(';')
	winobj = tk_tcl2ruby(win)
	if winobj.kind_of? TkText
	  ret.push([winobj, winobj.tagid2obj(tag)])
	elsif winobj.kind_of? TkCanvas
	  if (tagobj = TkcTag.id2obj(winobj, tag)).kind_of? TkcTag
	    ret.push([winobj, tagobj])
	  elsif (tagobj = TkcItem.id2obj(tag)).kind_of? TkcItem
	    ret.push([winobj, tagobj])
	  else
	    ret.push([winobj, tag])
	  end
	elsif winobj.kind_of? TkMenu
	  ret.push([winobj, tag])
	else
	  ret.push([win, tag])
	end
      else
	ret.push(tk_tcl2ruby(key)) if value == self
      end
    }
    ret
  end

  def id
    @@id
  end

  def to_eval
    font
  end

  def font
    @@compoundfont
  end

  def latin_font
    @@latinfont
  end

  def kanji_font
    @@kanjifont
  end

  def actual(option=nil)
    actual_core(@@compoundfont, nil, option)
  end

  def actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@compoundfont, window, option)
  end

  def latin_actual(option=nil)
    actual_core(@@latinfont, nil, option)
  end

  def latin_actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@latinfont, window, option)
  end

  def kanji_actual(option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      actual_core(@@kanjifont, nil, option)
    else
      actual_core_tk4x(nil, nil, option)
    end
  end

  def kanji_actual_displayof(window, option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      window = '.' unless window
      actual_core(@@kanjifont, window, option)
    else
      actual_core_tk4x(nil, window, option)
    end
  end

  def [](slot)
    configinfo slot
  end

  def []=(slot, val)
    configure slot, val
  end

  def configure(slot, value=None)
    configure_core(@@compoundfont, slot, value)
  end

  def configinfo(slot=nil)
    configinfo_core(@@compoundfont, slot)
  end

  def delete
    delete_core
  end

  def latin_configure(slot, value=None)
    if JAPANIZED_TK
      configure_core(@@latinfont, slot, value)
    else
      configure(slot, value)
    end
  end

  def latin_configinfo(slot=nil)
    if JAPANIZED_TK
      configinfo_core(@@latinfont, slot)
    else
      configinfo(slot)
    end
  end

  def kanji_configure(slot, value=None)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configure_core(@@kanjifont, slot, value)
      configure('size'=>configinfo('size')) # to reflect new configuration
    else
      #""
      configure(slot, value)
    end
  end

  def kanji_configinfo(slot=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configinfo_core(@@kanjifont, slot)
    else
      #[]
      configinfo(slot)
    end
  end

  def replace(ltn, knj)
    latin_replace(ltn)
    kanji_replace(knj)
    self
  end

  def latin_replace(ltn)
    latin_replace_core(ltn)
    reset_pointadjust
  end

  def kanji_replace(knj)
    kanji_replace_core(knj)
    reset_pointadjust
  end

  def measure(text)
    measure_core(nil, text)
  end

  def measure_displayof(window, text)
    window = '.' unless window
    measure_core(window, text)
  end

  def metrics(option=nil)
    metrics_core(@@compoundfont, nil, option)
  end

  def metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@compoundfont, window, option)
  end

  def latin_metrics(option=nil)
    metrics_core(@@latinfont, nil, option)
  end

  def latin_metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@latinfont, window, option)
  end

  def kanji_metrics(option=nil)
    if JAPANIZED_TK
      metrics_core(@@kanjifont, nil, option)
    else
      metrics_core_tk4x(nil, nil, option)
    end
  end

  def kanji_metrics_displayof(window, option=nil)
    if JAPANIZED_TK
      window = '.' unless window
      metrics_core(@@kanjifont, window, option)
    else
      metrics_core_tk4x(nil, window, option)
    end
  end

  def reset_pointadjust
    begin
      if /^8\.*/ === Tk::TK_VERSION  && JAPANIZED_TK
        configure('pointadjust' => latin_actual.assoc('size')[1].to_f / 
                                      kanji_actual.assoc('size')[1].to_f )
      end
    rescue
    end
    self
  end

  ###################################
  # public alias
  ###################################
  alias ascii_font             latin_font
  alias create_asciifont       create_latinfont
  alias ascii_actual           latin_actual
  alias ascii_actual_displayof latin_actual_displayof
  alias ascii_configure        latin_configure
  alias ascii_configinfo       latin_configinfo
  alias ascii_replace          latin_replace
  alias ascii_metrics          latin_metrics

end

module TkTreatTagFont
  def font_configinfo
    @@parent.tagfont_configinfo(@@id)
  end
#  alias font font_configinfo

  def font_configure(slot)
    @@parent.tagfont_configure(@@id, slot)
  end

  def latinfont_configure(ltn, keys=nil)
    @@parent.latintagfont_configure(@@id, ltn, keys)
  end
  alias asciifont_configure latinfont_configure

  def kanjifont_configure(knj, keys=nil)
    @@parent.kanjitagfont_configure(@@id, ltn, keys)
  end

  def font_copy(window, wintag=nil)
    @@parent.tagfont_copy(@@id, window, wintag)
  end

  def latinfont_copy(window, wintag=nil)
    @@parent.latintagfont_copy(@@id, window, wintag)
  end
  alias asciifont_copy latinfont_copy

  def kanjifont_copy(window, wintag=nil)
    @@parent.kanjitagfont_copy(@@id, window, wintag)
  end
end
@


1.11
log
@* tkfont.rb:  Fix bugs on TkFont.init_widget_font for Tk8.x.

* tkafter.rb: Add self to 1st argument of interval- and loop-proc
    TkAfter#current_interval returns an interval (sleep) time value
    TkAfter#current_args returns an array of arguments
    TkAfter#return_value returns a return value of last loop-proc
      e.g.
         TkAfter.new(
           proc{|obj| 500 - obj.current_interval}, 10,
           [proc{|obj| p obj.current_args}, 'proc', 1],
           proc{|obj| p obj.current_args; ['return', 2]},
           [proc{|obj|
              p obj.return_value
              p ['proc', obj.current_args[0].call(obj.return_value[1],
                                                  obj.current_args[1])]},
            proc{|*args| args[0] + args[1]}, 1],
           proc{p ['proc', 4]} ).start(100)

* tk*.rb: Allow to use Symbols for parameters.
    Allow new notation of constructor (also allow old notation).
      e.g.
        TkFrame.new('classname'=>'User'){|base|
          pack
          f = TkFrame.new(base, :classname=>'ButtonFrame').pack
          TkButton.new(
             :parent     => f,
             :text       => 'Quit',
             :command    => proc{exit}
          ).pack(
             :fill => :x,
             :pady => 2
          )
        }

* tkcanvas.rb: (TkcItem) Add 'coords' parameter to the canvas item
    constructor (for new notation of constructor).
      e.g.
        c = TkCanvas.new.pack
        l = TkcLine.new(c, :coords=>[[0,0], [100,100]])

* tcltklib.c: New 'mainloop' and 'mainloop_watchdog'.
    The priority of their event-loop can be controlled.
    They accept an optional argument.
    If it false, they don't exit although the root widget is destroyed.
    This function is sometimes useful, if it is used with 'restart'.
    'mainloop' can't treat Thread#join/value in a callback routine.
    (e.g. TkButton.new(:command=>proc{p Thread.new{button.invoke}.value}) )
    'mainloop_watchdog' can treat them, but watchdog thread is always running
    (so, a little heavier than 'mainloop').
    If the purpose of using Thread#join/value is to do something under some
    safe-level, please use Proc object.
    (e.g. :command=>proc{$SAFE=1;proc{$SAFE=2;button.invoke}.call;p $SAFE})

* tk.rb: Support functions of new 'mainloop' and 'mainloop_watchdog'.

* tk.rb: (Tk.restart) Add 'app-name' paramater and 'use' parameter.
    'app-name' specifies the name and the resource class of the
    application. If 'app-name' is specified to 'xxx', the application
    class on the resource database is set to 'Xxx' and the application
    name is changed by the same rule of Tk.appname method.  'use'
    specifies the main window for embedding the root widget instead of
    generating a new window.

* tk.rb: Add new parameter 'widgetname' to the widget constructor to
    support effective use of Resource Database.  For example, the
    resource 'Xxx*quit.text: QUIT' can set the text of the button
    generated by the following code.
      e.g.
        Tk.restart('Xxx')
        TkButton.new(nil, 'widgetname'=>'quit', 'command'=>proc{exit}).pack
        Tk.mainloop

* tk.rb: TkOption::get always returns a tainted string.
    Add TkOption::new_proc_class.
    It generates a class to import procedures defined on the resource
    database. For example, there is a following resource file.
      ----< resource-test >------------
      *CMD.foo: {|*args| p [$SAFE, :foo, args]}
      *CMD.XXX.bar: {|*args| p [$SAFE, :bar, args]}
      *Button.command: ruby {p self; p $SAFE; TkOption::CMD::XXX.bar(1,2,3)}
      ---------------------------------
    The following code is a sample of use of the resource file.
      e.g.
        require 'tk'
        TkOption.readfile 'resource-test'
        p TkOption.new_proc_class(:CMD, [:foo], 1)
        p TkOption.new_proc_class(:XXX, [:bar], 2, false, TkOption::CMD)
        TkButton.new(:text=>'test').pack
        Tk.mainloop
@
text
@d567 1
a567 1
    Tk_FontNameTBL[@@id] = nil
d584 1
a584 1
    Tk_FontNameTBL[@@id] = nil
d613 1
a613 1
	  Tk_FontUseTBL[w] = nil
d647 1
a647 1
	  Tk_FontUseTBL[w] = nil
@


1.10
log
@* eval.c (cvar_cbase): utility function to find innermost non
  singleton cbase.

* eval.c (is_defined): adopt new cvar behavior.

* eval.c (rb_eval): ditto.

* eval.c (assign): ditto.

* class.c (rb_mod_clone): should not call rb_obj_clone(), since
  Module does not provide "allocate".

* class.c (rb_singleton_class): should crate new singleton class
  if obj is a class or module and attached object is different,
  which means metaclass of singleton class is sought.

* time.c (time_s_alloc): now follows allocation framework.

* eval.c (rb_eval): should initialize outer class variables from
  methods in singleton class definitions.

* eval.c (assign): ditto.
@
text
@d176 2
a177 1
	  compound = Hash[*tk_split_simplelist(tk_call('font', 'configure', 
d179 2
a180 2
	    [key[1..-1], value]
	  }.assoc('compound')[1]
d185 3
a187 2
	  TkFont.new(fnt, DEFAULT_KANJI_FONT_NAME) \
	  .call_font_configure(path, *(args + [{}]))
d225 1
d359 1
a359 1
	if font['charset']
d404 1
a404 1
        if font['charset']
@


1.9
log
@* eval.c (rb_mod_include): load modules in argument order.

* st.c (st_init_table_with_size): num_bins should be prime numbers
  (no decrement).

* st.c (rehash): ditto.
@
text
@d761 16
d779 1
a779 1
    tk_call *args
@


1.8
log
@* eval.c (is_defined): defined?(Foo::Baz) should check constants
  only, no methods.

* eval.c (is_defined): should not dump core on defined?(a::b)
  where a is not a class nor a module.

* object.c (Init_Object): remove dup and clone from TrueClass,
  FalseClass, and NilClass.

* array.c (rb_ary_fill): Array#fill takes block to get the value to
  fill.

* string.c (rb_str_to_i): to_i(0) auto-detects base radix.

* array.c (rb_ary_initialize): fill by the block evaluation value
  if block is given.
@
text
@d999 1
a999 1
  alias font font_configinfo
@


1.7
log
@* parse.y (parse_regx): should raise error on untermitated
  expression interpolation.

* pack.c (pack_unpack): should give length to utf8_to_uv().

* pack.c (utf8_to_uv): add length check.

* massages: replace "wrong #" by "wrong number".

* marshal.c (w_float): output Infinity and NaN explicitly.

* marshal.c (r_object): support new explicit float format.

* eval.c (rb_thread_wait_for): select may cause ERESTART on
  Solaris.

* eval.c (rb_thread_select): ditto.

* array.c (rb_ary_join): dumped core if sep is not T_STRING nor T_NIL.

* array.c (rb_ary_join): buffer size calculattion was wrong.

* array.c (rb_ary_to_s): if rb_output_fs is nil, insert newlines
  between array elements (use rb_default_rs as newline litral)
  [experimental].

* gc.c (init_mark_stack): no need to clear mark_stack.

* gc.c (gc_mark_all): need to handle finalizer mark.

* gc.c (gc_mark_rest): use MEMCPY instead of memcpy.

* gc.c (rb_gc_mark): earlier const check to avoid pusing special
  constants into mark stack.

* numeric.c (fix_to_s): 'to_s' now takes optional argument to
  specify radix. [new]

* bignum.c (rb_big_to_s): ditto. [new]
@
text
@d176 2
a177 2
	  compound = Hash[*list(tk_call('font', 'configure', 
					fnt))].collect{|key,value|
@


1.6
log
@matz
@
text
@a693 2
	number(tk_call('font', 'metrics', font, "-#{option}"))
      else
d696 2
@


1.6.2.1
log
@* parse.y (parse_regx): should raise error on untermitated
  expression interpolation.

* pack.c (pack_unpack): should give length to utf8_to_uv().

* pack.c (utf8_to_uv): add length check.

* eval.c (rb_thread_wait_for): select may cause ERESTART on
  Solaris.

* eval.c (rb_thread_select): ditto.
@
text
@d694 2
a697 2
      else
	number(tk_call('font', 'metrics', font, "-#{option}"))
@


1.6.2.2
log
@* eval.c (is_defined): defined?(Foo::Baz) should check constants
  only, no methods.

* eval.c (is_defined): should not dump core on defined?(a::b)
  where a is not a class nor a module.
@
text
@d176 2
a177 2
	  compound = Hash[*tk_split_simplelist(tk_call('font', 'configure', 
					       fnt))].collect{|key,value|
@


1.6.2.3
log
@* st.c (st_init_table_with_size): num_bins should be prime numbers
  (no decrement).

* st.c (rehash): ditto.
@
text
@d999 1
a999 1
#  alias font font_configinfo
@


1.6.2.4
log
@* stable version 1.6.7 released.
@
text
@a760 16
  def method_missing(id, *args)
    name = id.id2name
    case args.length
    when 1
      configure name, args[0]
    when 0
      begin
	configinfo name
      rescue
	fail NameError, "undefined local variable or method `#{name}' for #{self.to_s}", error_at
      end
    else
      fail NameError, "undefined method `#{name}' for #{self.to_s}", error_at
    end
  end

@


1.6.2.5
log
@* eval.c (cvar_cbase): utility function to find innermost non
  singleton cbase.

* eval.c (is_defined): adopt new cvar behavior.

* eval.c (rb_eval): ditto.

* eval.c (assign): ditto.
@
text
@d779 1
a779 1
    tk_call(*args)
@


1.5
log
@tk font patch
@
text
@d16 1
d37 16
a52 2
          ltn = 'Helvetica'
          knj = 'mincho'
d58 23
a80 5
      DEFAULT_LATIN_FONT_NAME = ltn.freeze
      DEFAULT_KANJI_FONT_NAME = knj.freeze
    else
      DEFAULT_LATIN_FONT_NAME = 'Helvetica'.freeze
      DEFAULT_KANJI_FONT_NAME = 'mincho'.freeze
d82 13
a95 2
  p "default latin font = #{DEFAULT_LATIN_FONT_NAME}" if $DEBUG
  p "default kanji font = #{DEFAULT_KANJI_FONT_NAME}" if $DEBUG
d214 1
a214 2
  def initialize(ltn=DEFAULT_LATIN_FONT_NAME, knj=DEFAULT_KANJI_FONT_NAME, 
		 keys=nil)
d218 2
a219 3
    create_latinfont(ltn)
    create_kanjifont(knj)
    create_compoundfont(keys)
d338 4
a341 1
  def create_compoundfont_tk4x(keys)
d387 6
d396 1
a396 6
  def create_kanjifont_tk80(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

d399 16
a414 3
    if font.kind_of? Hash
      if font['charset']
	tk_call('font', 'create', @@kanjifont, *hash_kv(font))
d416 1
a416 2
	tk_call('font', 'create', @@kanjifont, 
		'-charset', 'jisx0208.1983', *hash_kv(font))
d418 1
a418 12
    elsif font.kind_of? Array
      tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
      tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')
    elsif font.kind_of? TkFont
      tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)
    elsif font
      tk_call('font', 'create', @@kanjifont, '-copy', font, 
	      '-charset', 'jisx0208.1983')
    else
      tk_call('font', 'create', @@kanjifont, '-charset', 'jisx0208.1983')
    end
  end
a419 5
  def create_kanjifont_tk81(font)
    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      tk_call('font', 'create', @@kanjifont, *hash_kv(font))
d421 12
a432 7
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.kanji_font).each{|key,val| keys[key] = val}
      elsif font
	actual_core(font).each{|key,val| keys[key] = val}
a433 2
      tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
    end
d435 5
a439 5
    keys = {}
    actual_core(@@kanjifont).each{|key,val| keys[key] = val}
    begin
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    rescue
d443 4
a446 1
  def create_compoundfont_tk80(keys)
d454 1
d464 13
a481 28
  def create_compoundfont_tk81(keys)
    @@compoundfont = @@id + 'c'
    tk_call('font', 'create', @@compoundfont)

    latinkeys = {}
    begin
      actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
    rescue
      latinkeys {}
    end
    if latinkeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
    end

    kanjikeys = {}
    begin
      actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
    rescue
      kanjikeys {}
    end
    if kanjikeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
    end

    @@fontslot = {'font'=>@@compoundfont}
    tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
  end

d660 1
a660 3
  def kanji_replace_core_tk80(knj)
    return self unless JAPANIZED_TK

a668 17
  def kanji_replace_core_tk81(knj)
    if font.kind_of? Hash
      tk_call('font', 'configure', @@compoundfont, *hash_kv(knj))
    else
      keys = {}
      if knj.kind_of? Array
	actual_core(array2tk_list(knj)).each{|key,val| keys[key] = val}
      elsif knj.kind_of? TkFont
	actual_core(knj.latin_font).each{|key,val| keys[key] = val}
      else
	actual_core(knj).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
    self
  end

d730 1
a730 14
  when /^8\.0/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk80
    alias create_compoundfont create_compoundfont_tk80
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk80
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.[123]/
d732 2
a733 2
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
d739 1
a739 1
    alias kanji_replace_core  kanji_replace_core_tk81
d745 2
a746 2
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
d752 1
a752 1
    alias kanji_replace_core  kanji_replace_core_tk81
@


1.4
log
@2000-06-12
@
text
@d16 36
a51 2
  DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
  DEFAULT_KANJI_FONT_NAME = 'k14'.freeze
d85 1
d88 1
a88 1
    new_font = TkFont.new(font.latin_font, font.kanji_font, keys)
d158 9
d238 5
a242 1
      @@latinfont = font
d288 5
a292 1
      @@kanjifont = font
d311 6
a316 1
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
d319 1
d322 3
d326 1
a326 1
	tk_call('font', 'create', @@latinfont, '-copy', font)
d337 1
a337 1
	else
a362 1

d365 1
a365 1
    else
d368 2
d384 1
a384 1
      else
d464 2
a466 2
      else
	tk_call('font', 'actual', font, "-displayof", window, "-#{option}")
d728 1
a728 1
  when /^8\.[12]/
@


1.3
log
@19991104
@
text
@d52 1
a52 1
    font.configure.each{|key,value| keys[key] = value }
d126 2
a127 1
  def initialize(ltn=nil, knj=nil, keys=nil)
a130 2

    ltn = DEFAULT_LATIN_FONT_NAME unless ltn
a131 2

    knj = DEFAULT_KANJI_FONT_NAME unless knj
a132 1

d713 1
a713 1
	  if (tagobj = TkcTag.id2obj(tag)).kind_of? TkcTag
d821 1
a821 1
      configure(slot, value)
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d670 14
a683 1
  when /^8\.1/
@


1.2.2.1
log
@19991104
@
text
@d670 1
a670 14
  when /^8\.[12]/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk81
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.*/
@


1.2.2.2
log
@2000-06-13
@
text
@d52 1
a52 1
    font.configinfo.each{|key,value| keys[key] = value }
d126 1
a126 2
  def initialize(ltn=DEFAULT_LATIN_FONT_NAME, knj=DEFAULT_KANJI_FONT_NAME, 
		 keys=nil)
d130 2
d133 2
d136 1
d717 1
a717 1
	  if (tagobj = TkcTag.id2obj(winobj, tag)).kind_of? TkcTag
d825 1
a825 1
      configinfo(slot)
@


1.2.2.3
log
@tk font patch
@
text
@d16 2
a17 36
  case Tk::TK_VERSION
  when /^4\.*/
    DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
    DEFAULT_KANJI_FONT_NAME = 'k14'.freeze
  when /^8\.*/
    if JAPANIZED_TK
      begin
        fontnames = tk_call('font', 'names')
	case fontnames
	when /defaultgui/
          # Tcl/Tk-JP for Windows
          ltn = 'defaultgui'
          knj = 'defaultgui'
	when /Mincho:Helvetica-12/
          # Tcl/Tk-JP for UNIX/X
          ltn, knj = tk_split_simplelist(tk_call('font', 'configure', 
                                                 'Mincho:Helvetica-12', 
                                                 '-compound'))
        else
          # unknown Tcl/Tk-JP
          ltn = 'Helvetica'
          knj = 'mincho'
        end
      rescue
        ltn = 'Helvetica'
        knj = 'mincho'
      end
      DEFAULT_LATIN_FONT_NAME = ltn.freeze
      DEFAULT_KANJI_FONT_NAME = knj.freeze
    else
      DEFAULT_LATIN_FONT_NAME = 'Helvetica'.freeze
      DEFAULT_KANJI_FONT_NAME = 'mincho'.freeze
    end
  end
  p "default latin font = #{DEFAULT_LATIN_FONT_NAME}" if $DEBUG
  p "default kanji font = #{DEFAULT_KANJI_FONT_NAME}" if $DEBUG
a50 1
    fail 'source-font need to be TkFont' unless font.kind_of? TkFont
d53 1
a53 1
    TkFont.new(font.latin_font, font.kanji_font, keys)
a122 9
  def TkFont.failsafe(font)
    begin
      if /^8\.*/ === Tk::TK_VERSION  && JAPANIZED_TK
        tk_call('font', 'failsafe', font)
      end
    rescue
    end
  end

d194 1
a194 5
      if font
        @@latinfont = font
      else
        @@latinfont = DEFAULT_LATIN_FONT_NAME
      end
d240 1
a240 5
      if font
        @@kanjifont = font
      else
        @@kanjifont = DEFAULT_KANJI_FONT_NAME
      end
d259 1
a259 6
	if font['charset']
	  tk_call('font', 'create', @@latinfont, *hash_kv(font))
	else
	  tk_call('font', 'create', @@latinfont, 
                  '-charset', 'iso8859', *hash_kv(font))
	end
a261 1
        tk_call('font', 'configure', @@latinfont, '-charset', 'iso8859')
a263 3
      elsif font
	tk_call('font', 'create', @@latinfont, '-copy', font, 
                '-charset', 'iso8859')
d265 1
a265 1
	tk_call('font', 'create', @@latinfont, '-charset', 'iso8859')
d276 1
a276 1
	elsif font
d302 1
d305 1
a305 1
    elsif font
a307 2
    else
      tk_call('font', 'create', @@kanjifont, '-charset', 'jisx0208.1983')
d322 1
a322 1
      elsif font
d402 2
a404 2
      else
	tk_call('font', 'actual', font, "-#{option}")
d666 1
a666 1
  when /^8\.[123]/
@


1.2.2.4
log
@matz
@
text
@a15 1
  # set default font
d36 2
a37 16
	  platform = tk_call('set', 'tcl_platform(platform)')
	  case platform
	  when 'unix'
	    ltn = {'family'=>'Helvetica'.freeze, 'size'=>-12}
	    knj = 'k14'
	    #knj = '-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0'
	  when 'windows'
	    ltn = {'family'=>'MS Sans Serif'.freeze, 'size'=>8}
	    knj = 'mincho'
	  when 'macintosh'
	    ltn = 'system'
	    knj = 'mincho'
	  else # unknown
	    ltn = 'Helvetica'
	    knj = 'mincho'
	  end
d43 5
a47 23

    else # not JAPANIZED_TK
      begin
	platform = tk_call('set', 'tcl_platform(platform)')
	case platform
	when 'unix'
	  ltn = {'family'=>'Helvetica'.freeze, 'size'=>-12}
	  knj = 'k14'
	  #knj = '-misc-fixed-medium-r-normal--14-*-*-*-c-*-jisx0208.1983-0'
	when 'windows'
	  ltn = {'family'=>'MS Sans Serif'.freeze, 'size'=>8}
	  knj = 'mincho'
	when 'macintosh'
	  ltn = 'system'
	  knj = 'mincho'
	else # unknown
	  ltn = 'Helvetica'
	  knj = 'mincho'
	end
      rescue
	ltn = 'Helvetica'
	knj = 'mincho'
      end
a48 13

    DEFAULT_LATIN_FONT_NAME = ltn.freeze
    DEFAULT_KANJI_FONT_NAME = knj.freeze

  else # unknown version
    DEFAULT_LATIN_FONT_NAME = 'Helvetica'.freeze
    DEFAULT_KANJI_FONT_NAME = 'mincho'.freeze

  end

  if $DEBUG
    print "default latin font = "; p DEFAULT_LATIN_FONT_NAME
    print "default kanji font = "; p DEFAULT_KANJI_FONT_NAME
d50 2
d170 2
a171 1
  def initialize(ltn=DEFAULT_LATIN_FONT_NAME, knj=nil, keys=nil)
d175 3
a177 2
    knj = DEFAULT_KANJI_FONT_NAME if JAPANIZED_TK && !knj
    create_compoundfont(ltn, knj, keys)
d296 1
a296 4
  def create_compoundfont_tk4x(ltn, knj, keys)
    create_latinfont(ltn)
    create_kanjifont(knj)

d342 2
d345 14
a358 4
      if font && @@compoundfont
        keys = {}
        actual_core(@@latinfont).each{|key,val| keys[key] = val}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
d360 10
d373 1
a373 1
  def create_kanjifont_tk8x(font)
d376 6
a381 11
    if JAPANIZED_TK
      if font.kind_of? Hash
        if font['charset']
	  tk_call('font', 'create', @@kanjifont, *hash_kv(font))
        else
	  tk_call('font', 'create', @@kanjifont, 
		  '-charset', 'jisx0208.1983', *hash_kv(font))
        end
      elsif font.kind_of? Array
        tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
        tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')
d383 1
a383 1
        tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)
d385 1
a385 4
        tk_call('font', 'create', @@kanjifont, '-copy', font, 
	        '-charset', 'jisx0208.1983')
      else
        tk_call('font', 'create', @@kanjifont, '-charset', 'jisx0208.1983')
d387 2
a388 1
      # end of JAPANIZED_TK
d390 5
a394 20
    else
      if font.kind_of? Hash
        tk_call('font', 'create', @@kanjifont, *hash_kv(font))
      else
        keys = {}
        if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
        elsif font.kind_of? TkFont
	  actual_core(font.kanji_font).each{|key,val| keys[key] = val}
        elsif font
	  actual_core(font).each{|key,val| keys[key] = val}
        end
        tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
      end

      if font && @@compoundfont
        keys = {}
        actual_core(@@kanjifont).each{|key,val| keys[key] = val}
        tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
      end
d398 1
a398 4
  def create_compoundfont_tk8x(ltn, knj, keys)
    create_latinfont(ltn)
    create_kanjifont(knj)

a405 1

d415 4
d420 13
a432 11
      if knj
	kanjikeys = {}
	begin
	  actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
	rescue
	  kanjikeys {}
	end
	if kanjikeys != {}
	  tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
	end
      end
d434 8
a441 2
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
d443 3
d626 3
a628 1
  def kanji_replace_core_tk8x(knj)
d637 17
d715 14
a728 1
  when /^8\.[0123]/
d730 2
a731 2
    alias create_kanjifont    create_kanjifont_tk8x
    alias create_compoundfont create_compoundfont_tk8x
d737 1
a737 1
    alias kanji_replace_core  kanji_replace_core_tk8x
d743 2
a744 2
    alias create_kanjifont    create_kanjifont_tk8x
    alias create_compoundfont create_compoundfont_tk8x
d750 1
a750 1
    alias kanji_replace_core  kanji_replace_core_tk8x
@


1.1
log
@file tkfont.rb was initially added on branch v1_1r.
@
text
@d1 953
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 944
#
#  tkfont.rb - the class to treat fonts on Ruby/Tk
#
#                               by  Hidetoshi NAGAI (nagai@@ai.kyutech.ac.jp)
#
require 'tk'

class TkFont
  include Tk
  extend TkCore

  Tk_FontID = [0]
  Tk_FontNameTBL = {}
  Tk_FontUseTBL = {}

  DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
  DEFAULT_KANJI_FONT_NAME = 'k14'.freeze

  ###################################
  # class methods
  ###################################
  def TkFont.families(window=nil)
    case (Tk::TK_VERSION)
    when /^4\.*/
      ['fixed']

    when /^8\.*/
      if window
	tk_split_simplelist(tk_call('font', 'families', '-displayof', window))
      else
	tk_split_simplelist(tk_call('font', 'families'))
      end
    end
  end

  def TkFont.names
    case (Tk::TK_VERSION)
    when /^4\.*/
      r = ['fixed']
      r += ['a14', 'k14'] if JAPANIZED_TK
      Tk_FontNameTBL.each_value{|obj| r.push(obj)}
      r | []

    when /^8\.*/
      tk_split_simplelist(tk_call('font', 'names'))

    end
  end

  def TkFont.create_copy(font)
    keys = {}
    font.configure.each{|key,value| keys[key] = value }
    new_font = TkFont.new(font.latin_font, font.kanji_font, keys)
  end

  def TkFont.get_obj(name)
    if name =~ /^(@@font[0-9]+)(|c|l|k)$/
      Tk_FontNameTBL[$1]
    else
      nil
    end
  end

  def TkFont.init_widget_font(path, *args)
    case (Tk::TK_VERSION)
    when /^4\.*/
      conf = tk_split_simplelist(tk_call(*args)).
	find_all{|prop| prop[0..5]=='-font ' || prop[0..10]=='-kanjifont '}.
	collect{|prop| tk_split_simplelist(prop)}
      if font_inf = conf.assoc('-font')
	ltn = font_inf[4]
	ltn = nil if ltn == []
      else 
	#ltn = nil
	raise RuntimeError, "unknown option '-font'"
      end
      if font_inf = conf.assoc('-kanjifont')
	knj = font_inf[4]
	knj = nil if knj == []
      else
	knj = nil
      end
      TkFont.new(ltn, knj).call_font_configure(path, *(args + [{}]))

    when /^8\.*/
      font_prop = tk_split_simplelist(tk_call(*args)).find{|prop| 
	prop[0..5] == '-font '
      }
      unless font_prop
	raise RuntimeError, "unknown option '-font'"
      end
      fnt = tk_split_simplelist(font_prop)[4]
      if fnt == ""
	TkFont.new(nil, nil).call_font_configure(path, *(args + [{}]))
      else
	begin
	  compound = Hash[*list(tk_call('font', 'configure', 
					fnt))].collect{|key,value|
	    [key[1..-1], value]
	  }.assoc('compound')[1]
	rescue
	  compound = []
	end
	if compound == []
	  TkFont.new(fnt, DEFAULT_KANJI_FONT_NAME) \
	  .call_font_configure(path, *(args + [{}]))
	else
	  TkFont.new(compound[0], compound[1]) \
	  .call_font_configure(path, *(args + [{}]))
	end
      end
    end
  end

  def TkFont.used_on(path=nil)
    if path
      Tk_FontUseTBL[path]
    else
      Tk_FontUseTBL.values | []
    end
  end

  ###################################
  private
  ###################################
  def initialize(ltn=nil, knj=nil, keys=nil)
    @@id = format("@@font%.4d", Tk_FontID[0])
    Tk_FontID[0] += 1
    Tk_FontNameTBL[@@id] = self

    ltn = DEFAULT_LATIN_FONT_NAME unless ltn
    create_latinfont(ltn)

    knj = DEFAULT_KANJI_FONT_NAME unless knj
    create_kanjifont(knj)

    create_compoundfont(keys)
  end

  def _get_font_info_from_hash(font)
    foundry  = (info = font['foundry'] .to_s)?  info: '*'
    family   = (info = font['family']  .to_s)?  info: '*'
    weight   = (info = font['weight']  .to_s)?  info: '*'
    slant    = (info = font['slant']   .to_s)?  info: '*'
    swidth   = (info = font['swidth']  .to_s)?  info: '*'
    adstyle  = (info = font['adstyle'] .to_s)?  info: '*'
    pixels   = (info = font['pixels']  .to_s)?  info: '*'
    points   = (info = font['points']  .to_s)?  info: '*'
    resx     = (info = font['resx']    .to_s)?  info: '*'
    resy     = (info = font['resy']    .to_s)?  info: '*'
    space    = (info = font['space']   .to_s)?  info: '*'
    avgWidth = (info = font['avgWidth'].to_s)?  info: '*'
    charset  = (info = font['charset'] .to_s)?  info: '*'
    encoding = (info = font['encoding'].to_s)?  info: '*'

    Array([foundry, family, weight, slant, swidth, adstyle, 
	    pixels, points, resx, resy, space, avgWidth, charset, encoding])
  end

  def create_latinfont_tk4x(font)
    if font.kind_of? Hash
      @@latinfont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@latinfont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@latinfont = font.latin_font

    else
      @@latinfont = font

    end
  end

  def create_kanjifont_tk4x(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

    if font.kind_of? Hash
      @@kanjifont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@kanjifont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@kanjifont = font.kanji_font

    else
      @@kanjifont = font

    end
  end

  def create_compoundfont_tk4x(keys)
    if JAPANIZED_TK
      @@compoundfont = [[@@latinfont], [@@kanjifont]]
      @@fontslot = {'font'=>@@latinfont, 'kanjifont'=>@@kanjifont}
    else
      @@compoundfont = @@latinfont
      @@fontslot = {'font'=>@@latinfont}
    end
  end

  def create_latinfont_tk8x(font)
    @@latinfont = @@id + 'l'

    if JAPANIZED_TK
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      elsif font.kind_of? Array
	tk_call('font', 'create', @@latinfont, '-copy', array2tk_list(font))
      elsif font.kind_of? TkFont
	tk_call('font', 'create', @@latinfont, '-copy', font.latin_font)
      else
	tk_call('font', 'create', @@latinfont, '-copy', font)
      end
    else
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      else
	keys = {}
	if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
	elsif font.kind_of? TkFont
	  actual_core(font.latin_font).each{|key,val| keys[key] = val}
	else
	  actual_core(font).each{|key,val| keys[key] = val}
	end
	tk_call('font', 'create', @@latinfont, *hash_kv(keys))
      end
    end
  end

  def create_kanjifont_tk80(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      if font['charset']
	tk_call('font', 'create', @@kanjifont, *hash_kv(font))
      else
	tk_call('font', 'create', @@kanjifont, 
		'-charset', 'jisx0208.1983', *hash_kv(font))
      end
    elsif font.kind_of? Array
      tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
      tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')

    elsif font.kind_of? TkFont
      tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)

    else
      tk_call('font', 'create', @@kanjifont, '-copy', font, 
	      '-charset', 'jisx0208.1983')

    end
  end

  def create_kanjifont_tk81(font)
    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      tk_call('font', 'create', @@kanjifont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.kanji_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
    end

    keys = {}
    actual_core(@@kanjifont).each{|key,val| keys[key] = val}
    begin
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    rescue
    end
  end

  def create_compoundfont_tk80(keys)
    @@compoundfont = @@id + 'c'
    if JAPANIZED_TK
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'create', @@compoundfont, 
	      '-compound', [@@latinfont, @@kanjifont], *hash_kv(keys))
    else
      tk_call('font', 'create', @@compoundfont)
      latinkeys = {}
      begin
	actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
      rescue
	latinkeys {}
      end
      if latinkeys != {}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
      end
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
  end

  def create_compoundfont_tk81(keys)
    @@compoundfont = @@id + 'c'
    tk_call('font', 'create', @@compoundfont)

    latinkeys = {}
    begin
      actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
    rescue
      latinkeys {}
    end
    if latinkeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
    end

    kanjikeys = {}
    begin
      actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
    rescue
      kanjikeys {}
    end
    if kanjikeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
    end

    @@fontslot = {'font'=>@@compoundfont}
    tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
  end

  def actual_core_tk4x(font, window=nil, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def actual_core_tk8x(font, window=nil, option=nil)
    if option == 'compound'
      ""
    elsif option
      if window
	tk_call('font', 'actual', font, "-#{option}")
      else
	tk_call('font', 'actual', font, "-displayof", window, "-#{option}")
      end
    else
      l = tk_split_simplelist(if window
			 	 tk_call('font', 'actual', font, 
					             "-displayof", window)
			      else
			  	 tk_call('font', 'actual', font)
			      end)
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def configure_core_tk4x(font, slot, value=None)
    ""
  end

  def configinfo_core_tk4x(font, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def configure_core_tk8x(font, slot, value=None)
    if slot.kind_of? Hash
      tk_call 'font', 'configure', font, *hash_kv(slot)
    else
      tk_call 'font', 'configure', font, "-#{slot}", value
    end
  end

  def configinfo_core_tk8x(font, option=nil)
    if option == 'compound'
      ""
    elsif option
      tk_call('font', 'configure', font, "-#{option}")
    else
      l = tk_split_simplelist(tk_call('font', 'configure', font))
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def delete_core_tk4x
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def delete_core_tk8x
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@compoundfont)
    rescue
    end
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def latin_replace_core_tk4x(ltn)
    create_latinfont_tk4x(ltn)
    @@compoundfont[0] = [@@latinfont] if JAPANIZED_TK
    @@fontslot['font'] = @@latinfont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'font'=>@@latinfont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-font', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('font'=>@@latinfont)
	    tk_call(w, 'configure', '-font', @@latinfont)
	  end
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def kanji_replace_core_tk4x(knj)
    return self unless JAPANIZED_TK

    create_kanjifont_tk4x(knj)
    @@compoundfont[1] = [@@kanjifont]
    @@fontslot['kanjifont'] = @@kanjifont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'kanjifont'=>@@kanjifont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-kanjifont', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('kanjifont'=>@@kanjifont)
	    tk_call(w, 'configure', '-kanjifont', @@kanjifont)
	  end
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def latin_replace_core_tk8x(ltn)
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    create_latinfont(ltn)
    self
  end

  def kanji_replace_core_tk80(knj)
    return self unless JAPANIZED_TK

    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    create_kanjifont(knj)
    self
  end

  def kanji_replace_core_tk81(knj)
    if font.kind_of? Hash
      tk_call('font', 'configure', @@compoundfont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.latin_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
    self
  end

  def measure_core_tk4x(window, text)
    0
  end

  def measure_core_tk8x(window, text)
    if window
      number(tk_call('font', 'measure', @@compoundfont, 
		     '-displayof', window, text))
    else
      number(tk_call('font', 'measure', @@compoundfont, text))
    end
  end

  def metrics_core_tk4x(font, window, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['ascent',[]], ['descent',[]], ['linespace',[]], ['fixed',[]] ])
    end
  end

  def metrics_core_tk8x(font, window, option=nil)
    if option
      if window
	number(tk_call('font', 'metrics', font, "-#{option}"))
      else
	number(tk_call('font', 'metrics', font, 
		       "-displayof", window, "-#{option}"))
      end
    else
      l = tk_split_list(if window
			  tk_call('font','metrics',font,"-displayof",window)
			else
			  tk_call('font','metrics',font)
			end)
      r = []
      while key=l.shift
	r.push [key[1..-1], l.shift.to_i]
      end
      r
    end
  end

  ###################################
  # private alias
  ###################################
  case (Tk::TK_VERSION)
  when /^4\.*/
    alias create_latinfont    create_latinfont_tk4x
    alias create_kanjifont    create_kanjifont_tk4x
    alias create_compoundfont create_compoundfont_tk4x
    alias actual_core         actual_core_tk4x
    alias configure_core      configure_core_tk4x
    alias configinfo_core     configinfo_core_tk4x
    alias delete_core         delete_core_tk4x
    alias latin_replace_core  latin_replace_core_tk4x
    alias kanji_replace_core  kanji_replace_core_tk4x
    alias measure_core        measure_core_tk4x
    alias metrics_core        metrics_core_tk4x

  when /^8\.0/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk80
    alias create_compoundfont create_compoundfont_tk80
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk80
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.1/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk81
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  end

  ###################################
  public
  ###################################
  def call_font_configure(path, *args)
    args += hash_kv(args.pop.update(@@fontslot))
    tk_call *args
    Tk_FontUseTBL[path] = self
    self
  end

  def used
    ret = []
    Tk_FontUseTBL.each{|key,value|
      if key.include?(';')
	win, tag = key.split(';')
	winobj = tk_tcl2ruby(win)
	if winobj.kind_of? TkText
	  ret.push([winobj, winobj.tagid2obj(tag)])
	elsif winobj.kind_of? TkCanvas
	  if (tagobj = TkcTag.id2obj(tag)).kind_of? TkcTag
	    ret.push([winobj, tagobj])
	  elsif (tagobj = TkcItem.id2obj(tag)).kind_of? TkcItem
	    ret.push([winobj, tagobj])
	  else
	    ret.push([winobj, tag])
	  end
	elsif winobj.kind_of? TkMenu
	  ret.push([winobj, tag])
	else
	  ret.push([win, tag])
	end
      else
	ret.push(tk_tcl2ruby(key)) if value == self
      end
    }
    ret
  end

  def id
    @@id
  end

  def to_eval
    font
  end

  def font
    @@compoundfont
  end

  def latin_font
    @@latinfont
  end

  def kanji_font
    @@kanjifont
  end

  def actual(option=nil)
    actual_core(@@compoundfont, nil, option)
  end

  def actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@compoundfont, window, option)
  end

  def latin_actual(option=nil)
    actual_core(@@latinfont, nil, option)
  end

  def latin_actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@latinfont, window, option)
  end

  def kanji_actual(option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      actual_core(@@kanjifont, nil, option)
    else
      actual_core_tk4x(nil, nil, option)
    end
  end

  def kanji_actual_displayof(window, option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      window = '.' unless window
      actual_core(@@kanjifont, window, option)
    else
      actual_core_tk4x(nil, window, option)
    end
  end

  def [](slot)
    configinfo slot
  end

  def []=(slot, val)
    configure slot, val
  end

  def configure(slot, value=None)
    configure_core(@@compoundfont, slot, value)
  end

  def configinfo(slot=nil)
    configinfo_core(@@compoundfont, slot)
  end

  def delete
    delete_core
  end

  def latin_configure(slot, value=None)
    if JAPANIZED_TK
      configure_core(@@latinfont, slot, value)
    else
      configure(slot, value)
    end
  end

  def latin_configinfo(slot=nil)
    if JAPANIZED_TK
      configinfo_core(@@latinfont, slot)
    else
      configure(slot, value)
    end
  end

  def kanji_configure(slot, value=None)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configure_core(@@kanjifont, slot, value)
    else
      #""
      configure(slot, value)
    end
  end

  def kanji_configinfo(slot=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configinfo_core(@@kanjifont, slot)
    else
      #[]
      configinfo(slot)
    end
  end

  def replace(ltn, knj)
    latin_replace(ltn)
    kanji_replace(knj)
    self
  end

  def latin_replace(ltn)
    latin_replace_core(ltn)
  end

  def kanji_replace(knj)
    kanji_replace_core(knj)
  end

  def measure(text)
    measure_core(nil, text)
  end

  def measure_displayof(window, text)
    window = '.' unless window
    measure_core(window, text)
  end

  def metrics(option=nil)
    metrics_core(@@compoundfont, nil, option)
  end

  def metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@compoundfont, window, option)
  end

  def latin_metrics(option=nil)
    metrics_core(@@latinfont, nil, option)
  end

  def latin_metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@latinfont, window, option)
  end

  def kanji_metrics(option=nil)
    if JAPANIZED_TK
      metrics_core(@@kanjifont, nil, option)
    else
      metrics_core_tk4x(nil, nil, option)
    end
  end

  def kanji_metrics_displayof(window, option=nil)
    if JAPANIZED_TK
      window = '.' unless window
      metrics_core(@@kanjifont, window, option)
    else
      metrics_core_tk4x(nil, window, option)
    end
  end

  ###################################
  # public alias
  ###################################
  alias ascii_font             latin_font
  alias create_asciifont       create_latinfont
  alias ascii_actual           latin_actual
  alias ascii_actual_displayof latin_actual_displayof
  alias ascii_configure        latin_configure
  alias ascii_configinfo       latin_configinfo
  alias ascii_replace          latin_replace
  alias ascii_metrics          latin_metrics

end

module TkTreatTagFont
  def font_configinfo
    @@parent.tagfont_configinfo(@@id)
  end
  alias font font_configinfo

  def font_configure(slot)
    @@parent.tagfont_configure(@@id, slot)
  end

  def latinfont_configure(ltn, keys=nil)
    @@parent.latintagfont_configure(@@id, ltn, keys)
  end
  alias asciifont_configure latinfont_configure

  def kanjifont_configure(knj, keys=nil)
    @@parent.kanjitagfont_configure(@@id, ltn, keys)
  end

  def font_copy(window, wintag=nil)
    @@parent.tagfont_copy(@@id, window, wintag)
  end

  def latinfont_copy(window, wintag=nil)
    @@parent.latintagfont_copy(@@id, window, wintag)
  end
  alias asciifont_copy latinfont_copy

  def kanjifont_copy(window, wintag=nil)
    @@parent.kanjitagfont_copy(@@id, window, wintag)
  end
end
@


1.1.1.1.2.1
log
@990324
@
text
@d156 2
a157 2
    [foundry, family, weight, slant, swidth, adstyle,
      pixels, points, resx, resy, space, avgWidth, charset, encoding]
d241 1
d244 1
d247 1
d312 1
d316 1
d400 3
a402 3
      [['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	['underline',[]], ['overstrike',[]], ['charset',[]], 
	['pointadjust',[]]]
d443 3
a445 3
      [['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	['underline',[]], ['overstrike',[]], ['charset',[]], 
	['pointadjust',[]]]
d586 1
a586 1
      tk_call('font', 'configure', @@compoundfont, *hash_kv(knj))
d589 4
a592 4
      if knj.kind_of? Array
	actual_core(array2tk_list(knj)).each{|key,val| keys[key] = val}
      elsif knj.kind_of? TkFont
	actual_core(knj.latin_font).each{|key,val| keys[key] = val}
d594 1
a594 1
	actual_core(knj).each{|key,val| keys[key] = val}
d619 1
a619 1
      [['ascent',[]], ['descent',[]], ['linespace',[]], ['fixed',[]]]
@


1.1.1.1.2.2
log
@990624
@
text
@a819 1
      configure('size'=>configinfo('size')) # to reflect new configuration
a843 1
    reset_pointadjust
a847 1
    reset_pointadjust
a891 11
  end

  def reset_pointadjust
    begin
      if /^8\.*/ === Tk::TK_VERSION  && JAPANIZED_TK
        configure('pointadjust' => latin_actual.assoc('size')[1].to_f / 
                                      kanji_actual.assoc('size')[1].to_f )
      end
    rescue
    end
    self
@


1.1.2.1
log
@1.1c8
@
text
@a0 939
#
#  tkfont.rb - the class to treat fonts on Ruby/Tk
#
#                               by  Hidetoshi NAGAI (nagai@@ai.kyutech.ac.jp)
#
require 'tk'

class TkFont
  include Tk
  extend TkCore

  Tk_FontID = [0]
  Tk_FontNameTBL = {}
  Tk_FontUseTBL = {}

  DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
  DEFAULT_KANJI_FONT_NAME = 'k14'.freeze

  ###################################
  # class methods
  ###################################
  def TkFont.families(window=nil)
    case (Tk::TK_VERSION)
    when /^4\.*/
      ['fixed']

    when /^8\.*/
      if window
	list(tk_call('font', 'families', '-displayof', window))
      else
	list(tk_call('font', 'families'))
      end
    end
  end

  def TkFont.names
    case (Tk::TK_VERSION)
    when /^4\.*/
      r = ['fixed']
      r += ['a14', 'k14'] if JAPANIZED_TK
      Tk_FontNameTBL.each_value{|obj| r.push(obj)}
      r | []

    when /^8\.*/
      tk_split_simplelist(tk_call('font', 'names'))

    end
  end

  def TkFont.create_copy(font)
    keys = {}
    font.configure.each{|key,value| keys[key] = value }
    new_font = TkFont.new(font.latin_font, font.kanji_font, keys)
  end

  def TkFont.get_obj(name)
    if name =~ /^(@@font[0-9]+)(|c|l|k)$/
      Tk_FontNameTBL[$1]
    else
      nil
    end
  end

  def TkFont.init_widget_font(path, *args)
    case (Tk::TK_VERSION)
    when /^4\.*/
      conf = tk_split_list(tk_call(*args))
      if font_inf = conf.assoc('-font')
	ltn = font_inf[4]
	ltn = nil if ltn == []
      else 
	#ltn = nil
	raise RuntimeError, "unknown option '-font'"
      end
      if font_inf = conf.assoc('-kanjifont')
	knj = font_inf[4]
	knj = nil if knj == []
      else
	knj = nil
      end
      TkFont.new(ltn, knj).call_font_configure(path, *(args + [{}]))

    when /^8\.*/
      conf = tk_split_list(tk_call(*args))
      unless font_inf = conf.assoc('-font')
	raise RuntimeError, "unknown option '-font'"
      end
      fnt = font_inf[4]
      if fnt == []
	TkFont.new(nil, nil).call_font_configure(path, *(args + [{}]))
      else
	begin
	  compound = Hash[*list(tk_call('font', 'configure', 
					fnt))].collect{|key,value|
	    [key[1..-1], value]
	  }.assoc('compound')[1]
	rescue
	  compound = []
	end
	if compound == []
	  TkFont.new(fnt, DEFAULT_KANJI_FONT_NAME) \
	  .call_font_configure(path, *(args + [{}]))
	else
	  TkFont.new(compound[0], compound[1]) \
	  .call_font_configure(path, *(args + [{}]))
	end
      end
    end
  end

  def TkFont.used_on(path=nil)
    if path
      Tk_FontUseTBL[path]
    else
      Tk_FontUseTBL.values | []
    end
  end

  ###################################
  private
  ###################################
  def initialize(ltn=nil, knj=nil, keys=nil)
    @@id = format("@@font%.4d", Tk_FontID[0])
    Tk_FontID[0] += 1
    Tk_FontNameTBL[@@id] = self

    ltn = DEFAULT_LATIN_FONT_NAME unless ltn
    create_latinfont(ltn)

    knj = DEFAULT_KANJI_FONT_NAME unless knj
    create_kanjifont(knj)

    create_compoundfont(keys)
  end

  def _get_font_info_from_hash(font)
    foundry  = (info = font['foundry'] .to_s)?  info: '*'
    family   = (info = font['family']  .to_s)?  info: '*'
    weight   = (info = font['weight']  .to_s)?  info: '*'
    slant    = (info = font['slant']   .to_s)?  info: '*'
    swidth   = (info = font['swidth']  .to_s)?  info: '*'
    adstyle  = (info = font['adstyle'] .to_s)?  info: '*'
    pixels   = (info = font['pixels']  .to_s)?  info: '*'
    points   = (info = font['points']  .to_s)?  info: '*'
    resx     = (info = font['resx']    .to_s)?  info: '*'
    resy     = (info = font['resy']    .to_s)?  info: '*'
    space    = (info = font['space']   .to_s)?  info: '*'
    avgWidth = (info = font['avgWidth'].to_s)?  info: '*'
    charset  = (info = font['charset'] .to_s)?  info: '*'
    encoding = (info = font['encoding'].to_s)?  info: '*'

    Array([foundry, family, weight, slant, swidth, adstyle, 
	    pixels, points, resx, resy, space, avgWidth, charset, encoding])
  end

  def create_latinfont_tk4x(font)
    if font.kind_of? Hash
      @@latinfont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@latinfont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@latinfont = font.latin_font

    else
      @@latinfont = font

    end
  end

  def create_kanjifont_tk4x(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

    if font.kind_of? Hash
      @@kanjifont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
	else
	  finfo['points'] = '13'
	end
      end
      font[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@kanjifont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@kanjifont = font.kanji_font

    else
      @@kanjifont = font

    end
  end

  def create_compoundfont_tk4x(keys)
    if JAPANIZED_TK
      @@compoundfont = [[@@latinfont], [@@kanjifont]]
      @@fontslot = {'font'=>@@latinfont, 'kanjifont'=>@@kanjifont}
    else
      @@compoundfont = @@latinfont
      @@fontslot = {'font'=>@@latinfont}
    end
  end

  def create_latinfont_tk8x(font)
    @@latinfont = @@id + 'l'

    if JAPANIZED_TK
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      elsif font.kind_of? Array
	tk_call('font', 'create', @@latinfont, '-copy', array2tk_list(font))
      elsif font.kind_of? TkFont
	tk_call('font', 'create', @@latinfont, '-copy', font.latin_font)
      else
	tk_call('font', 'create', @@latinfont, '-copy', font)
      end
    else
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      else
	keys = {}
	if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
	elsif font.kind_of? TkFont
	  actual_core(font.latin_font).each{|key,val| keys[key] = val}
	else
	  actual_core(font).each{|key,val| keys[key] = val}
	end
	tk_call('font', 'create', @@latinfont, *hash_kv(keys))
      end
    end
  end

  def create_kanjifont_tk80(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      if font['charset']
	tk_call('font', 'create', @@kanjifont, *hash_kv(font))
      else
	tk_call('font', 'create', @@kanjifont, 
		'-charset', 'jisx0208.1983', *hash_kv(font))
      end
    elsif font.kind_of? Array
      tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
      tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')

    elsif font.kind_of? TkFont
      tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)

    else
      tk_call('font', 'create', @@kanjifont, '-copy', font, 
	      '-charset', 'jisx0208.1983')

    end
  end

  def create_kanjifont_tk81(font)
    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      tk_call('font', 'create', @@kanjifont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.kanji_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
    end

    keys = {}
    actual_core(@@kanjifont).each{|key,val| keys[key] = val}
    begin
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    rescue
    end
  end

  def create_compoundfont_tk80(keys)
    @@compoundfont = @@id + 'c'
    if JAPANIZED_TK
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'create', @@compoundfont, 
	      '-compound', "#{@@latinfont} #{@@kanjifont}", *hash_kv(keys))
    else
      tk_call('font', 'create', @@compoundfont)
      latinkeys = {}
      begin
	actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
      rescue
	latinkeys {}
      end
      if latinkeys != {}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
      end
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
  end

  def create_compoundfont_tk81(keys)
    @@compoundfont = @@id + 'c'
    tk_call('font', 'create', @@compoundfont)

    latinkeys = {}
    begin
      actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
    rescue
      latinkeys {}
    end
    if latinkeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
    end

    kanjikeys = {}
    begin
      actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
    rescue
      kanjikeys {}
    end
    if kanjikeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
    end

    @@fontslot = {'font'=>@@compoundfont}
    tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
  end

  def actual_core_tk4x(font, window=nil, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def actual_core_tk8x(font, window=nil, option=nil)
    if option == 'compound'
      ""
    elsif option
      if window
	tk_call('font', 'actual', font, "-#{option}")
      else
	tk_call('font', 'actual', font, "-displayof", window, "-#{option}")
      end
    else
      l = tk_split_list(if window
			  tk_call('font', 'actual', font, "-displayof", window)
			else
			  tk_call('font', 'actual', font)
			end)
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def configure_core_tk4x(font, slot, value=None)
    ""
  end

  def configinfo_core_tk4x(font, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def configure_core_tk8x(font, slot, value=None)
    if slot.kind_of? Hash
      tk_call 'font', 'configure', font, *hash_kv(slot)
    else
      tk_call 'font', 'configure', font, "-#{slot}", value
    end
  end

  def configinfo_core_tk8x(font, option=nil)
    if option == 'compound'
      ""
    elsif option
      tk_call('font', 'configure', font, "-#{option}")
    else
      l = tk_split_list(tk_call('font', 'configure', font))
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def delete_core_tk4x
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def delete_core_tk8x
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@compoundfont)
    rescue
    end
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def latin_replace_core_tk4x(ltn)
    create_latinfont_tk4x(ltn)
    @@compoundfont[0] = [@@latinfont] if JAPANIZED_TK
    @@fontslot['font'] = @@latinfont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'font'=>@@latinfont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-font', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('font'=>@@latinfont)
	    tk_call(w, 'configure', '-font', @@latinfont)
	  end
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def kanji_replace_core_tk4x(knj)
    return self unless JAPANIZED_TK

    create_kanjifont_tk4x(knj)
    @@compoundfont[1] = [@@kanjifont]
    @@fontslot['kanjifont'] = @@kanjifont
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
	begin
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
#	    winobj.tagfont_configure(tag, {'kanjifont'=>@@kanjifont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-kanjifont', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
	  else
#	    tk_tcl2ruby(w).font_configure('kanjifont'=>@@kanjifont)
	    tk_call(w, 'configure', '-kanjifont', @@kanjifont)
	  end
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def latin_replace_core_tk8x(ltn)
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    create_latinfont(ltn)
    self
  end

  def kanji_replace_core_tk80(knj)
    return self unless JAPANIZED_TK

    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    create_kanjifont(knj)
    self
  end

  def kanji_replace_core_tk81(knj)
    if font.kind_of? Hash
      tk_call('font', 'configure', @@compoundfont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.latin_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
    self
  end

  def measure_core_tk4x(window, text)
    0
  end

  def measure_core_tk8x(window, text)
    if window
      number(tk_call('font', 'measure', @@compoundfont, 
		     '-displayof', window, text))
    else
      number(tk_call('font', 'measure', @@compoundfont, text))
    end
  end

  def metrics_core_tk4x(font, window, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['ascent',[]], ['descent',[]], ['linespace',[]], ['fixed',[]] ])
    end
  end

  def metrics_core_tk8x(font, window, option=nil)
    if option
      if window
	number(tk_call('font', 'metrics', font, "-#{option}"))
      else
	number(tk_call('font', 'metrics', font, 
		       "-displayof", window, "-#{option}"))
      end
    else
      l = tk_split_list(if window
			  tk_call('font','metrics',font,"-displayof",window)
			else
			  tk_call('font','metrics',font)
			end)
      r = []
      while key=l.shift
	r.push [key[1..-1], l.shift.to_i]
      end
      r
    end
  end

  ###################################
  # private alias
  ###################################
  case (Tk::TK_VERSION)
  when /^4\.*/
    alias create_latinfont    create_latinfont_tk4x
    alias create_kanjifont    create_kanjifont_tk4x
    alias create_compoundfont create_compoundfont_tk4x
    alias actual_core         actual_core_tk4x
    alias configure_core      configure_core_tk4x
    alias configinfo_core     configinfo_core_tk4x
    alias delete_core         delete_core_tk4x
    alias latin_replace_core  latin_replace_core_tk4x
    alias kanji_replace_core  kanji_replace_core_tk4x
    alias measure_core        measure_core_tk4x
    alias metrics_core        metrics_core_tk4x

  when /^8\.0/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk80
    alias create_compoundfont create_compoundfont_tk80
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk80
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.1/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias delete_core         delete_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk81
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  end

  ###################################
  public
  ###################################
  def call_font_configure(path, *args)
    args += hash_kv(args.pop.update(@@fontslot))
    tk_call *args
    Tk_FontUseTBL[path] = self
    self
  end

  def used
    ret = []
    Tk_FontUseTBL.each{|key,value|
      if key.include?(';')
	win, tag = key.split(';')
	winobj = tk_tcl2ruby(win)
	if winobj.kind_of? TkText
	  ret.push([winobj, winobj.tagid2obj(tag)])
	elsif winobj.kind_of? TkCanvas
	  if (tagobj = TkcTag.id2obj(tag)).kind_of? TkcTag
	    ret.push([winobj, tagobj])
	  elsif (tagobj = TkcItem.id2obj(tag)).kind_of? TkcItem
	    ret.push([winobj, tagobj])
	  else
	    ret.push([winobj, tag])
	  end
	elsif winobj.kind_of? TkMenu
	  ret.push([winobj, tag])
	else
	  ret.push([win, tag])
	end
      else
	ret.push(tk_tcl2ruby(key)) if value == self
      end
    }
    ret
  end

  def id
    @@id
  end

  def to_eval
    font
  end

  def font
    @@compoundfont
  end

  def latin_font
    @@latinfont
  end

  def kanji_font
    @@kanjifont
  end

  def actual(option=nil)
    actual_core(@@compoundfont, nil, option)
  end

  def actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@compoundfont, window, option)
  end

  def latin_actual(option=nil)
    actual_core(@@latinfont, nil, option)
  end

  def latin_actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@latinfont, window, option)
  end

  def kanji_actual(option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      actual_core(@@kanjifont, nil, option)
    else
      actual_core_tk4x(nil, nil, option)
    end
  end

  def kanji_actual_displayof(window, option=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      window = '.' unless window
      actual_core(@@kanjifont, window, option)
    else
      actual_core_tk4x(nil, window, option)
    end
  end

  def [](slot)
    configinfo slot
  end

  def []=(slot, val)
    configure slot, val
  end

  def configure(slot, value=None)
    configure_core(@@compoundfont, slot, value)
  end

  def configinfo(slot=nil)
    configinfo_core(@@compoundfont, slot)
  end

  def delete
    delete_core
  end

  def latin_configure(slot, value=None)
    if JAPANIZED_TK
      configure_core(@@latinfont, slot, value)
    else
      configure(slot, value)
    end
  end

  def latin_configinfo(slot=nil)
    if JAPANIZED_TK
      configinfo_core(@@latinfont, slot)
    else
      configure(slot, value)
    end
  end

  def kanji_configure(slot, value=None)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configure_core(@@kanjifont, slot, value)
    else
      #""
      configure(slot, value)
    end
  end

  def kanji_configinfo(slot=nil)
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configinfo_core(@@kanjifont, slot)
    else
      #[]
      configinfo(slot)
    end
  end

  def replace(ltn, knj)
    latin_replace(ltn)
    kanji_replace(knj)
    self
  end

  def latin_replace(ltn)
    latin_replace_core(ltn)
  end

  def kanji_replace(knj)
    kanji_replace_core(knj)
  end

  def measure(text)
    measure_core(nil, text)
  end

  def measure_displayof(window, text)
    window = '.' unless window
    measure_core(window, text)
  end

  def metrics(option=nil)
    metrics_core(@@compoundfont, nil, option)
  end

  def metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@compoundfont, window, option)
  end

  def latin_metrics(option=nil)
    metrics_core(@@latinfont, nil, option)
  end

  def latin_metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@latinfont, window, option)
  end

  def kanji_metrics(option=nil)
    if JAPANIZED_TK
      metrics_core(@@kanjifont, nil, option)
    else
      metrics_core_tk4x(nil, nil, option)
    end
  end

  def kanji_metrics_displayof(window, option=nil)
    if JAPANIZED_TK
      window = '.' unless window
      metrics_core(@@kanjifont, window, option)
    else
      metrics_core_tk4x(nil, window, option)
    end
  end

  ###################################
  # public alias
  ###################################
  alias ascii_font             latin_font
  alias create_asciifont       create_latinfont
  alias ascii_actual           latin_actual
  alias ascii_actual_displayof latin_actual_displayof
  alias ascii_configure        latin_configure
  alias ascii_configinfo       latin_configinfo
  alias ascii_replace          latin_replace
  alias ascii_metrics          latin_metrics

end

module TkTreatTagFont
  def font_configinfo
    @@parent.tagfont_configinfo(@@id)
  end
  alias font font_configinfo

  def font_configure(slot)
    @@parent.tagfont_configure(@@id, slot)
  end

  def latinfont_configure(ltn, keys=nil)
    @@parent.latintagfont_configure(@@id, ltn, keys)
  end
  alias asciifont_configure latinfont_configure

  def kanjifont_configure(knj, keys=nil)
    @@parent.kanjitagfont_configure(@@id, ltn, keys)
  end

  def font_copy(window, wintag=nil)
    @@parent.tagfont_copy(@@id, window, wintag)
  end

  def latinfont_copy(window, wintag=nil)
    @@parent.latintagfont_copy(@@id, window, wintag)
  end
  alias asciifont_copy latinfont_copy

  def kanjifont_copy(window, wintag=nil)
    @@parent.kanjitagfont_copy(@@id, window, wintag)
  end
end
@


1.1.2.2
log
@1.1c final (hopefully)
@
text
@d29 1
a29 1
	tk_split_simplelist(tk_call('font', 'families', '-displayof', window))
d31 1
a31 1
	tk_split_simplelist(tk_call('font', 'families'))
d67 1
a67 3
      conf = tk_split_simplelist(tk_call(*args)).
	find_all{|prop| prop[0..5]=='-font ' || prop[0..10]=='-kanjifont '}.
	collect{|prop| tk_split_simplelist(prop)}
d84 2
a85 4
      font_prop = tk_split_simplelist(tk_call(*args)).find{|prop| 
	prop[0..5] == '-font '
      }
      unless font_prop
d88 1
a88 1
      fnt = tk_split_simplelist(font_prop)[4]
d346 1
a346 1
	      '-compound', [@@latinfont, @@kanjifont], *hash_kv(keys))
d412 5
a416 6
      l = tk_split_simplelist(if window
			 	 tk_call('font', 'actual', font, 
					             "-displayof", window)
			      else
			  	 tk_call('font', 'actual', font)
			      end)
d458 1
a458 1
      l = tk_split_simplelist(tk_call('font', 'configure', font))
@


1.1.2.3
log
@1.2.2 PR1
@
text
@d93 1
a93 1
      if fnt == ""
@
