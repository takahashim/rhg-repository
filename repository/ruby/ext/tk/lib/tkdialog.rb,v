head	1.3;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.2
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2002.06.04.07.03.33;	author nagai;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.52;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.11.17.09.12.44;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.34;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.17.09.12.44;	author matz;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* tkfont.rb:  Fix bugs on TkFont.init_widget_font for Tk8.x.

* tkafter.rb: Add self to 1st argument of interval- and loop-proc
    TkAfter#current_interval returns an interval (sleep) time value
    TkAfter#current_args returns an array of arguments
    TkAfter#return_value returns a return value of last loop-proc
      e.g.
         TkAfter.new(
           proc{|obj| 500 - obj.current_interval}, 10,
           [proc{|obj| p obj.current_args}, 'proc', 1],
           proc{|obj| p obj.current_args; ['return', 2]},
           [proc{|obj|
              p obj.return_value
              p ['proc', obj.current_args[0].call(obj.return_value[1],
                                                  obj.current_args[1])]},
            proc{|*args| args[0] + args[1]}, 1],
           proc{p ['proc', 4]} ).start(100)

* tk*.rb: Allow to use Symbols for parameters.
    Allow new notation of constructor (also allow old notation).
      e.g.
        TkFrame.new('classname'=>'User'){|base|
          pack
          f = TkFrame.new(base, :classname=>'ButtonFrame').pack
          TkButton.new(
             :parent     => f,
             :text       => 'Quit',
             :command    => proc{exit}
          ).pack(
             :fill => :x,
             :pady => 2
          )
        }

* tkcanvas.rb: (TkcItem) Add 'coords' parameter to the canvas item
    constructor (for new notation of constructor).
      e.g.
        c = TkCanvas.new.pack
        l = TkcLine.new(c, :coords=>[[0,0], [100,100]])

* tcltklib.c: New 'mainloop' and 'mainloop_watchdog'.
    The priority of their event-loop can be controlled.
    They accept an optional argument.
    If it false, they don't exit although the root widget is destroyed.
    This function is sometimes useful, if it is used with 'restart'.
    'mainloop' can't treat Thread#join/value in a callback routine.
    (e.g. TkButton.new(:command=>proc{p Thread.new{button.invoke}.value}) )
    'mainloop_watchdog' can treat them, but watchdog thread is always running
    (so, a little heavier than 'mainloop').
    If the purpose of using Thread#join/value is to do something under some
    safe-level, please use Proc object.
    (e.g. :command=>proc{$SAFE=1;proc{$SAFE=2;button.invoke}.call;p $SAFE})

* tk.rb: Support functions of new 'mainloop' and 'mainloop_watchdog'.

* tk.rb: (Tk.restart) Add 'app-name' paramater and 'use' parameter.
    'app-name' specifies the name and the resource class of the
    application. If 'app-name' is specified to 'xxx', the application
    class on the resource database is set to 'Xxx' and the application
    name is changed by the same rule of Tk.appname method.  'use'
    specifies the main window for embedding the root widget instead of
    generating a new window.

* tk.rb: Add new parameter 'widgetname' to the widget constructor to
    support effective use of Resource Database.  For example, the
    resource 'Xxx*quit.text: QUIT' can set the text of the button
    generated by the following code.
      e.g.
        Tk.restart('Xxx')
        TkButton.new(nil, 'widgetname'=>'quit', 'command'=>proc{exit}).pack
        Tk.mainloop

* tk.rb: TkOption::get always returns a tainted string.
    Add TkOption::new_proc_class.
    It generates a class to import procedures defined on the resource
    database. For example, there is a following resource file.
      ----< resource-test >------------
      *CMD.foo: {|*args| p [$SAFE, :foo, args]}
      *CMD.XXX.bar: {|*args| p [$SAFE, :bar, args]}
      *Button.command: ruby {p self; p $SAFE; TkOption::CMD::XXX.bar(1,2,3)}
      ---------------------------------
    The following code is a sample of use of the resource file.
      e.g.
        require 'tk'
        TkOption.readfile 'resource-test'
        p TkOption.new_proc_class(:CMD, [:foo], 1)
        p TkOption.new_proc_class(:XXX, [:bar], 2, false, TkOption::CMD)
        TkButton.new(:text=>'test').pack
        Tk.mainloop
@
text
@require "tk"

class TkDialog < TkWindow
  extend Tk

  # initialize tk_dialog
  def initialize(keys = nil)
    super()
    @@var = TkVariable.new
    id = @@var.id

    @@title   = title

    @@message = message
    @@message_config = message_config

    @@bitmap  = bitmap
    @@bitmap_config = message_config

    @@default_button = default_button

    @@buttons = buttons
    @@button_configs = proc{|num| button_configs num}

    if keys.kind_of? Hash
      keys = _symbolkey2str(keys)
      @@title   = keys['title'] if keys['title']
      @@message = keys['message'] if keys['message']
      @@bitmap  = keys['bitmap'] if keys['bitmap']
      @@default_button = keys['default'] if keys['default']
      @@buttons = keys['buttons'] if keys['buttons']

      @@command = keys['prev_command']

      @@message_config = keys['message_config'] if keys['message_config']
      @@bitmap_config  = keys['bitmap_config']  if keys['bitmap_config']
      @@button_configs = keys['button_configs'] if keys['button_configs']
    end

    if @@title.include? ?\s
      @@title = '{' + @@title + '}'
    end

    @@buttons = tk_split_list(@@buttons) if @@buttons.kind_of? String
    @@buttons = @@buttons.collect{|s|
      if s.kind_of? Array
	s = s.join(' ')
      end
      if s.include? ?\s
	'{' + s + '}'
      else
	s
      end
    }

    config = ""
    if @@message_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@message_config).join(' '))
    end
    if @@bitmap_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@bitmap_config).join(' '))
    end
    if @@button_configs.kind_of? Proc
      @@buttons.each_index{|i|
	if (c = @@button_configs.call(i)).kind_of? Hash
	  config << format("%s.button%s configure %s\n", 
			   @@path, i, hash_kv(c).join(' '))
	end
      }
    end
    config = 'after idle {' + config + '};' if config != ""

    if @@command.kind_of? Proc
      @@command.call(self)
    end

    INTERP._eval('eval {global '+id+';'+config+
		 'set '+id+' [tk_dialog '+ 
		 @@path+" "+@@title+" {#{@@message}} "+@@bitmap+" "+
		 String(@@default_button)+" "+@@buttons.join(' ')+']}')
  end
  def value
    return @@var.value.to_i
  end
  ######################################################
  #                                                    #
  # these methods must be overridden for each dialog   #
  #                                                    #
  ######################################################
  def title
    return "DIALOG"
  end
  def message
    return "MESSAGE"
  end
  def message_config
    return nil
  end
  def bitmap
    return "info"
  end
  def bitmap_config
    return nil
  end
  def default_button
    return 0
  end
  def buttons
    #return "BUTTON1 BUTTON2"
    return ["BUTTON1", "BUTTON2"]
  end
  def button_configs(num)
    return nil
  end
end

#
# dialog for warning
#
class TkWarning < TkDialog
  def initialize(mes)
    @@mes = mes
    super()
  end
  def message
    return @@mes
  end
  def title
    return "WARNING";
  end
  def bitmap
    return "warning";
  end
  def default_button
    return 0;
  end
  def buttons
    return "OK";
  end
end
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d26 1
@


1.1
log
@file tkdialog.rb was initially added on branch v1_1r.
@
text
@d1 141
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 141
require "tk"

class TkDialog < TkWindow
  extend Tk

  # initialize tk_dialog
  def initialize(keys = nil)
    super()
    @@var = TkVariable.new
    id = @@var.id

    @@title   = title

    @@message = message
    @@message_config = message_config

    @@bitmap  = bitmap
    @@bitmap_config = message_config

    @@default_button = default_button

    @@buttons = buttons
    @@button_configs = proc{|num| button_configs num}

    if keys.kind_of? Hash
      @@title   = keys['title'] if keys['title']
      @@message = keys['message'] if keys['message']
      @@bitmap  = keys['bitmap'] if keys['bitmap']
      @@default_button = keys['default'] if keys['default']
      @@buttons = keys['buttons'] if keys['buttons']

      @@command = keys['prev_command']

      @@message_config = keys['message_config'] if keys['message_config']
      @@bitmap_config  = keys['bitmap_config']  if keys['bitmap_config']
      @@button_configs = keys['button_configs'] if keys['button_configs']
    end

    if @@title.include? ?\s
      @@title = '{' + @@title + '}'
    end

    @@buttons = tk_split_list(@@buttons) if @@buttons.kind_of? String
    @@buttons = @@buttons.collect{|s|
      if s.kind_of? Array
	s = s.join(' ')
      end
      if s.include? ?\s
	'{' + s + '}'
      else
	s
      end
    }

    config = ""
    if @@message_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@message_config).join(' '))
    end
    if @@bitmap_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@bitmap_config).join(' '))
    end
    if @@button_configs.kind_of? Proc
      @@buttons.each_index{|i|
	if (c = @@button_configs.call(i)).kind_of? Hash
	  config << format("%s.button%s configure %s\n", 
			   @@path, i, hash_kv(c).join(' '))
	end
      }
    end
    config = 'after idle {' + config + '};' if config != ""

    if @@command.kind_of? Proc
      @@command.call(self)
    end

    INTERP._eval('eval {global '+id+';'+config+
		 'set '+id+' [tk_dialog '+ 
		 @@path+" "+@@title+" {#{@@message}} "+@@bitmap+" "+
		 String(@@default_button)+" "+@@buttons.join(' ')+']}')
  end
  def value
    return @@var.value.to_i
  end
  ######################################################
  #                                                    #
  # these methods must be overridden for each dialog   #
  #                                                    #
  ######################################################
  def title
    return "DIALOG"
  end
  def message
    return "MESSAGE"
  end
  def message_config
    return nil
  end
  def bitmap
    return "info"
  end
  def bitmap_config
    return nil
  end
  def default_button
    return 0
  end
  def buttons
    #return "BUTTON1 BUTTON2"
    return ["BUTTON1", "BUTTON2"]
  end
  def button_configs(num)
    return nil
  end
end

#
# dialog for warning
#
class TkWarning < TkDialog
  def initialize(mes)
    @@mes = mes
    super()
  end
  def message
    return @@mes
  end
  def title
    return "WARNING";
  end
  def bitmap
    return "warning";
  end
  def default_button
    return 0;
  end
  def buttons
    return "OK";
  end
end
@


1.1.2.1
log
@1.1c8
@
text
@a0 141
require "tk"

class TkDialog < TkWindow
  extend Tk

  # initialize tk_dialog
  def initialize(keys = nil)
    super()
    @@var = TkVariable.new
    id = @@var.id

    @@title   = title

    @@message = message
    @@message_config = message_config

    @@bitmap  = bitmap
    @@bitmap_config = message_config

    @@default_button = default_button

    @@buttons = buttons
    @@button_configs = proc{|num| button_configs num}

    if keys.kind_of? Hash
      @@title   = keys['title'] if keys['title']
      @@message = keys['message'] if keys['message']
      @@bitmap  = keys['bitmap'] if keys['bitmap']
      @@default_button = keys['default'] if keys['default']
      @@buttons = keys['buttons'] if keys['buttons']

      @@command = keys['prev_command']

      @@message_config = keys['message_config'] if keys['message_config']
      @@bitmap_config  = keys['bitmap_config']  if keys['bitmap_config']
      @@button_configs = keys['button_configs'] if keys['button_configs']
    end

    if @@title.include? ?\s
      @@title = '{' + @@title + '}'
    end

    @@buttons = tk_split_list(@@buttons) if @@buttons.kind_of? String
    @@buttons = @@buttons.collect{|s|
      if s.kind_of? Array
	s = s.join(' ')
      end
      if s.include? ?\s
	'{' + s + '}'
      else
	s
      end
    }

    config = ""
    if @@message_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@message_config).join(' '))
    end
    if @@bitmap_config.kind_of? Hash
      config << format("%s.msg configure %s\n", 
		       @@path, hash_kv(@@bitmap_config).join(' '))
    end
    if @@button_configs.kind_of? Proc
      @@buttons.each_index{|i|
	if (c = @@button_configs.call(i)).kind_of? Hash
	  config << format("%s.button%s configure %s\n", 
			   @@path, i, hash_kv(c).join(' '))
	end
      }
    end
    config = 'after idle {' + config + '};' if config != ""

    if @@command.kind_of? Proc
      @@command.call(self)
    end

    INTERP._eval('eval {global '+id+';'+config+
		 'set '+id+' [tk_dialog '+ 
		 @@path+" "+@@title+" {#{@@message}} "+@@bitmap+" "+
		 String(@@default_button)+" "+@@buttons.join(' ')+']}')
  end
  def value
    return @@var.value.to_i
  end
  ######################################################
  #                                                    #
  # these methods must be overridden for each dialog   #
  #                                                    #
  ######################################################
  def title
    return "DIALOG"
  end
  def message
    return "MESSAGE"
  end
  def message_config
    return nil
  end
  def bitmap
    return "info"
  end
  def bitmap_config
    return nil
  end
  def default_button
    return 0
  end
  def buttons
    #return "BUTTON1 BUTTON2"
    return ["BUTTON1", "BUTTON2"]
  end
  def button_configs(num)
    return nil
  end
end

#
# dialog for warning
#
class TkWarning < TkDialog
  def initialize(mes)
    @@mes = mes
    super()
  end
  def message
    return @@mes
  end
  def title
    return "WARNING";
  end
  def bitmap
    return "warning";
  end
  def default_button
    return 0;
  end
  def buttons
    return "OK";
  end
end
@
