head	1.3;
access;
symbols
	v1_6_4:1.2
	v1_7_1:1.2
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.2.1
	v1_3_6_repack:1.1.2.1
	v1_3_6:1.1.2.1
	v1_3_5:1.1.2.1
	v1_3_4_990625:1.1.2.1
	v1_3_4_990624:1.1.2.1
	v1_3_4_990611:1.1.2.1
	v1_3_4_990531:1.1.2.1
	v1_3_3_990518:1.1.2.1
	v1_3_3_990513:1.1.2.1
	v1_3_3_990507:1.1.2.1
	ruby_1_3:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2001.07.19.05.42.07;	author knu;	state dead;
branches;
next	1.2;

1.2
date	99.08.13.05.37.50;	author matz;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.05.07.08.24.36;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	99.05.07.08.24.36;	author matz;	state Exp;
branches;
next	;

1.2.4.1
date	2001.07.19.05.44.25;	author knu;	state dead;
branches;
next	;


desc
@@


1.3
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@pty 拡張モジュール version 0.3 by A.ito

1. はじめに

この拡張モジュールは，仮想tty (pty) を通して適当なコマンドを
実行する機能を ruby に提供します．

2. インストール

次のようにしてインストールしてください．

(1)  ruby extconf.rb

    を実行すると Makefile が生成されます．

(2) make; make install を実行してください．

3. 何ができるか

この拡張モジュールは，PTY というモジュールを定義します．その中
には，次のようなモジュール関数が含まれています．

   getpty(command)
   spawn(command)

      この関数は，仮想ttyを確保し，指定されたコマンドをその仮想tty
      の向こうで実行し，配列を返します．戻り値は3つの要素からなる
      配列です．最初の要素は仮想ttyから読み出すためのIOオブジェクト，
      2番目は書きこむためのIOオブジェクト，3番目は子プロセスのプロ
      セスIDです．この関数がイテレータとして呼ばれた場合，これらの
      要素はブロックパラメータとして渡され，関数自体はnilを返します．

      この関数によって作られたサブプロセスが動いている間，子プロセス
      の状態を監視するために SIGCHLD シグナルを捕捉します．子プロセス
      が終了したり停止した場合には，例外が発生します．この間，すべての
      SIGCHLD が PTY モジュールのシグナルハンドラに捕捉されるので，
      サブプロセスを生成する他の関数(system() とか IO.popen()など)を
      使うと，予期しない例外が発生することがあります．これを防ぐため
      には，下記のprotect_signal()を参照してください．

      この関数がブロックパラメータ付きで呼ばれた場合には，そのブロック
      の中でのみ SIGCHLD が捕捉されます．したがって，ブロックパラメータ
      として渡されたIOオブジェクトを，ブロックの外に持ち出して使うの
      は勧められません．


   protect_signal

      この関数はイテレータです．ここで指定されたブロックの中では，
      子プロセスが終了しても例外を発生しません．この関数を使うことで，
      PTYの子プロセスが動いている間でも，system()や IO.popen()などの
      関数を安全に使うことができます．例えば，

        PTY.spawn("command_foo") do |r,w|
          ...
          ...
          PTY.protect_signal do
            system "some other commands"
          end
          ...
        end

      このような記述により，"some other commands" が終了したときに
      例外が発生するのを防げます．

    reset_signal

      PTY の子プロセスが動いていても，そのプロセスの終了時に例外が発生
      しないようにします．

4. 利用について

伊藤彰則が著作権を保有します．

ソースプログラムまたはドキュメントに元の著作権表示が改変されずに
表示されている場合に限り，誰でも，このソフトウェアを無償かつ著作
権者に無断で利用・配布・改変できます．利用目的は限定されていませ
ん．

このプログラムの利用・配布その他このプログラムに関係する行為によ
って生じたいかなる損害に対しても，作者は一切責任を負いません．

5. バグ報告等

バグレポートは歓迎します．

	aito@@ei5sun.yz.yamagata-u.ac.jp

まで電子メールでバグレポートをお送りください．
@


1.2
log
@remove marshal/gtk/kconv
@
text
@@


1.2.4.1
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@@


1.1
log
@file README.jp was initially added on branch ruby_1_3.
@
text
@d1 89
@


1.1.2.1
log
@990507
@
text
@a0 89
pty 拡張モジュール version 0.3 by A.ito

1. はじめに

この拡張モジュールは，仮想tty (pty) を通して適当なコマンドを
実行する機能を ruby に提供します．

2. インストール

次のようにしてインストールしてください．

(1)  ruby extconf.rb

    を実行すると Makefile が生成されます．

(2) make; make install を実行してください．

3. 何ができるか

この拡張モジュールは，PTY というモジュールを定義します．その中
には，次のようなモジュール関数が含まれています．

   getpty(command)
   spawn(command)

      この関数は，仮想ttyを確保し，指定されたコマンドをその仮想tty
      の向こうで実行し，配列を返します．戻り値は3つの要素からなる
      配列です．最初の要素は仮想ttyから読み出すためのIOオブジェクト，
      2番目は書きこむためのIOオブジェクト，3番目は子プロセスのプロ
      セスIDです．この関数がイテレータとして呼ばれた場合，これらの
      要素はブロックパラメータとして渡され，関数自体はnilを返します．

      この関数によって作られたサブプロセスが動いている間，子プロセス
      の状態を監視するために SIGCHLD シグナルを捕捉します．子プロセス
      が終了したり停止した場合には，例外が発生します．この間，すべての
      SIGCHLD が PTY モジュールのシグナルハンドラに捕捉されるので，
      サブプロセスを生成する他の関数(system() とか IO.popen()など)を
      使うと，予期しない例外が発生することがあります．これを防ぐため
      には，下記のprotect_signal()を参照してください．

      この関数がブロックパラメータ付きで呼ばれた場合には，そのブロック
      の中でのみ SIGCHLD が捕捉されます．したがって，ブロックパラメータ
      として渡されたIOオブジェクトを，ブロックの外に持ち出して使うの
      は勧められません．


   protect_signal

      この関数はイテレータです．ここで指定されたブロックの中では，
      子プロセスが終了しても例外を発生しません．この関数を使うことで，
      PTYの子プロセスが動いている間でも，system()や IO.popen()などの
      関数を安全に使うことができます．例えば，

        PTY.spawn("command_foo") do |r,w|
          ...
          ...
          PTY.protect_signal do
            system "some other commands"
          end
          ...
        end

      このような記述により，"some other commands" が終了したときに
      例外が発生するのを防げます．

    reset_signal

      PTY の子プロセスが動いていても，そのプロセスの終了時に例外が発生
      しないようにします．

4. 利用について

伊藤彰則が著作権を保有します．

ソースプログラムまたはドキュメントに元の著作権表示が改変されずに
表示されている場合に限り，誰でも，このソフトウェアを無償かつ著作
権者に無断で利用・配布・改変できます．利用目的は限定されていませ
ん．

このプログラムの利用・配布その他このプログラムに関係する行為によ
って生じたいかなる損害に対しても，作者は一切責任を負いません．

5. バグ報告等

バグレポートは歓迎します．

	aito@@ei5sun.yz.yamagata-u.ac.jp

まで電子メールでバグレポートをお送りください．
@

