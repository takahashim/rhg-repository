head	1.2;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.2
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.2.1
	v1_3_6_repack:1.1.2.1
	v1_3_6:1.1.2.1
	v1_3_5:1.1.2.1
	v1_3_4_990625:1.1.2.1
	v1_3_4_990624:1.1.2.1
	v1_3_4_990611:1.1.2.1
	v1_3_4_990531:1.1.2.1
	v1_3_3_990518:1.1.2.1
	v1_3_3_990513:1.1.2.1
	v1_3_3_990507:1.1.2.1
	ruby_1_3:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	99.08.13.05.37.50;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	99.05.07.08.24.35;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	99.05.07.08.24.35;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove marshal/gtk/kconv
@
text
@pty extension version 0.3 by A.ito

1. Introduction

This extension module adds ruby a functionality to execute an 
arbitrary command through pseudo tty (pty).

2. Install

Follow the instruction below.

(1) Execute

      ruby extconf.rb

    then Makefile is generated.

(3) Do make; make install.

3. What you can do

This extension module defines a module named PTY, which contains
following module fungtions:

   getpty(command)
   spawn(command)

      This function reserves a pty, executes command over the pty 
      and returns an array. The return value is an array with three
      elements. The first element in the array is for reading and the 
      second for writing. The third element is the process ID of the
      child process. If this function is called with an iterator block,
      the array is passed to the block as block parameters, and the
      function itself returns nil.

      While the process spawned by this function is active, SIGCHLD
      is captured to handle the change of the child process. When the
      child process is suspended or finished, an exception is raised.
      As all SIGCHLD signal is captured and processed by PTY module,
      you can't use other function or method which spawns subprosesses
      (including signal() and IO.popen()) while the PTY subprocesses
      are active. Otherwise, unexpected exception will occur. To avoid
      this problem, see protect_signal() below.

      If this function is called with an iterator block, SIGCHLD signal
      is captured only within the block. Therefore, it is risky to use
      File objects for PTY subprocess outside the iterator block.


   protect_signal

      This function takes an iterator block. Within the iterator block,
      no exception is raised even if any subprocess is terminated.
      This function is used to enable functions like system() or IO.popen()
      while PTY subprocess is active. For example,

        PTY.spawn("command_foo") do |r,w|
          ...
          ...
          PTY.protect_signal do
            system "some other commands"
          end
          ...
        end

      disables to send exception when "some other commands" is 
      terminated. 

    reset_signal

      Disables to handle SIGCHLD while PTY subprocess is active.


4. License

(C) Copyright 1998 by Akinori Ito.

This software may be redistributed freely for this purpose, in full 
or in part, provided that this entire copyright notice is included 
on any copies of this software and applications and derivations thereof.

This software is provided on an "as is" basis, without warranty of any
kind, either expressed or implied, as to any matter including, but not
limited to warranty of fitness of purpose, or merchantability, or
results obtained from use of this software.

5. Bug report

Please feel free to send E-mail to

   aito@@ei5sun.yz.yamagata-u.ac.jp

for any bug report, opinion, contribution, etc.
@


1.1
log
@file README was initially added on branch ruby_1_3.
@
text
@d1 93
@


1.1.2.1
log
@990507
@
text
@a0 93
pty extension version 0.3 by A.ito

1. Introduction

This extension module adds ruby a functionality to execute an 
arbitrary command through pseudo tty (pty).

2. Install

Follow the instruction below.

(1) Execute

      ruby extconf.rb

    then Makefile is generated.

(3) Do make; make install.

3. What you can do

This extension module defines a module named PTY, which contains
following module fungtions:

   getpty(command)
   spawn(command)

      This function reserves a pty, executes command over the pty 
      and returns an array. The return value is an array with three
      elements. The first element in the array is for reading and the 
      second for writing. The third element is the process ID of the
      child process. If this function is called with an iterator block,
      the array is passed to the block as block parameters, and the
      function itself returns nil.

      While the process spawned by this function is active, SIGCHLD
      is captured to handle the change of the child process. When the
      child process is suspended or finished, an exception is raised.
      As all SIGCHLD signal is captured and processed by PTY module,
      you can't use other function or method which spawns subprosesses
      (including signal() and IO.popen()) while the PTY subprocesses
      are active. Otherwise, unexpected exception will occur. To avoid
      this problem, see protect_signal() below.

      If this function is called with an iterator block, SIGCHLD signal
      is captured only within the block. Therefore, it is risky to use
      File objects for PTY subprocess outside the iterator block.


   protect_signal

      This function takes an iterator block. Within the iterator block,
      no exception is raised even if any subprocess is terminated.
      This function is used to enable functions like system() or IO.popen()
      while PTY subprocess is active. For example,

        PTY.spawn("command_foo") do |r,w|
          ...
          ...
          PTY.protect_signal do
            system "some other commands"
          end
          ...
        end

      disables to send exception when "some other commands" is 
      terminated. 

    reset_signal

      Disables to handle SIGCHLD while PTY subprocess is active.


4. License

(C) Copyright 1998 by Akinori Ito.

This software may be redistributed freely for this purpose, in full 
or in part, provided that this entire copyright notice is included 
on any copies of this software and applications and derivations thereof.

This software is provided on an "as is" basis, without warranty of any
kind, either expressed or implied, as to any matter including, but not
limited to warranty of fitness of purpose, or merchantability, or
results obtained from use of this software.

5. Bug report

Please feel free to send E-mail to

   aito@@ei5sun.yz.yamagata-u.ac.jp

for any bug report, opinion, contribution, etc.
@

