head	1.1;
branch	1.1.1;
access;
symbols
	v1_6_7:1.1.1.1
	v1_6_6:1.1.1.1
	v1_6_5:1.1.1.1
	v1_6_4:1.1.1.1
	v1_7_1:1.1.1.1
	v1_6_4_preview4:1.1.1.1
	v1_6_4_preview3:1.1.1.1
	v1_6_4_preview2:1.1.1.1
	v1_6_4_preview1:1.1.1.1
	v1_6_3:1.1.1.1
	ruby_m17n:1.1.1.1.0.12
	ruby_1_6:1.1.1.1.0.10
	v1_6_2:1.1.1.1
	v1_6_1:1.1.1.1
	v1_6_0:1.1.1.1
	v1_4_6:1.1.1.1
	v1_4_5:1.1.1.1
	v1_4_4:1.1.1.1
	ruby_1_4_3:1.1.1.1
	ruby1_4_3:1.1.1.1
	v1_4_3:1.1.1.1
	v1_5_0:1.1.1.1
	ruby_1_4_3_pre1:1.1.1.1
	ruby_1_4:1.1.1.1.0.8
	v1_4_2:1.1.1.1
	v1_4_1:1.1.1.1
	v1_4_0:1.1.1.1
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.1.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.1.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.1.1
	v1_2_4:1.1.1.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.6
	v1_2_2:1.1.1.1
	RUBY_1_3:1.1.1.1
	v1_2_2_pr1:1.1.1.1
	v1_2_1repack:1.1.1.1
	v1_2_1:1.1.1.1
	v1_2_stable:1.1.1.1
	v1_1d1:1.1.1.1
	v1_1d0:1.1.1.1
	v1_1c9_1:1.1.1.1
	v1_1c9:1.1.1.1
	v1_1c8:1.1.1.1
	v1_1c7:1.1.1.1
	v1_1c6:1.1.1.1
	v1_1d-start:1.1.1.1
	v1_1c5:1.1.1.1
	v1_1dev:1.1.1.1.0.4
	v1_1c4:1.1.1.1
	v1_1c3:1.1.1.1
	v1_1c2:1.1.1.1
	v1_1c1:1.1.1.1
	v1_1c0:1.1.1.1
	v1_1b9_31:1.1.1.1
	v1_1b9_30:1.1.1.1
	v1_1b9_28:1.1.1.1
	v1_1b9_27:1.1.1.1
	v1_1b9_26:1.1.1.1
	r1_1b9_25:1.1.1.1
	r1_1b9_24:1.1.1.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.2
	v1_1:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.1
date	98.01.16.12.19.16;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.19.16;	author matz;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@(tof)
	tcltk ライブラリ
	tcltklib ライブラリ
		Sep. 19, 1997	Y. Shigehiro

以下, 「tcl/tk」という表記は, tclsh や wish を実現している, 一般でいう
ところの tcl/tk を指します. 「tcltk ライブラリ」, 「tcltklib ライブラ
リ」という表記は, 本パッケージに含まれる ruby 用のライブラリを指します.

[ファイルについて]

README.euc : このファイル(注意, 特徴, インストールの方法).
MANUAL.euc : マニュアル.

lib/, ext/ : ライブラリの実体.

sample/ : マニュアル代わりのサンプルプログラム.
sample/sample0.rb : tcltklib ライブラリのテスト.
sample/sample1.rb : tcltk ライブラリのテスト.
    tcl/tk (wish) でできそうなことを一通り書いてみました.
sample/sample2.rb : tcltk ライブラリのサンプル.
    maeda shugo (shugo@@po.aianet.ne.jp) 氏による
    (`rb.tk' で書かれていた) ruby のサンプルプログラム
	http://www.aianet.or.jp/~shugo/ruby/othello.rb.gz
    を tcltk ライブラリを使うように, 機械的に変更してみました.

demo/ : 100 本の線を 100 回描くデモプログラム.
    最初に空ループの時間を測定し, 続いて実際に線を引く時間を測定します.
    tcl/tk は(再)描画のときに backing store を使わずに律義に 10000 本(?)
    線を引くので, (再)描画を始めると, マシンがかなり重くなります.
demo/lines0.tcl : wish 用のスクリプト.
demo/lines1.rb : `tk.rb' 用のスクリプト.
demo/lines2.rb : tcltk ライブラリ用のスクリプト.

[注意]

コンパイル/実行には, tcl/tk の C ライブラリが必要です.

このライブラリは,

	ruby-1.0-970701, ruby-1.0-970911, ruby-1.0-970919
	FreeBSD 2.2.2-RELEASE
	およびそのパッケージ jp-tcl-7.6.tgz, jp-tk-4.2.tgz

で作成/動作確認しました. 他の環境では動作するかどうかわかりません.

TclTkLib.mainloop を実行中に Control-C が効かないのは不便なので, ruby 
のソースを参考に, #include "sig.h" して trap_immediate を操作していま
すが, ruby の README.EXT にも書いてないのに, こんなことをして良いのか
どうかわかりません.

-d オプションでデバッグ情報を表示させるために, ruby のソースを参考に,
debug という大域変数を参照していますが, ruby の README.EXT にも書いて
ないのに, こんなことをして良いのかどうかわかりません.

extconf.rb は書きましたが, (いろいろな意味で)これで良いのか良く分かり
ません.

[特徴]

ruby から tcl/tk ライブラリを利用できます.

tcl/tk インタプリタのスクリプトは, 機械的に tcltk ライブラリ用の ruby 
スクリプトに変換できます.

(`tk.rb' との違い)

1. tcl/tk インタプリタのスクリプトが, どのように, tcltk ライブラリ用の 
   ruby スクリプトに変換されるかが理解できれば, マニュアル類が無いに等
   しい `tk.rb' とは異なり

	tcl/tk のマニュアルやオンラインドキュメントを用いて

   効率良くプログラミングを行うことができます.
   記述方法がわからない, コマンドに与えるパラメータがわからない...
     - Canvas.new { ... } と, なぜイテレータブロックを書けるの??
     - Canvas の bbox は数値のリストを返すのに, xview は文字列を返すの??
   と, いちいち, ライブラリのソースを追いかける必要はありません.

2. 個々の機能(オプション)を個別処理によりサポートしており, そのためサ
   ポートしていない機能は使うことができない(本当は使えないこともないの
   ですが) `tk.rb' とは異なり, tcl/tk インタプリタで可能なことは

	ほとんど

   ruby からも実行できます. 現在, ruby から実行できないことが確認され
   ているのは,

	bind コマンドでスクリプトを追加する構文
	「bind tag sequence +script」
                            ^

   のみです.
     - `. configure -width' をしようとして, `Tk.root.height()' と書い
      たのに, `undefined method `height'' と怒られてしまった. tk.rb を
      読んでみて, ガーン. できないのか...
   ということはありません.

3. wish プロセスを起動しプロセス間通信で wish を利用する `tk.rb' とは
   異なり, tcl/tk の C ライブラリをリンクし

	より高速に (といっても, 思った程は速くないですが)

   処理を行います.

4. `tk.rb' ほど, 高水準なインターフェースを備えていないため, tcl/tk イ
   ンタプリタの生成等

	何から何まで自分で記述

   しなければなりません(その代わり, tcl/tk ライブラリの仕様通り,
   tcl/tk インタプリタを複数生成することもできますが).
   インターフェースは(おそらく) ruby の思想に沿ったものではありません. 
   また, スクリプトの記述は

	ダサダサ

   です. スクリプトは, 一見, 読みづらいものとなります. が, 書く人にとっ
   ては, それほど煩わしいものではないと思います.

[インストールの方法]

0. ruby のソースファイル(ruby-1.0-なんたら.tgz)を展開しておきます.

1. ruby-1.0-なんたら/ext に ext/tcltklib をコピーします.
	cp -r ext/tcltklib ???/ruby-1.0-なんたら/ext/

2. ruby のインストール法に従い make 等をします.

3. ruby のライブラリ置場に lib/* をコピーします.
	cp lib/* /usr/local/lib/ruby/

(eof)
@


1.1.1.1
log
@
@
text
@@
