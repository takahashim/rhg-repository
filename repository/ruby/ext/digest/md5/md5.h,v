head	1.2;
access;
symbols
	v1_6_7:1.1.2.2
	v1_6_6:1.1.2.1
	v1_6_5:1.1.2.1
	ruby_1_6:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2002.02.24.08.20.22;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.13.20.06.14;	author knu;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.08.16.07.35.42;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.02.24.08.20.50;	author knu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge from rough.
- Avoid namespace pollution. (MD5_* -> rb_Digest_MD5_*, etc.)
@
text
@/*
  Copyright (C) 1999 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@@aladdin.com

 */
/*
  Independent implementation of MD5 (RFC 1321).

  This code implements the MD5 Algorithm defined in RFC 1321.
  It is derived directly from the text of the RFC and not from the
  reference implementation.

  The original and principal author of md5.h is L. Peter Deutsch
  <ghost@@aladdin.com>.  Other authors are noted in the change history
  that follows (in reverse chronological order):

  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
	added conditionalization for C++ compilation from Martin
	Purschke <purschke@@bnl.gov>.
  1999-05-03 lpd Original version.
 */

/* $OrigId: md5.h,v 1.2 2001/03/26 08:57:14 matz Exp $ */
/* $RoughId: md5.h,v 1.3 2002/02/24 08:14:31 knu Exp $ */
/* $Id: md5.h,v 1.1 2001/07/13 20:06:14 knu Exp $ */

#ifndef MD5_INCLUDED
#  define MD5_INCLUDED

#include "defs.h"

/*
 * This code has some adaptations for the Ghostscript environment, but it
 * will compile and run correctly in any environment with 8-bit chars and
 * 32-bit ints.  Specifically, it assumes that if the following are
 * defined, they have the same meaning as in Ghostscript: P1, P2, P3.
 */

/* Define the state of the MD5 Algorithm. */
typedef struct md5_state_s {
    uint32_t count[2];	/* message length in bits, lsw first */
    uint32_t state[4];	/* digest buffer */
    uint8_t buffer[64];	/* accumulate block */
} MD5_CTX;

#ifdef RUBY
#define MD5_Init	rb_Digest_MD5_Init
#define MD5_Update	rb_Digest_MD5_Update
#define MD5_Final	rb_Digest_MD5_Final
#define MD5_End		rb_Digest_MD5_End
#define MD5_Equal	rb_Digest_MD5_Equal
#endif

void	MD5_Init _((MD5_CTX *pms));
void	MD5_Update _((MD5_CTX *pms, const uint8_t *data, size_t nbytes));
void	MD5_Final _((uint8_t *digest, MD5_CTX *pms));
void	MD5_End _((MD5_CTX *pctx, uint8_t *hexdigest));
int	MD5_Equal _((MD5_CTX *pctx1, MD5_CTX *pctx2));

#define MD5_BLOCK_LENGTH		64
#define MD5_DIGEST_LENGTH		16
#define MD5_DIGEST_STRING_LENGTH	(MD5_DIGEST_LENGTH * 2 + 1)

#endif /* MD5_INCLUDED */
@


1.1
log
@Import the "digest" module and the submodules, from the Rough Ruby
project.

  ext/digest:
    This module provides the module Digest and the abstract class
    Digest::Base.

  ext/digest/md5 (which obsoletes ext/md5):
    This module provides the class Digest::MD5 which implements the
    MD5 Message-Digest Algorithm.

  ext/digest/rmd160:
    This module provides the class Digest::RMD160 which implements the
    RIPEMD-160 cryptographic hash function.

  ext/digest/sha1 (which obsoletes ext/sha1):
    This module provides the class Digest::SHA1 which implements the
    SHA-1 Secure Hash Algorithm.

  ext/digest/sha2:
    This module provides the classes Digest::SHA256, Digest::SHA384
    and Digest::SHA512 which implement the SHA-256, SHA-384 and
    SHA-512 Secure Hash Algorithms, respectively.

  lib/md5.rb, lib/sha1.rb:
    These files are provided for backward compatibility.

All these classes have the common API, which previously ext/md5 and
ext/sha1 modules provided.  While the new API keeps 100% backward
compatibility, it has been enriched with several utility methods.

Read digest.txt for further details.
@
text
@d43 2
a44 2
/* $RoughId: md5.h,v 1.2 2001/07/13 19:48:41 knu Exp $ */
/* $Id$ */
d64 8
@


1.1.2.1
log
@* LEGAL, ext/Setup*, ext/digest/*: Merge from 1.7: Import digest
  modules.

* ext/md5/*: Move to ext/digest/md5.
@
text
@d44 1
a44 1
/* $Id: md5.h,v 1.1 2001/07/13 20:06:14 knu Exp $ */
@


1.1.2.2
log
@Merge from rough.
- Avoid namespace pollution. (MD5_* -> rb_Digest_MD5_*, etc.)
@
text
@d43 2
a44 2
/* $RoughId: md5.h,v 1.3 2002/02/24 08:14:31 knu Exp $ */
/* $Id: md5.h,v 1.1.2.1 2001/08/16 07:35:42 knu Exp $ */
a63 8

#ifdef RUBY
#define MD5_Init	rb_Digest_MD5_Init
#define MD5_Update	rb_Digest_MD5_Update
#define MD5_Final	rb_Digest_MD5_Final
#define MD5_End		rb_Digest_MD5_End
#define MD5_Equal	rb_Digest_MD5_Equal
#endif
@


