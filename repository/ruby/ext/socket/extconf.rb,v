head	1.26;
access;
symbols
	v1_6_7:1.17.2.2
	v1_6_6:1.17.2.2
	v1_6_5:1.17.2.1
	v1_6_4:1.17.2.1
	v1_7_1:1.18
	v1_6_4_preview4:1.17.2.1
	v1_6_4_preview3:1.17.2.1
	v1_6_4_preview2:1.17
	v1_6_4_preview1:1.17
	v1_6_3:1.17
	ruby_m17n:1.17.0.4
	ruby_1_6:1.17.0.2
	v1_6_2:1.17
	v1_6_1:1.16
	v1_6_0:1.15
	v1_4_6:1.5.2.7
	v1_4_5:1.5.2.7
	v1_4_4:1.5.2.3
	ruby_1_4_3:1.5.2.1
	ruby1_4_3:1.5.2.1
	v1_4_3:1.5.2.1
	v1_5_0:1.7
	ruby_1_4_3_pre1:1.5.2.1
	ruby_1_4:1.5.0.2
	v1_4_2:1.3
	v1_4_1:1.3
	v1_4_0:1.2
	v1_3_7:1.1.1.3.2.11
	v1_3_6_repack:1.1.1.3.2.11
	v1_3_6:1.1.1.3.2.11
	v1_3_5:1.1.1.3.2.10
	v1_2_6repack:1.1.1.2.2.5
	v1_3_4_990625:1.1.1.3.2.10
	v1_3_4_990624:1.1.1.3.2.10
	v1_2_6:1.1.1.2.2.5
	v1_3_4_990611:1.1.1.3.2.10
	v1_3_4_990531:1.1.1.3.2.9
	v1_3_3_990518:1.1.1.3.2.8
	v1_3_3_990513:1.1.1.3.2.8
	v1_3_3_990507:1.1.1.3.2.7
	v1_2_5:1.1.1.2.2.5
	v1_2_4:1.1.1.2.2.5
	v1_3_1_990225:1.1.1.3
	v1_3_1_990224:1.1.1.3
	v1_3_1_990215:1.1.1.3
	v1_3_1_990212:1.1.1.3
	v1_3_1_990210:1.1.1.3
	v1_3_1_:1.1.1.3
	v1_3_1_990209:1.1.1.3
	v1_3_1_990205:1.1.1.3
	v1_3_1_990203:1.1.1.3
	v1_3_1_990201:1.1.1.3
	v1_3_1"_990201:1.1.1.3
	v1_3_1_990128:1.1.1.3
	v1_3_1_990127:1.1.1.3
	v1_3_1_990126:1.1.1.3
	ruby_1_3:1.1.1.3.0.2
	v1_2_2:1.1.1.2.2.5
	RUBY_1_3:1.1.1.3
	v1_2_2_pr1:1.1.1.2.2.5
	v1_2_1repack:1.1.1.2.2.5
	v1_2_1:1.1.1.2.2.5
	v1_2_stable:1.1.1.2.2.5
	v1_1d1:1.1.1.2.2.5.2.1
	v1_1d0:1.1.1.2.2.5.2.1
	v1_1c9_1:1.1.1.2.2.5
	v1_1c9:1.1.1.2.2.5
	v1_1c8:1.1.1.2.2.5
	v1_1c7:1.1.1.2.2.5
	v1_1c6:1.1.1.2.2.5
	v1_1d-start:1.1.1.2.2.5.2.1
	v1_1c5:1.1.1.2.2.5
	v1_1dev:1.1.1.2.2.5.0.2
	v1_1c4:1.1.1.2.2.5
	v1_1c3:1.1.1.2.2.5
	v1_1c2:1.1.1.2.2.4
	v1_1c1:1.1.1.2.2.3
	v1_1c0:1.1.1.2.2.3
	v1_1b9_31:1.1.1.2.2.3
	v1_1b9_30:1.1.1.2.2.3
	v1_1b9_28:1.1.1.2.2.3
	v1_1b9_27:1.1.1.2.2.3
	v1_1b9_26:1.1.1.2.2.3
	r1_1b9_25:1.1.1.2.2.3
	r1_1b9_24:1.1.1.2.2.3
	v1_1b9_23:1.1.1.2.2.3
	v1_1b9_22:1.1.1.2.2.3
	v1_1b9_20:1.1.1.2.2.2
	v1_1b9_18:1.1.1.2.2.2
	v1_1b9_16:1.1.1.2.2.2
	v1_1b9_15:1.1.1.2.2.2
	v1_1b9_13:1.1.1.2.2.1
	v1_1b9_12:1.1.1.2.2.1
	v1_1b9_11:1.1.1.2.2.1
	v1_1b9_08:1.1.1.2.2.1
	v1_1b9_07:1.1.1.2.2.1
	r1_1b9:1.1.1.2
	v1_1b8:1.1.1.2
	v1_1b7:1.1.1.2
	v1_1b6:1.1.1.2
	v1_1r:1.1.1.2.0.2
	v1_1:1.1.1.2
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.26
date	2002.09.08.10.00.43;	author eban;	state Exp;
branches;
next	1.25;

1.25
date	2002.06.11.01.27.47;	author H_Konishi;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.04.09.33.39;	author eban;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.04.07.34.17;	author matz;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.19.07.29.59;	author eban;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.08.23.46.59;	author akr;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.28.21.30.53;	author akr;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.03.07.08.17;	author eban;	state Exp;
branches;
next	1.18;

1.18
date	2001.02.13.05.09.06;	author matz;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.22.03.22.20;	author matz;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2000.09.12.13.56.52;	author eban;	state Exp;
branches;
next	1.15;

1.15
date	2000.07.10.04.49.18;	author matz;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.30.04.24.06;	author matz;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.18.04.32.11;	author matz;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.13.16.12.24;	author eban;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.09.04.53.10;	author matz;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.01.09.41.35;	author matz;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.23.05.23.11;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.01.03.12.16;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	99.10.20.07.10.23;	author matz;	state Exp;
branches;
next	1.6;

1.6
date	99.10.18.09.03.01;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	99.10.12.04.53.35;	author matz;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.09.22.04.30.10;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	99.08.24.08.21.54;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.50;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.01.16.12.19.16;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	1.1.1.3;

1.1.1.3
date	99.01.20.04.59.33;	author matz;	state Exp;
branches
	1.1.1.3.2.1;
next	;

1.1.1.3.2.1
date	99.04.09.17.57.43;	author matz;	state Exp;
branches;
next	1.1.1.3.2.2;

1.1.1.3.2.2
date	99.04.30.06.19.20;	author matz;	state Exp;
branches;
next	1.1.1.3.2.3;

1.1.1.3.2.3
date	99.04.30.07.55.47;	author matz;	state Exp;
branches;
next	1.1.1.3.2.4;

1.1.1.3.2.4
date	99.04.30.08.19.59;	author matz;	state Exp;
branches;
next	1.1.1.3.2.5;

1.1.1.3.2.5
date	99.04.30.15.16.44;	author matz;	state Exp;
branches;
next	1.1.1.3.2.6;

1.1.1.3.2.6
date	99.05.06.08.31.48;	author matz;	state Exp;
branches;
next	1.1.1.3.2.7;

1.1.1.3.2.7
date	99.05.07.08.24.36;	author matz;	state Exp;
branches;
next	1.1.1.3.2.8;

1.1.1.3.2.8
date	99.05.10.08.22.49;	author matz;	state Exp;
branches;
next	1.1.1.3.2.9;

1.1.1.3.2.9
date	99.05.25.08.26.19;	author matz;	state Exp;
branches;
next	1.1.1.3.2.10;

1.1.1.3.2.10
date	99.06.09.09.21.34;	author matz;	state Exp;
branches;
next	1.1.1.3.2.11;

1.1.1.3.2.11
date	99.07.28.09.26.52;	author matz;	state Exp;
branches;
next	1.1.1.3.2.12;

1.1.1.3.2.12
date	99.08.11.07.24.09;	author matz;	state Exp;
branches;
next	;

1.1.1.2.2.1
date	98.03.30.09.32.54;	author matz;	state Exp;
branches;
next	1.1.1.2.2.2;

1.1.1.2.2.2
date	98.04.22.08.57.41;	author matz;	state Exp;
branches;
next	1.1.1.2.2.3;

1.1.1.2.2.3
date	98.05.18.09.12.26;	author matz;	state Exp;
branches;
next	1.1.1.2.2.4;

1.1.1.2.2.4
date	98.08.10.05.41.21;	author matz;	state Exp;
branches;
next	1.1.1.2.2.5;

1.1.1.2.2.5
date	98.08.11.04.29.02;	author matz;	state Exp;
branches
	1.1.1.2.2.5.2.1;
next	;

1.1.1.2.2.5.2.1
date	98.09.08.07.09.38;	author matz;	state Exp;
branches;
next	;

1.5.2.1
date	99.10.29.09.25.48;	author matz;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2000.01.24.03.46.10;	author matz;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2000.03.02.03.51.48;	author matz;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2000.04.14.14.35.45;	author matz;	state Exp;
branches;
next	1.5.2.5;

1.5.2.5
date	2000.05.09.04.50.19;	author matz;	state Exp;
branches;
next	1.5.2.6;

1.5.2.6
date	2000.05.30.04.21.29;	author matz;	state Exp;
branches;
next	1.5.2.7;

1.5.2.7
date	2000.06.01.07.02.08;	author matz;	state Exp;
branches;
next	;

1.17.2.1
date	2001.05.19.15.30.35;	author knu;	state Exp;
branches;
next	1.17.2.2;

1.17.2.2
date	2001.12.03.07.09.01;	author eban;	state Exp;
branches;
next	1.17.2.3;

1.17.2.3
date	2002.04.19.08.08.13;	author eban;	state Exp;
branches;
next	1.17.2.4;

1.17.2.4
date	2002.04.21.08.54.24;	author eban;	state Exp;
branches;
next	;


desc
@@


1.26
log
@* lib/mkmf.rb (have_struct_member): moved from ext/socket/extconf.rb.
* ext/socket/extconf.rb: use macro_defined? instead of egrep_cpp.
* ext/etc/extconf.rb: use have_struct_member.
* ext/etc/etc.c: add prefix HAVE_ST_ to PW_ macros.
@
text
@require 'mkmf'

$CPPFLAGS += " -Dss_family=__ss_family -Dss_len=__ss_len"

case RUBY_PLATFORM
when /bccwin32/
  test_func = "WSACleanup"
  have_library("ws2_32", "WSACleanup")
  have_func("closesocket")
when /mswin32|mingw/
  test_func = "WSACleanup"
  have_library("wsock32", "WSACleanup")
  have_func("closesocket")
when /cygwin/
  test_func = "socket"
when /beos/
  test_func = "socket"
  have_library("net", "socket")
  have_func("closesocket")
when /i386-os2_emx/
  test_func = "socket"
  have_library("socket", "socket")
else
  test_func = "socket"
  have_library("nsl", "t_open")
  have_library("socket", "socket")
end

$ipv6 = false
default_ipv6 = /cygwin/ !~ RUBY_PLATFORM
if enable_config("ipv6", default_ipv6)
  if try_link(<<EOF)
#include <sys/types.h>
#include <sys/socket.h>
main()
{
  socket(AF_INET6, SOCK_STREAM, 0);
}
EOF
    $CFLAGS+=" -DENABLE_IPV6"
    $ipv6 = true
  end
end

$ipv6type = nil
$ipv6lib = nil
$ipv6libdir = nil
$ipv6trylibc = nil
if $ipv6
  if macro_defined?("IPV6_INRIA_VERSION", <<EOF)
#include <netinet/in.h>
EOF
    $ipv6type = "inria"
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif macro_defined?("__KAME__", <<EOF)
#include <netinet/in.h>
EOF
    $ipv6type = "kame"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $ipv6trylibc=true
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif File.directory? "/usr/inet6"
    $ipv6type = "linux"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/inet6/lib"
    $CFLAGS="-DINET6 -I/usr/inet6/include "+$CFLAGS
  elsif macro_defined?("_TOSHIBA_INET6", <<EOF)
#include <sys/param.h>
EOF
    $ipv6type = "toshiba"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif macro_defined?("__V6D__", <<EOF)
#include </usr/local/v6/include/sys/v6config.h>
EOF
    $ipv6type = "v6d"
    $ipv6lib="v6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 -I/usr/local/v6/include "+$CFLAGS
  elsif macro_defined?("_ZETA_MINAMI_INET6", <<EOF)
#include <sys/param.h>
EOF
    $ipv6type = "zeta"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 "+$CFLAGS
  else
    $ipv6lib=with_config("ipv6-lib", nil)
    $ipv6libdir=with_config("ipv6-libdir", nil)
    $CFLAGS="-DINET6 "+$CFLAGS
  end
  
  if $ipv6lib
    if File.directory? $ipv6libdir and File.exist? "#{$ipv6libdir}/lib#{$ipv6lib}.a"
      $LOCAL_LIBS = " -L#$ipv6libdir -l#$ipv6lib"
    elsif !$ipv6trylibc
      print <<EOS

Fatal: no #$ipv6lib library found.  cannot continue.
You need to fetch lib#{$ipv6lib}.a from appropriate
ipv6 kit and compile beforehand.
EOS
      exit
    end
  end
end

  if try_link(<<EOF)
#ifdef _WIN32
# include <windows.h>
# include <winsock.h>
#else
# include <sys/types.h>
# include <netdb.h>
# include <string.h>
# include <sys/socket.h>
# include <netinet/in.h>
#endif
int
main()
{
   struct sockaddr_in sin;

   sin.sin_len;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SIN_LEN "+$CFLAGS
end

  if try_link(<<EOF)
#ifdef _WIN32
# include <windows.h>
# include <winsock.h>
#else
# include <sys/types.h>
# include <netdb.h>
# include <string.h>
# include <sys/socket.h>
#endif
int
main()
{
   struct sockaddr_storage ss;

   ss.ss_family;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SOCKADDR_STORAGE "+$CFLAGS
end

  if try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   struct sockaddr sa;

   sa.sa_len;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SA_LEN "+$CFLAGS
end

have_header("netinet/tcp.h") if not /cygwin/ =~ RUBY_PLATFORM # for cygwin 1.1.5
have_header("netinet/udp.h")

have_struct_member('struct msghdr', 'msg_control', header=['sys/types.h', 'sys/socket.h'])
have_struct_member('struct msghdr', 'msg_accrights', header=['sys/types.h', 'sys/socket.h'])

$getaddr_info_ok = false
if !enable_config("wide-getaddrinfo", false) and try_run(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef AF_LOCAL
#define AF_LOCAL AF_UNIX
#endif

main()
{
  int passive, gaierr, inet4 = 0, inet6 = 0;
  struct addrinfo hints, *ai, *aitop;
  char straddr[INET6_ADDRSTRLEN], strport[16];

  for (passive = 0; passive <= 1; passive++) {
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_flags = passive ? AI_PASSIVE : 0;
    hints.ai_socktype = SOCK_STREAM;
    if ((gaierr = getaddrinfo(NULL, "54321", &hints, &aitop)) != 0) {
      (void)gai_strerror(gaierr);
      goto bad;
    }
    for (ai = aitop; ai; ai = ai->ai_next) {
      if (ai->ai_family == AF_LOCAL) continue;
      if (ai->ai_addr == NULL ||
          ai->ai_addrlen == 0 ||
          getnameinfo(ai->ai_addr, ai->ai_addrlen,
                      straddr, sizeof(straddr), strport, sizeof(strport),
                      NI_NUMERICHOST|NI_NUMERICSERV) != 0) {
        goto bad;
      }
      if (strcmp(strport, "54321") != 0) {
        goto bad;
      }
      switch (ai->ai_family) {
      case AF_INET:
        if (passive) {
          if (strcmp(straddr, "0.0.0.0") != 0) {
            goto bad;
          }
        } else {
          if (strcmp(straddr, "127.0.0.1") != 0) {
            goto bad;
          }
        }
        inet4++;
        break;
      case AF_INET6:
        if (passive) {
          if (strcmp(straddr, "::") != 0) {
            goto bad;
          }
        } else {
          if (strcmp(straddr, "::1") != 0) {
            goto bad;
          }
        }
        inet6++;
        break;
      case AF_UNSPEC:
        goto bad;
        break;
      default:
        /* another family support? */
        break;
      }
    }
  }

  if (!(inet4 == 0 || inet4 == 2))
    goto bad;
  if (!(inet6 == 0 || inet6 == 2))
    goto bad;

  if (aitop)
    freeaddrinfo(aitop);
  exit(0);

 bad:
  if (aitop)
    freeaddrinfo(aitop);
  exit(1);
}
EOF
  $getaddr_info_ok = true
end
if $ipv6 and not $getaddr_info_ok
      print <<EOS

Fatal: --enable-ipv6 is specified, and your OS seems to support IPv6 feature.
But your getaddrinfo() and getnameinfo() are appeared to be broken.  Sorry,
you cannot compile IPv6 socket classes with broken these functions.
You can try --enable-wide-getaddrinfo.
EOS
  exit
end
      
case with_config("lookup-order-hack", "UNSPEC")
when "INET"
  $CFLAGS="-DLOOKUP_ORDER_HACK_INET "+$CFLAGS
when "INET6"
  $CFLAGS="-DLOOKUP_ORDER_HACK_INET6 "+$CFLAGS
when "UNSPEC"
  # nothing special
else
  print <<EOS

Fatal: invalid value for --with-lookup-order-hack (expected INET, INET6 or UNSPEC)
EOS
  exit
end

$objs = ["socket.#{$OBJEXT}"]
    
if $getaddr_info_ok and have_func("getaddrinfo") and have_func("getnameinfo")
  have_getaddrinfo = true
end

if have_getaddrinfo
  $CFLAGS="-DHAVE_GETADDRINFO "+$CFLAGS
else
  $CFLAGS="-I. "+$CFLAGS
  $objs += ["getaddrinfo.#{$OBJEXT}"]
  $objs += ["getnameinfo.#{$OBJEXT}"]
  have_func("inet_ntop") or have_func("inet_ntoa")
  have_func("inet_pton") or have_func("inet_aton")
  have_func("getservbyport")
  have_header("arpa/inet.h")
  have_header("arpa/nameser.h")
  have_header("resolv.h")
end

if !try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   socklen_t len;
   return 0;
}
EOF
  $CFLAGS="-Dsocklen_t=int "+$CFLAGS
end

have_header("sys/un.h")
have_header("sys/uio.h")

if have_func(test_func)
  have_func("hsterror")
  unless have_func("gethostname")
    have_func("uname")
  end
  if ENV["SOCKS_SERVER"] or enable_config("socks", false)
    if have_library("socks5", "SOCKSinit")
      $CFLAGS+=" -DSOCKS5 -DSOCKS"
    elsif have_library("socks", "Rconnect")
      $CFLAGS+=" -DSOCKS"
    end
  end
  create_makefile("socket")
end
@


1.25
log
@new platform [bccwin32] merged.
@
text
@a4 36
def have_struct_member(type, member, header=nil)
  #printf "checking for %s.%s... ", type, member
  #STDOUT.flush

  libs = $libs
  src = 
    if /mswin32|mingw/ =~ RUBY_PLATFORM
      r = <<"SRC"
#include <windows.h>
#include <winsock.h>
SRC
    else
      ""
    end
  unless header.nil?
    header = [header] unless header.kind_of? Array
    header.each {|h|
      src << <<"SRC"
#include <#{h}>
SRC
    }
  end
  src << <<"SRC"
int main() { return 0; }
int s = (char *)&((#{type}*)0)->#{member} - (char *)0;
SRC
  r = try_link(src, libs) # xxx try_compile is not available.
  unless r
    #print "no\n"
    return false
  end
  $defs.push(format("-DHAVE_ST_%s", member.upcase))
  #print "yes\n"
  return true
end

a14 2
#  $LDFLAGS << " -L/usr/lib" if File.directory?("/usr/lib")
#  $CFLAGS << " -I/usr/include"
a15 1
#  have_library("bind", "gethostbyaddr")
d50 1
a50 1
  if egrep_cpp("yes", <<EOF)
a51 3
#ifdef IPV6_INRIA_VERSION
yes
#endif
d55 1
a55 1
  elsif egrep_cpp("yes", <<EOF)
a56 3
#ifdef __KAME__
yes
#endif
d68 1
a68 1
  elsif egrep_cpp("yes", <<EOF)
a69 3
#ifdef _TOSHIBA_INET6
yes
#endif
d75 1
a75 1
  elsif egrep_cpp("yes", <<EOF)
a76 3
#ifdef __V6D__
yes
#endif
d82 1
a82 1
  elsif egrep_cpp("yes", <<EOF)
a83 3
#ifdef _ZETA_MINAMI_INET6
yes
#endif
@


1.24
log
@* ext/socket/extconf.rb: The IPv6 stack of Cygwin is still incomplete.
@
text
@d42 4
@


1.23
log
@* string.c (rb_str_aset): should raise error if an indexing string
  is not found in the receiver.

* sprintf.c (rb_f_sprintf): "%d" should convert objects into
  integers using Integer().

* lib/tempfile.rb (Tempfile::size): added.
@
text
@d65 2
a66 1
if enable_config("ipv6", true)
d164 1
a164 1
#endif
d223 1
a223 1
have_header("netinet/tcp.h") if not /cygwin/ === RUBY_PLATFORM # for cygwin 1.1.5
@


1.22
log
@* ext/socket/extconf.rb: include <windows.h>, <winsock.h> on _WIN32.
@
text
@d65 1
a65 1
if enable_config("ipv6", false)
d229 1
a229 1
if not enable_config("wide-getaddrinfo", false) and try_run(<<EOF)
d325 1
@


1.21
log
@* ext/socket/extconf.rb (have_struct_member): don't print checked
result.
@
text
@d160 10
a169 5
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
d183 9
a191 4
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
@


1.20
log
@* ext/socket/extconf.rb (have_struct_member): new method.
check msg_control and msg_accrights in struct msghdr.  check sys/uio.h.

* socket/socket.c: include sys/uio.h if available.
(thread_read_select): new function.
(unix_send_io): ditto.
(unix_recv_io): ditto.
(unix_s_socketpair): ditto.
(Init_socket): define UNIXSocket#send_io, UNIXSocket#recv_io,
@
text
@d6 2
a7 2
  printf "checking for %s.%s... ", type, member
  STDOUT.flush
d33 1
a33 1
    print "no\n"
d37 1
a37 1
  print "yes\n"
@


1.19
log
@* ext/socket/extconf.rb: remove -L/usr/local/lib.
@
text
@d5 36
d215 3
d371 1
@


1.18
log
@* io.c (rb_io_ctl): do not call ioctl/fcntl for f2, if f and f2
  have same fileno.

* eval.c (rb_load): raise LocaJumpError if unexpected local jumps
  appear during load.

* ext/socket/socket.c (bsock_close_read): don't call rb_thread_fd_close();
  it's supposed to be called by io_io_close().

* ext/socket/socket.c (bsock_close_read): do not modify f and f2.

* ext/socket/socket.c (bsock_close_write): ditto.

* ext/socket/socket.c (sock_new): avoid dup(2) on sockets.

* parse.y (primary): preserve and clear in_single and in_def using
  stack to prevent nested method errors in singleton class bodies.
@
text
@a2 1
$LIBPATH << "/usr/local/lib" if File.directory?("/usr/local/lib")
@


1.17
log
@matz
@
text
@d341 1
a341 1
      $CFLAGS="-DSOCKS5 -DSOCKS"
d343 1
a343 1
      $CFLAGS="-DSOCKS"
@


1.17.2.1
log
@* ext/socket/extconf.rb: do not clobber $CFLAGS when setting
  -DSOCKS.
@
text
@d341 1
a341 1
      $CFLAGS+=" -DSOCKS5 -DSOCKS"
d343 1
a343 1
      $CFLAGS+=" -DSOCKS"
@


1.17.2.2
log
@* ext/socket/extconf.rb: remove -L/usr/local/lib.
@
text
@d3 1
@


1.17.2.3
log
@* ext/socket/extconf.rb: include <windows.h>, <winsock.h> on _WIN32.
@
text
@d124 5
a128 10
#ifdef _WIN32
# include <windows.h>
# include <winsock.h>
#endif
# include <sys/types.h>
# include <netdb.h>
# include <string.h>
# include <sys/socket.h>
# include <netinet/in.h>
#endif
d142 4
a145 9
#ifdef _WIN32
# include <windows.h>
# include <winsock.h>
#endif
# include <sys/types.h>
# include <netdb.h>
# include <string.h>
# include <sys/socket.h>
#endif
@


1.17.2.4
log
@* ext/socket/extconf.rb: typo fix(#endif -> #else).
@
text
@d127 1
a127 1
#else
d150 1
a150 1
#else
@


1.16
log
@eban
@
text
@d2 3
a4 2
$LDFLAGS += " -L/usr/local/lib" if File.directory?("/usr/local/lib")
$CFLAGS += " -Dss_family=__ss_family -Dss_len=__ss_len"
@


1.15
log
@matz
@
text
@d176 1
a176 1
have_header("netinet/tcp.h")
@


1.14
log
@2000-05-30
@
text
@d309 2
@


1.13
log
@2000-05-18
@
text
@d280 1
a280 1
case with_config("ipv6-lookup-order", "INET")
d282 1
a282 1
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_INET "+$CFLAGS
d284 1
a284 1
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_INET6 "+$CFLAGS
d286 1
a286 1
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_UNSPEC "+$CFLAGS
d290 1
a290 1
Fatal: invalid --ipv6-lookup-order (expected INET, INET6 or UNSPEC)
@


1.12
log
@support mingw32.
@
text
@d102 4
d280 14
@


1.11
log
@2000-05-09
@
text
@d5 2
a6 2
case PLATFORM
when /mswin32/
@


1.10
log
@2000-05-01
@
text
@d176 1
a176 1
if try_run(<<EOF)
d293 16
@


1.9
log
@2000-02-23
@
text
@d9 1
d18 1
@


1.8
log
@2000-02-01
@
text
@d247 3
a249 1
  if (inet6 != 2 || inet4 != 2)
@


1.7
log
@marshal load GC protect
@
text
@d44 1
d63 1
d105 1
a105 1
    else
d133 17
@


1.6
log
@19991018
@
text
@a150 1
have_header("sys/sysctl.h")
@


1.5
log
@19991012
@
text
@d163 4
d183 1
@


1.5.2.1
log
@19991029
@
text
@d151 1
a162 4
#ifndef AF_LOCAL
#define AF_LOCAL AF_UNIX
#endif

a178 1
      if (ai->ai_family == AF_LOCAL) continue;
@


1.5.2.2
log
@2000-01-24
@
text
@a43 1
$ipv6trylibc = nil
a61 1
    $ipv6trylibc=true
d103 1
a103 1
    elsif !$ipv6trylibc
a130 17
end

  if try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
int
main()
{
   struct sockaddr_storage ss;

   ss.ss_family;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SOCKADDR_STORAGE "+$CFLAGS
@


1.5.2.3
log
@2000-03-02
@
text
@d247 1
a247 3
  if (!(inet4 == 0 || inet4 == 2))
    goto bad;
  if (!(inet6 == 0 || inet6 == 2))
@


1.5.2.4
log
@000414
@
text
@a8 1
  have_func("closesocket")
a16 1
  have_func("closesocket")
@


1.5.2.5
log
@2000-05-09
@
text
@d176 1
a176 1
if not enable_config("wide-getaddrinfo", false) and try_run(<<EOF)
a292 16
end

if !try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   socklen_t len;
   return 0;
}
EOF
  $CFLAGS="-Dsocklen_t=int "+$CFLAGS
@


1.5.2.6
log
@2000-05-30
@
text
@d5 2
a6 2
case RUBY_PLATFORM
when /mswin32|mingw/
a101 4
  else
    $ipv6lib=with_config("ipv6-lib", nil)
    $ipv6libdir=with_config("ipv6-libdir", nil)
    $CFLAGS="-DINET6 "+$CFLAGS
a275 14
case with_config("ipv6-lookup-order", "INET")
when "INET"
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_INET "+$CFLAGS
when "INET6"
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_INET6 "+$CFLAGS
when "UNSPEC"
  $CFLAGS="-DDEFAULT_LOOKUP_ORDER_UNSPEC "+$CFLAGS
else
  print <<EOS

Fatal: invalid --ipv6-lookup-order (expected INET, INET6 or UNSPEC)
EOS
  exit
end
@


1.5.2.7
log
@socket/extcont.rb
@
text
@d280 1
a280 1
case with_config("lookup-order-hack", "UNSPEC")
d282 1
a282 1
  $CFLAGS="-DLOOKUP_ORDER_HACK_INET "+$CFLAGS
d284 1
a284 1
  $CFLAGS="-DLOOKUP_ORDER_HACK_INET6 "+$CFLAGS
d286 1
a286 1
  # nothing special
d290 1
a290 1
Fatal: invalid value for --with-lookup-order-hack (expected INET, INET6 or UNSPEC)
@


1.4
log
@19990922
@
text
@d152 2
@


1.3
log
@1.4.1 to be
@
text
@d274 3
a276 1
    if have_library("socks", "Rconnect")
@


1.2
log
@remove marshal/gtk/kconv
@
text
@d10 2
a11 2
  $LDFLAGS << " -L/usr/lib" if File.directory?("/usr/lib")
  $CFLAGS << " -I/usr/include"
d13 1
a13 1
  have_library("bind", "gethostbyaddr")
@


1.1
log
@Initial revision
@
text
@d1 265
a265 4
$LDFLAGS = "-L/usr/local/lib"
have_library("wsock32", "cygwin32_socket") or have_library("socket", "socket")
have_library("inet", "gethostbyname")
have_library("nsl", "gethostbyname")
d267 2
a268 1
if have_func("socket") or have_func("cygwin32_socket")
d273 1
a273 1
  if ENV["SOCKS_SERVER"]  # test if SOCKSsocket needed
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d2 3
a4 12
case PLATFORM
when /mswin32/
  test_func = "WSACleanup"
  have_library("wsock32", "WSACleanup")
when /cygwin32/
  test_func = "cygwin32_socket"
else
  test_func = "socket"
  have_library("socket", "socket")
  have_library("inet", "gethostbyname")
  have_library("nsl", "gethostbyname")
end
d6 1
a6 1
if have_func(test_func)
@


1.1.1.3
log
@ruby 1.3 cycle
@
text
@d1 1
a1 2
require 'mkmf'
$LDFLAGS = "-L/usr/local/lib" if File.directory?("/usr/local/lib")
d7 1
a7 4
  test_func = "socket"
when /beos/
  test_func = "socket"
  have_library("net", "socket")
a9 1
  have_library("nsl", "t_open")
d11 2
a15 1
  have_func("inet_aton")
@


1.1.1.3.2.1
log
@*** empty log message ***
@
text
@a11 3
when /i386-os2_emx/
  test_func = "socket"
  have_library("socket", "socket")
@


1.1.1.3.2.2
log
@ipv6
@
text
@a2 3
$CFLAGS ||= ""
$CFLAGS+=" -Dss_family=__ss_family -Dss_len=__ss_len"

a19 224

$ipv6 = false
if enable_config("ipv6", "yes")
  if try_run(<<EOF)
#include <sys/types.h>
#include <sys/socket.h>
main()
{
  exit(0);
 if (socket(AF_INET6, SOCK_STREAM, 0) < 0)
   exit(1);
 else
   exit(0);
}
EOF
    $CFLAGS+=" -DENABLE_IPV6"
    $ipv6 = true
  end
end

$ipv6type = nil
$ipv6lib = nil
$ipv6libdir = nil
if $ipv6
  if egrep_cpp("yes", <<EOF)
#include <netinet/in.h>
#ifdef IPV6_INRIA_VERSION
yes
#endif
EOF
    $ipv6type = "inria"
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif egrep_cpp("yes", <<EOF)
#include <netinet/in.h>
#ifdef __KAME__
yes
#endif
EOF
    $ipv6type = "kame"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif File.directory? "/usr/inet6"
    $ipv6type = "linux"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/inet6/lib"
    $CFLAGS="-DINET6 -I/usr/inet6/include "+$CFLAGS
  elsif egrep_cpp("yes", <<EOF)
#include <sys/param.h>
#ifdef _TOSHIBA_INET6
yes
#endif
EOF
    $ipv6type = "toshiba"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 "+$CFLAGS
  elsif egrep_cpp("yes", <<EOF)
#include </usr/local/v6/include/sys/v6config.h>
#ifdef __V6D__
yes
#endif
EOF
    $ipv6type = "v6d"
    $ipv6lib="v6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 -I/usr/local/v6/include "+$CFLAGS
  elsif egrep_cpp("yes", <<EOF)
#include <sys/param.h>
#ifdef _ZETA_MINAMI_INET6
yes
#endif
EOF
    $ipv6type = "zeta"
    $ipv6lib="inet6"
    $ipv6libdir="/usr/local/v6/lib"
    $CFLAGS="-DINET6 "+$CFLAGS
  end
  
  if $ipv6lib
    if File.directory? $ipv6libdir and File.exist? "#{$ipv6libdir}/#{ipv6lib}.a"
      $LDFLAGS += " -L#$ipv6libdir -l#$ipv6lib"
    else
      print <<EOS
Fatal: no #$ipv6lib library found.  cannot continue.
You need to fetch lib#{$ipv6lib}.a from appropriate
ipv6 kit and compile beforehand.
EOS
      exit
    end
  end
end

  if try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   struct sockaddr_in sin;

   sin.sin_len;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SIN_LEN "+$CFLAGS
end

  if try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   struct sockaddr sa;

   sa.sa_len;
   return 0;
}
EOF
    $CFLAGS="-DHAVE_SA_LEN "+$CFLAGS
end

$getaddr_info_ok = false
if try_run(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

main()
{
  int passive, gaierr, inet4 = 0, inet6 = 0;
  struct addrinfo hints, *ai, *aitop;
  char straddr[INET6_ADDRSTRLEN], strport[16];

  for (passive = 0; passive <= 1; passive++) {
    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_flags = passive ? AI_PASSIVE : 0;
    hints.ai_socktype = SOCK_STREAM;
    if ((gaierr = getaddrinfo(NULL, "54321", &hints, &aitop)) != 0) {
      (void)gai_strerror(gaierr);
      goto bad;
    }
    for (ai = aitop; ai; ai = ai->ai_next) {
      if (ai->ai_addr == NULL ||
          ai->ai_addrlen == 0 ||
          getnameinfo(ai->ai_addr, ai->ai_addrlen,
                      straddr, sizeof(straddr), strport, sizeof(strport),
                      NI_NUMERICHOST|NI_NUMERICSERV) != 0) {
        goto bad;
      }
      if (strcmp(strport, "54321") != 0) {
        goto bad;
      }
      switch (ai->ai_family) {
      case AF_INET:
        if (passive) {
          if (strcmp(straddr, "0.0.0.0") != 0) {
            goto bad;
          }
        } else {
          if (strcmp(straddr, "127.0.0.1") != 0) {
            goto bad;
          }
        }
        inet4++;
        break;
      case AF_INET6:
        if (passive) {
          if (strcmp(straddr, "::") != 0) {
            goto bad;
          }
        } else {
          if (strcmp(straddr, "::1") != 0) {
            goto bad;
          }
        }
        inet6++;
        break;
      case AF_UNSPEC:
        goto bad;
        break;
      default:
        /* another family support? */
        break;
      }
    }
  }

  if (inet6 != 2 || inet4 != 2)
    goto bad;

  if (aitop)
    freeaddrinfo(aitop);
  exit(0);

 bad:
  if (aitop)
    freeaddrinfo(aitop);
  exit(1);
}
EOF
  $getaddr_info_ok = true
end

$objs = ["socket.o"]
    
if $getaddr_info_ok
  have_func("getaddrinfo")
  have_func("getnameinfo")
else
  $objs += "getaddrinfo.o"
  $objs += "getnameinfo.o"
end

@


1.1.1.3.2.3
log
@glibc 2.1
@
text
@d4 1
d31 1
d239 3
a241 26
if $getaddr_info_ok or not $ipv6
  if have_func("getaddrinfo") and
     have_func("getnameinfo")
    have_getaddrinfo = true
  end
end

if have_getaddrinfo
  if try_link(<<EOF)
#include <sys/types.h>
#include <netdb.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main()
{
   struct sockaddr_storage storage;
   struct sockaddr_storage *addr;

   addr = &storage;
   return 0;
}
EOF
    sockaddr_storage=true
  end
a242 2
  sockaddr_storage=true
  $CFLAGS="-I. "+$CFLAGS
a246 6
if sockaddr_storage
  $CFLAGS="-DSOCKADDR_STORAGE "+$CFLAGS
end

p $ipv6

d249 1
@


1.1.1.3.2.4
log
@*** empty log message ***
@
text
@d24 1
a24 1
if enable_config("ipv6", true)
a29 1
 exit(0);
a40 1

d255 1
a255 1
   struct sockaddr_storage *addr = 0;
d257 1
a257 2
   addr->_ss_family = &storage.__ss_family;
   addr->_ss_len = &storage.__ss_len;
d271 1
a271 1
  $CFLAGS="-DSOCKADDR_STORAGE=sockaddr_storage "+$CFLAGS
d273 2
@


1.1.1.3.2.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
$CFLAGS = "-Dss_family=__ss_family -Dss_len=__ss_len"
d103 1
a103 1
    if File.directory? $ipv6libdir and File.exist? "#{$ipv6libdir}/lib#{$ipv6lib}.a"
d239 1
a239 1
if $getaddr_info_ok
a246 1
  $CFLAGS="-DHAVE_GETADDRINFO "+$CFLAGS
d259 2
a260 2
   addr->__ss_family = &storage.__ss_family;
   addr->__ss_len = &storage.__ss_len;
a264 1
    $CFLAGS+=" -DHAVE_SS_LEN"
@


1.1.1.3.2.6
log
@small fixes
@
text
@a151 2
have_header("sys/sysctl.h")

a272 2
  have_func("inet_ntop")
  have_func("inet_pton")
a279 1

@


1.1.1.3.2.7
log
@990507
@
text
@d242 2
a243 1
  if have_func("getaddrinfo") and have_func("getnameinfo")
d250 20
d275 6
a280 2
  have_func("inet_ntop") or have_func("inet_ntoa")
  have_func("inet_pton") or have_func("inet_aton")
d290 1
a290 1
  if ENV["SOCKS_SERVER"] or enable_config("socks", false)
@


1.1.1.3.2.8
log
@regexp,range,squeeze
@
text
@d24 2
a25 2
if enable_config("ipv6", false)
  if try_link(<<EOF)
d30 5
a34 1
  socket(AF_INET6, SOCK_STREAM, 0);
d42 1
d104 1
a104 1
      $LOCAL_LIBS = " -L#$ipv6libdir -l#$ipv6lib"
a106 1

a237 10
if $ipv6 and not $getaddr_info_ok
      print <<EOS

Fatal: --enable-ipv6 is specified, and your OS seems to support IPv6 feature.
But your getaddrinfo() and getnameinfo() are appeared to be broken.  Sorry,
you cannot compile IPv6 socket classes with broken these functions.
EOS
  exit
end
      
d241 4
a244 2
if $getaddr_info_ok and have_func("getaddrinfo") and have_func("getnameinfo")
  have_getaddrinfo = true
@


1.1.1.3.2.9
log
@regexp null pattern
@
text
@d254 1
@


1.1.1.3.2.10
log
@thread bugs
@
text
@d9 1
a9 3
when /cygwin/
  $LDFLAGS << " -L/usr/lib" if File.directory?("/usr/lib")
  $CFLAGS << " -I/usr/include"
a10 1
  have_library("bind", "gethostbyaddr")
d255 2
a256 2
  $objs += ["getaddrinfo.o"]
  $objs += ["getnameinfo.o"]
@


1.1.1.3.2.11
log
@990728
@
text
@d2 2
a3 2
$LDFLAGS += " -L/usr/local/lib" if File.directory?("/usr/local/lib")
$CFLAGS += " -Dss_family=__ss_family -Dss_len=__ss_len"
d248 1
a248 1
$objs = ["socket.#{$OBJEXT}"]
d258 2
a259 2
  $objs += ["getaddrinfo.#{$OBJEXT}"]
  $objs += ["getnameinfo.#{$OBJEXT}"]
@


1.1.1.3.2.12
log
@1.3.8 to be, final beta (hopefully)
@
text
@a261 2
  have_header("arpa/nameser.h")
  have_header("resolv.h")
@


1.1.1.2.2.1
log
@gw32 b19 patch
@
text
@d7 1
a7 1
  test_func = "socket"
@


1.1.1.2.2.2
log
@1.1b9_14
@
text
@a0 1
require 'mkmf'
@


1.1.1.2.2.3
log
@BeOS patches
@
text
@d2 1
a2 1
$LDFLAGS = "-L/usr/local/lib" if File.directory?("/usr/local/lib")
a8 3
when /beos/
  test_func = "socket"
  have_library("net", "socket")
@


1.1.1.2.2.4
log
@1.1c2
@
text
@d14 1
a16 1
  have_library("socket", "socket")
@


1.1.1.2.2.5
log
@*** empty log message ***
@
text
@d15 1
a15 1
  have_library("nsl", "t_open")
@


1.1.1.2.2.5.2.1
log
@1.1d series
@
text
@a19 1
  have_func("inet_aton")
@
