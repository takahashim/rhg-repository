head	1.12;
access;
symbols
	v1_6_4:1.4
	v1_7_1:1.11
	v1_6_4_preview4:1.4
	v1_6_4_preview3:1.4
	v1_6_4_preview2:1.4
	v1_6_4_preview1:1.4
	v1_6_3:1.4
	ruby_m17n:1.4.0.4
	ruby_1_6:1.4.0.2
	v1_6_2:1.4
	v1_6_1:1.4
	v1_6_0:1.4
	v1_4_6:1.2.2.2
	v1_4_5:1.2.2.1
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.2.2.3
	v1_3_6_repack:1.1.1.2.2.3
	v1_3_6:1.1.1.2.2.3
	v1_3_5:1.1.1.2.2.3
	v1_2_6repack:1.1.1.1.4.4
	v1_3_4_990625:1.1.1.2.2.3
	v1_3_4_990624:1.1.1.2.2.3
	v1_2_6:1.1.1.1.4.4
	v1_3_4_990611:1.1.1.2.2.2
	v1_3_4_990531:1.1.1.2.2.1
	v1_3_3_990518:1.1.1.2.2.1
	v1_3_3_990513:1.1.1.2.2.1
	v1_3_3_990507:1.1.1.2.2.1
	v1_2_5:1.1.1.1.4.4
	v1_2_4:1.1.1.1.4.4
	v1_3_1_990225:1.1.1.2.2.1
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.4.4
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.4.4
	v1_2_1repack:1.1.1.1.4.4
	v1_2_1:1.1.1.1.4.4
	v1_2_stable:1.1.1.1.4.4
	v1_1d1:1.1.1.1.4.3.2.2
	v1_1d0:1.1.1.1.4.3.2.2
	v1_1c9_1:1.1.1.1.4.4
	v1_1c9:1.1.1.1.4.4
	v1_1c8:1.1.1.1.4.3
	v1_1c7:1.1.1.1.4.3
	v1_1c6:1.1.1.1.4.3
	v1_1d-start:1.1.1.1.4.3.2.1
	v1_1c5:1.1.1.1.4.3
	v1_1dev:1.1.1.1.4.3.0.2
	v1_1c4:1.1.1.1.4.3
	v1_1c3:1.1.1.1.4.3
	v1_1c2:1.1.1.1.4.3
	v1_1c1:1.1.1.1.4.3
	v1_1c0:1.1.1.1.4.3
	v1_1b9_31:1.1.1.1.4.3
	v1_1b9_30:1.1.1.1.4.3
	v1_1b9_28:1.1.1.1.4.3
	v1_1b9_27:1.1.1.1.4.3
	v1_1b9_26:1.1.1.1.4.3
	r1_1b9_25:1.1.1.1.4.3
	r1_1b9_24:1.1.1.1.4.3
	v1_1b9_23:1.1.1.1.4.3
	v1_1b9_22:1.1.1.1.4.3
	v1_1b9_20:1.1.1.1.4.3
	v1_1b9_18:1.1.1.1.4.2
	v1_1b9_16:1.1.1.1.4.2
	v1_1b9_15:1.1.1.1.4.2
	v1_1b9_13:1.1.1.1.4.2
	v1_1b9_12:1.1.1.1.4.2
	v1_1b9_11:1.1.1.1.4.2
	v1_1b9_08:1.1.1.1.4.2
	v1_1b9_07:1.1.1.1.4.2
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2001.07.13.20.06.14;	author knu;	state dead;
branches;
next	1.11;

1.11
date	2001.05.24.16.00.54;	author knu;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.16.21.16.02;	author knu;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.16.09.05.52;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.02.04.22.21;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.26.09.27.18;	author eban;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.26.08.57.14;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.14.05.52.04;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.24.07.19.34;	author matz;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.03.06.04.15.38;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.37.49;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.33;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	;

1.1.1.2.2.1
date	99.02.25.06.39.12;	author matz;	state Exp;
branches;
next	1.1.1.2.2.2;

1.1.1.2.2.2
date	99.06.09.09.21.34;	author matz;	state Exp;
branches;
next	1.1.1.2.2.3;

1.1.1.2.2.3
date	99.06.24.04.24.06;	author matz;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	98.03.31.04.52.10;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.04.02.10.03.52;	author matz;	state Exp;
branches;
next	1.1.1.1.4.3;

1.1.1.1.4.3
date	98.05.13.07.26.45;	author matz;	state Exp;
branches
	1.1.1.1.4.3.2.1;
next	1.1.1.1.4.4;

1.1.1.1.4.4
date	98.11.26.08.25.47;	author matz;	state Exp;
branches;
next	;

1.1.1.1.4.3.2.1
date	98.09.08.07.09.37;	author matz;	state Exp;
branches;
next	1.1.1.1.4.3.2.2;

1.1.1.1.4.3.2.2
date	98.11.25.03.31.18;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2000.05.12.09.06.18;	author matz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.07.24.07.16.26;	author matz;	state Exp;
branches;
next	;

1.4.2.1
date	2001.08.16.07.35.43;	author knu;	state dead;
branches;
next	;


desc
@@


1.12
log
@Import the "digest" module and the submodules, from the Rough Ruby
project.

  ext/digest:
    This module provides the module Digest and the abstract class
    Digest::Base.

  ext/digest/md5 (which obsoletes ext/md5):
    This module provides the class Digest::MD5 which implements the
    MD5 Message-Digest Algorithm.

  ext/digest/rmd160:
    This module provides the class Digest::RMD160 which implements the
    RIPEMD-160 cryptographic hash function.

  ext/digest/sha1 (which obsoletes ext/sha1):
    This module provides the class Digest::SHA1 which implements the
    SHA-1 Secure Hash Algorithm.

  ext/digest/sha2:
    This module provides the classes Digest::SHA256, Digest::SHA384
    and Digest::SHA512 which implement the SHA-256, SHA-384 and
    SHA-512 Secure Hash Algorithms, respectively.

  lib/md5.rb, lib/sha1.rb:
    These files are provided for backward compatibility.

All these classes have the common API, which previously ext/md5 and
ext/sha1 modules provided.  While the new API keeps 100% backward
compatibility, it has been enriched with several utility methods.

Read digest.txt for further details.
@
text
@/************************************************

  md5init.c -

  $Author: knu $
  created at: Fri Aug  2 09:24:12 JST 1996

  Copyright (C) 1995-2001 Yukihiro Matsumoto

************************************************/
/* This module provides an interface to the RSA Data Security,
   Inc. MD5 Message-Digest Algorithm, described in RFC 1321. */

#include "ruby.h"
#include "md5.h"

static VALUE cMD5;

static VALUE
md5i_update(obj, str)
    VALUE obj, str;
{
    md5_state_t *md5;

    StringValue(str);
    Data_Get_Struct(obj, md5_state_t, md5);
    md5_append(md5, RSTRING(str)->ptr, RSTRING(str)->len);

    return obj;
}

static VALUE
md5i_digest(obj)
    VALUE obj;
{
    md5_state_t *md5, ctx;
    md5_byte_t digest[16];

    Data_Get_Struct(obj, md5_state_t, md5);
    ctx = *md5;
    md5_finish(&ctx, digest);

    return rb_str_new(digest, 16);
}

static VALUE
md5i_hexdigest(obj)
    VALUE obj;
{
    md5_state_t *md5, ctx;
    md5_byte_t digest[16];
    char buf[33];
    int i;

    Data_Get_Struct(obj, md5_state_t, md5);
    ctx = *md5;
    md5_finish(&ctx, digest);

    for (i=0; i<16; i++) {
	sprintf(buf+i*2, "%02x", digest[i]);
    }
    return rb_str_new(buf, 32);
}

static VALUE
md5i_clone(obj)
    VALUE obj;
{
    md5_state_t *md5, *md5_new;

    Data_Get_Struct(obj, md5_state_t, md5);
    obj = Data_Make_Struct(CLASS_OF(obj), md5_state_t, 0, free, md5_new);
    *md5_new = *md5;

    return obj;
}

static VALUE
md5i_init(argc, argv, self)
    int argc;
    VALUE* argv;
    VALUE self;
{
    VALUE str;

    rb_scan_args(argc, argv, "01", &str);

    if (!NIL_P(str)) md5i_update(self, str);

    return self;
}

static VALUE
md5i_new(argc, argv, class)
    int argc;
    VALUE* argv;
    VALUE class;
{
    VALUE obj;
    md5_state_t *md5;

    obj = Data_Make_Struct(class, md5_state_t, 0, free, md5);
    md5_init(md5);
    rb_obj_call_init(obj, argc, argv);

    return obj;
}

void
Init_md5()
{
    cMD5 = rb_define_class("MD5", rb_cObject);

    rb_define_singleton_method(cMD5, "new", md5i_new, -1);
    rb_define_singleton_method(cMD5, "md5", md5i_new, -1);

    rb_define_method(cMD5, "initialize", md5i_init, -1);
    rb_define_method(cMD5, "update", md5i_update, 1);
    rb_define_method(cMD5, "<<", md5i_update, 1);
    rb_define_method(cMD5, "digest", md5i_digest, 0);
    rb_define_method(cMD5, "hexdigest", md5i_hexdigest, 0);
    rb_define_method(cMD5, "clone",  md5i_clone, 0);
}
@


1.11
log
@* ext/sha1/sha1-ruby.c (md5i_new): separate initialize() from
  new().

* ext/md5/md5init.c (sha1_new): ditto.
@
text
@@


1.10
log
@(This is a forced commit to put the log entry for the previous commit)

* ext/md5/md5init.c: add an instance method "<<" as an alias for
"update". (inspired by Steve Coltrin's ruby-sha1)
@
text
@d5 1
a5 1
  $Author: matz $
d79 15
d99 1
a99 1
    VALUE obj, str;
d104 1
a104 4
    rb_scan_args(argc, argv, "01", &str);
    if (argc == 1) {
	md5i_update(obj, str);
    }
d117 1
@


1.9
log
@* array.c (rb_ary_and): should not push frozen key string.

* array.c (rb_ary_or): ditto.

* eval.c (rb_thread_schedule): should save context before raising
  deadlock, saved context for current thread might be obsolete.

* time.c (make_time_t): non DST timezone shift supported (hopefully).

* time.c (make_time_t): strict range detection for negative time_t.

* signal.c: SIGINFO added.

* eval.c (rb_ensure): should not SEGV when prot_tag is NULL.
@
text
@@


1.8
log
@* eval.c (block_pass): should not downgrade safe level.

* ext/dbm/extconf.rb: allow specifying dbm-type explicitly.

* ext/dbm/extconf.rb: avoid gdbm if possible, because it leaks
  memory, whereas gdbm.so doesn't.  potential incompatibility.

* string.c (rb_str_insert): new method.

* parse.y (yylex): lex_state after RESCUE_MOD should be EXPR_BEG.

* array.c (rb_ary_insert): new method.

* array.c (rb_ary_update): new utility function.

* io.c (set_outfile): should check if closed before assignment.

* eval.c (rb_eval): should preserve value of ruby_errinfo.

* eval.c (rb_thread_schedule): infinite sleep should not cause
  dead lock.

* array.c (rb_ary_flatten_bang): proper recursive detection.

* eval.c (yield_under): need not to prohibit at safe level 4.

* pack.c (pack_pack): p/P packs nil into NULL.

* pack.c (pack_unpack): p/P unpacks NULL into nil.

* pack.c (pack_pack): size check for P template.

* ruby.c (set_arg0): wrong predicate when new $0 value is bigger
  than original space.

* gc.c (id2ref): should use NUM2ULONG()

* object.c (rb_mod_const_get): check whether name is a class
  variable name.

* object.c (rb_mod_const_set): ditto.

* object.c (rb_mod_const_defined): ditto.

* marshal.c (w_float): precision changed to "%.16g"

* eval.c (rb_call0): wrong retry behavior.

* numeric.c (fix_aref): a bug on long>int architecture.

* eval.c (rb_eval_string_wrap): should restore ruby_wrapper.

* regex.c (re_compile_pattern): char class at either edge of range
  should be invalid.

* eval.c (handle_rescue): use === to compare exception match.

* error.c (syserr_eqq): comparison between SytemCallErrors should
  based on their error numbers.

* eval.c (safe_getter): should use INT2NUM().

* bignum.c (rb_big2long): 2**31 cannot fit in 31 bit long.

* regex.c (calculate_must_string): wrong length calculation.

* eval.c (rb_thread_start_0): fixed memory leak.

* parse.y (none): should clear cmdarg_stack too.

* io.c (rb_fopen): use setvbuf() to avoid recursive malloc() on
  some platforms.

* file.c (rb_stat_dev): device functions should honor stat field
  types (except long long such as dev_t).

* eval.c (rb_mod_nesting): should not push nil for nesting array.

* eval.c (rb_mod_s_constants): should not search array by
  rb_mod_const_at() for nil (happens for singleton class).

* class.c (rb_singleton_class_attached): should modify iv_tbl by
  itself, no longer use rb_iv_set() to avoid freeze check error.

* variable.c (rb_const_get): error message "uninitialized constant
  Foo at Bar::Baz" instead of "uninitialized constantBar::Baz::Foo".

* eval.c (rb_mod_included): new hook called from rb_mod_include().

* io.c (opt_i_set): should strdup() inplace_edit string.

* eval.c (exec_under): need to push cref too.

* eval.c (rb_f_missing): raise NameError for "undefined local
  variable or method".

* error.c (Init_Exception): new exception NoMethodError.
  NameError moved under ScriptError again.

* eval.c (rb_f_missing): use NoMethodError instead of NameError.

* file.c (Init_File): should redifine "new" class method.

* eval.c (PUSH_CREF): sharing cref node was problematic.  maintain
  runtime cref list instead.

* eval.c (rb_eval): copy defn node before registering.

* eval.c (rb_load): clear ruby_cref before loading.

* variable.c (rb_const_get): no recursion to show full class path
  for modules.

* eval.c (rb_set_safe_level): should set safe level in curr_thread
  as well.

* eval.c (safe_setter): ditto.

* object.c (rb_obj_is_instance_of): nil belongs to false, not true.

* time.c (make_time_t): proper (I hope) daylight saving time
  handling for both US and Europe.  I HATE DST!

* eval.c (rb_thread_wait_for): non blocked signal interrupt should
  stop the interval.

* eval.c (proc_eq): class check aded.

* eval.c (proc_eq): typo fixed ("return" was ommitted).

* error.c (Init_Exception): move NameError under StandardError.

* class.c (rb_mod_clone): should copy method bodies too.

* bignum.c (bigdivrem): should trim trailing zero bdigits of
  remainder, even if dd == 0.

* file.c (check3rdbyte): safe string check moved here.

* time.c (make_time_t): remove HAVE_TM_ZONE code since it
  sometimes reports wrong time.

* time.c (make_time_t): remove unnecessary range check for
  platforms where negative time_t is available.

* process.c (proc_waitall): should push Process::Status instead of
  Finuxm status.

* process.c (waitall_each): should add all entries in pid_tbl.
  these changes are inspired by Koji Arai.  Thanks.

* process.c (proc_wait): should not iterate if pid_tbl is 0.

* process.c (proc_waitall): ditto.

* numeric.c (flodivmod): a bug in no fmod case.

* process.c (pst_wifsignaled): should apply WIFSIGNALED for status
  (int), not st (VALUE).

* io.c (Init_IO): value of $/ and $\ are no longer restricted to
  strings.  type checks are done on demand.

* class.c (rb_include_module): module inclusion should be check
  taints.

* ruby.h (STR2CSTR): replace to StringType() and StringTypePtr().

* ruby.h (rb_str2cstr): ditto.

* eval.c (rb_load): should not copy topleve local variables.  It
  cause variable/method ambiguity.  Thanks to L. Peter Deutsch.

* class.c (rb_include_module): freeze check at first.

* eval.c (rb_attr): sprintf() and rb_intern() moved into
  conditional body.
@
text
@d5 1
a5 1
  $Author: eban $
d106 1
@


1.7
log
@* ext/md5/md5init.c (md5i_new): remove rb_scan_args().
@
text
@d5 1
a5 1
  $Author: matz $
a23 2
    char *p;
    int len;
d25 1
a25 1
    p = rb_str2cstr(str, &len);
d27 1
a27 1
    md5_append(md5, p, len);
d84 1
a84 1
    VALUE obj;
d89 1
d91 1
a91 1
	md5i_update(obj, argv[0]);
@


1.6
log
@* eval.c: remove TMP_PROTECT_END to prevent C_ALLOCA crash.

* file.c (rb_file_flock): do not trap EINTR.

* missing/flock.c (flock): returns the value from lockf(2)
  directly.

* eval.c (ev_const_defined): should ignore toplevel cbase (Object).

* eval.c (ev_const_get): ditto.

* ext/md5/md5.h: replace by independent md5 implementation
  contributed by L. Peter Deutsch (thanks).

* ext/md5/md5init.c: adopted to Deutsch's md5 implementation.

* pack.c (pack_unpack): string from P/p should be tainted.

* ext/curses/curses.c: curses on Mac OS X public beta does not
  have _maxx etc.

* marshal.c (w_object): should truncate trailing zero short for
  bignums.

* object.c (sym_intern): new method.
@
text
@a88 1
    rb_scan_args(argc, argv, "01", &arg);
@


1.5
log
@* dir.c (dir_s_glob): supprt backslash escape of metacharacters
  and delimiters.

* dir.c (remove_backslases): remove backslashes from path before
  calling stat(2).

* dir.c (dir_s_glob): call rb_yield directly (via push_pattern) if
  block is given to the method.

* dir.c (push_pattern): do not call rb_ary_push; yield directly.

* eval.c (blk_copy_prev): reduced ALLOC_N too much.

* eval.c (frame_dup): ditto.
@
text
@d12 1
a12 3
   Inc. MD5 Message-Digest Algorithm, described in RFC 1321.
   It requires the files md5c.c and md5.h (which are slightly changed
   from the versions in the RFC to avoid the "global.h" file.) */
d20 2
a21 3
md5_update(obj, str)
    VALUE obj;
    struct RString *str;
d23 7
a29 5
    MD5_CTX *md5;

    Check_Type(str, T_STRING);
    Data_Get_Struct(obj, MD5_CTX, md5);
    MD5Update(md5, str->ptr, str->len);
d35 1
a35 1
md5_digest(obj)
d38 2
a39 2
    MD5_CTX *md5, ctx;
    unsigned char digest[16];
d41 1
a41 1
    Data_Get_Struct(obj, MD5_CTX, md5);
d43 1
a43 1
    MD5Final(digest, &ctx);
d49 1
a49 1
md5_hexdigest(obj)
d52 2
a53 2
    MD5_CTX *md5, ctx;
    unsigned char digest[16];
d57 1
a57 1
    Data_Get_Struct(obj, MD5_CTX, md5);
d59 1
a59 1
    MD5Final(digest, &ctx);
d68 1
a68 1
md5_clone(obj)
d71 1
a71 1
    MD5_CTX *md5, *md5_new;
d73 2
a74 2
    Data_Get_Struct(obj, MD5_CTX, md5);
    obj = Data_Make_Struct(CLASS_OF(obj), MD5_CTX, 0, free, md5_new);
d81 1
a81 1
md5_new(argc, argv, class)
d86 2
a87 2
    VALUE arg, obj;
    MD5_CTX *md5;
d90 4
a93 6
    if (!NIL_P(arg)) Check_Type(arg, T_STRING);

    obj = Data_Make_Struct(class, MD5_CTX, 0, free, md5);
    MD5Init(md5);
    if (!NIL_P(arg)) {
	md5_update(obj, arg);
d104 2
a105 2
    rb_define_singleton_method(cMD5, "new", md5_new, -1);
    rb_define_singleton_method(cMD5, "md5", md5_new, -1);
d107 4
a110 4
    rb_define_method(cMD5, "update", md5_update, 1);
    rb_define_method(cMD5, "digest", md5_digest, 0);
    rb_define_method(cMD5, "hexdigest", md5_hexdigest, 0);
    rb_define_method(cMD5, "clone",  md5_clone, 0);
@


1.4
log
@matz
@
text
@d8 1
a8 1
  Copyright (C) 1995-1998 Yukihiro Matsumoto
@


1.4.2.1
log
@* LEGAL, ext/Setup*, ext/digest/*: Merge from 1.7: Import digest
  modules.

* ext/md5/*: Move to ext/digest/md5.
@
text
@@


1.3
log
@2000-03-06
@
text
@d108 1
@


1.2
log
@remove marshal/gtk/kconv
@
text
@a97 1
    rb_obj_call_init(obj, argc, argv);
@


1.2.2.1
log
@2000-05-12
@
text
@d8 1
a8 1
  Copyright (C) 1995-2000 Yukihiro Matsumoto
@


1.2.2.2
log
@matz
@
text
@a108 1
    rb_define_singleton_method(cMD5, "md5", md5_new, -1);
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
  Copyright (C) 1995 Yukihiro Matsumoto
d32 1
a32 1
    return Qnil;
d34 1
d46 20
a65 1
    return str_new(digest, 16);
a71 1
    VALUE clone;
d75 1
a75 1
    obj = Data_Make_Struct(CLASS_OF(obj), MD5_CTX, 0, 0, md5_new);
d83 3
a86 1
    int i;
d93 1
a93 1
    obj = Data_Make_Struct(class, MD5_CTX, 0, 0, md5);
d98 1
d103 1
d106 1
a106 1
    cMD5 = rb_define_class("MD5", cObject);
d112 1
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@d8 1
a8 1
  Copyright (C) 1995-1998 Yukihiro Matsumoto
d45 1
a45 1
    return rb_str_new(digest, 16);
d56 1
a56 1
    obj = Data_Make_Struct(CLASS_OF(obj), MD5_CTX, 0, free, md5_new);
a63 3
    int argc;
    VALUE* argv;
    VALUE class;
d72 1
a72 1
    obj = Data_Make_Struct(class, MD5_CTX, 0, free, md5);
a76 1
    rb_obj_call_init(obj);
d83 1
a83 1
    cMD5 = rb_define_class("MD5", rb_cObject);
@


1.1.1.2.2.1
log
@990225
@
text
@d80 1
a80 1
    rb_obj_call_init(obj, argc, argv);
@


1.1.1.2.2.2
log
@thread bugs
@
text
@d32 1
a32 1
    return obj;
a33 1

a48 20
md5_hexdigest(obj)
    VALUE obj;
{
    MD5_CTX *md5, ctx;
    unsigned char digest[16];
    char buf[35];
    char *p = buf;
    int i;

    Data_Get_Struct(obj, MD5_CTX, md5);
    ctx = *md5;
    MD5Final(digest, &ctx);

    for (i=0; i<16; i++) {
	sprintf(buf+i*2, "%x", digest[i]);
    }
    return rb_str_new(buf, 32);
}

static VALUE
a92 1
    rb_define_method(cMD5, "hexdigest", md5_hexdigest, 0);
@


1.1.1.2.2.3
log
@990624
@
text
@d55 2
a56 1
    char buf[33];
d64 1
a64 1
	sprintf(buf+i*2, "%02x", digest[i]);
d73 1
d89 1
a105 1
void
@


1.1.1.1.4.1
log
@eval(..,file,line);String#center
@
text
@d8 1
a8 1
  Copyright (C) 1995-1998 Yukihiro Matsumoto
@


1.1.1.1.4.2
log
@call initialize
@
text
@a76 1
    obj_call_init(obj);
@


1.1.1.1.4.3
log
@1.1b9_19
@
text
@a63 3
    int argc;
    VALUE* argv;
    VALUE class;
@


1.1.1.1.4.4
log
@1.1c9 - 1.1c final, hopefully
@
text
@d56 1
a56 1
    obj = Data_Make_Struct(CLASS_OF(obj), MD5_CTX, 0, free, md5_new);
d75 1
a75 1
    obj = Data_Make_Struct(class, MD5_CTX, 0, free, md5);
@


1.1.1.1.4.3.2.1
log
@1.1d series
@
text
@d45 1
a45 1
    return rb_str_new(digest, 16);
d80 1
a80 1
    rb_obj_call_init(obj);
d87 1
a87 1
    cMD5 = rb_define_class("MD5", rb_cObject);
@


1.1.1.1.4.3.2.2
log
@*** empty log message ***
@
text
@d56 1
a56 1
    obj = Data_Make_Struct(CLASS_OF(obj), MD5_CTX, 0, free, md5_new);
d75 1
a75 1
    obj = Data_Make_Struct(class, MD5_CTX, 0, free, md5);
@


