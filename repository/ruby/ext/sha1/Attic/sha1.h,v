head	1.2;
access;
symbols
	v1_7_1:1.1.1.1
	RUBY-SHA1_v1_2:1.1.1.1
	SPCOLTRIN:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.07.13.20.06.14;	author knu;	state dead;
branches;
next	1.1;

1.1
date	2001.05.16.22.07.29;	author knu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.16.22.07.29;	author knu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Import the "digest" module and the submodules, from the Rough Ruby
project.

  ext/digest:
    This module provides the module Digest and the abstract class
    Digest::Base.

  ext/digest/md5 (which obsoletes ext/md5):
    This module provides the class Digest::MD5 which implements the
    MD5 Message-Digest Algorithm.

  ext/digest/rmd160:
    This module provides the class Digest::RMD160 which implements the
    RIPEMD-160 cryptographic hash function.

  ext/digest/sha1 (which obsoletes ext/sha1):
    This module provides the class Digest::SHA1 which implements the
    SHA-1 Secure Hash Algorithm.

  ext/digest/sha2:
    This module provides the classes Digest::SHA256, Digest::SHA384
    and Digest::SHA512 which implement the SHA-256, SHA-384 and
    SHA-512 Secure Hash Algorithms, respectively.

  lib/md5.rb, lib/sha1.rb:
    These files are provided for backward compatibility.

All these classes have the common API, which previously ext/md5 and
ext/sha1 modules provided.  While the new API keeps 100% backward
compatibility, it has been enriched with several utility methods.

Read digest.txt for further details.
@
text
@#ifndef _SHA1_H
#define _SHA1_H

#include "config.h"

#ifdef HAVE_PROTOTYPES
#define PROTOTYPES 1
#endif
#ifndef PROTOTYPES
#define PROTOTYPES 0
#endif

#if PROTOTYPES
#define __P(x) x
#else
#define __P(x) ()
#endif

#include <stdio.h>
#include <string.h>

typedef struct {
    unsigned long state[5];
    unsigned long count[2];
    unsigned char buffer[64];
} SHA1_CTX;

void SHA1Transform __P((unsigned long state[5], unsigned char buffer[64]));
void SHA1Init __P((SHA1_CTX* context));
void SHA1Update __P((SHA1_CTX* context, unsigned char* data, unsigned int len));
void SHA1Final __P((unsigned char digest[20], SHA1_CTX* context));

#endif /* _SHA1_H */
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@This is the initial import of Steve Coltrin's SHA1 module.
@
text
@@
