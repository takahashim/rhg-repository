head	1.5;
access;
symbols
	v1_7_1:1.4
	RUBY-SHA1_v1_2:1.1.1.1
	SPCOLTRIN:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.07.13.20.06.14;	author knu;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.20.41.51;	author knu;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.24.16.00.54;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.17.16.13.34;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.16.22.07.29;	author knu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.16.22.07.29;	author knu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Import the "digest" module and the submodules, from the Rough Ruby
project.

  ext/digest:
    This module provides the module Digest and the abstract class
    Digest::Base.

  ext/digest/md5 (which obsoletes ext/md5):
    This module provides the class Digest::MD5 which implements the
    MD5 Message-Digest Algorithm.

  ext/digest/rmd160:
    This module provides the class Digest::RMD160 which implements the
    RIPEMD-160 cryptographic hash function.

  ext/digest/sha1 (which obsoletes ext/sha1):
    This module provides the class Digest::SHA1 which implements the
    SHA-1 Secure Hash Algorithm.

  ext/digest/sha2:
    This module provides the classes Digest::SHA256, Digest::SHA384
    and Digest::SHA512 which implement the SHA-256, SHA-384 and
    SHA-512 Secure Hash Algorithms, respectively.

  lib/md5.rb, lib/sha1.rb:
    These files are provided for backward compatibility.

All these classes have the common API, which previously ext/md5 and
ext/sha1 modules provided.  While the new API keeps 100% backward
compatibility, it has been enriched with several utility methods.

Read digest.txt for further details.
@
text
@#include "ruby.h"
#include "sha1.h"

static VALUE cSHA1;

static VALUE
sha1_update(obj, str)
    VALUE obj;
    struct RString *str;
{
    SHA1_CTX *sha1;

    Check_Type(str, T_STRING);
    Data_Get_Struct(obj, SHA1_CTX, sha1);
    SHA1Update(sha1, str->ptr, str->len);

    return obj;
}

static VALUE
sha1_digest(obj)
    VALUE obj;
{
    SHA1_CTX *sha1, ctx;
    unsigned char digest[20];

    Data_Get_Struct(obj, SHA1_CTX, sha1);
    ctx = *sha1;
    SHA1Final(digest, &ctx);

    return rb_str_new(digest, 20);
}

static VALUE
sha1_hexdigest(obj)
    VALUE obj;
{
    SHA1_CTX *sha1, ctx;
    unsigned char digest[20];
    char buf[41];
    int i;

    Data_Get_Struct(obj, SHA1_CTX, sha1);
    ctx = *sha1;
    SHA1Final(digest, &ctx);

    for (i=0; i<20; i++) {
	sprintf(buf+i*2, "%02x", digest[i]);
    }
    return rb_str_new(buf, 40);
}

static VALUE
sha1_clone(obj)
    VALUE obj;
{
    SHA1_CTX *sha1, *sha1_new;

    Data_Get_Struct(obj, SHA1_CTX, sha1);
    obj = Data_Make_Struct(CLASS_OF(obj), SHA1_CTX, 0, free, sha1_new);
    *sha1_new = *sha1;

    return obj;
}

static VALUE
sha1_init(argc, argv, self)
    int argc;
    VALUE* argv;
    VALUE self;
{
    VALUE arg;

    rb_scan_args(argc, argv, "01", &arg);

    if (!NIL_P(arg)) sha1_update(self, arg);

    return self;
}

static VALUE
sha1_new(argc, argv, class)
    int argc;
    VALUE* argv;
    VALUE class;
{
    VALUE obj;
    SHA1_CTX *sha1;

    obj = Data_Make_Struct(class, SHA1_CTX, 0, free, sha1);
    SHA1Init(sha1);
    rb_obj_call_init(obj, argc, argv);

    return obj;
}

void
Init_sha1()
{
    cSHA1 = rb_define_class("SHA1", rb_cObject);

    rb_define_singleton_method(cSHA1, "new", sha1_new, -1);
    rb_define_singleton_method(cSHA1, "sha1", sha1_new, -1);

    rb_define_method(cSHA1, "update", sha1_update, 1);
    rb_define_method(cSHA1, "initialize", sha1_init, -1);
    rb_define_method(cSHA1, "<<", sha1_update, 1);
    rb_define_method(cSHA1, "digest", sha1_digest, 0);
    rb_define_method(cSHA1, "hexdigest", sha1_hexdigest, 0);
    rb_define_method(cSHA1, "clone",  sha1_clone, 0);
}
@


1.4
log
@* ext/sha1/sha1-ruby.c (sha1_hexdigest): fix buffer overflow.  The
  buffer for a SHA-1 hexdigest needs to be 41 bytes in length.
@
text
@@


1.3
log
@* ext/sha1/sha1-ruby.c (md5i_new): separate initialize() from
  new().

* ext/md5/md5init.c (sha1_new): ditto.
@
text
@d40 1
a40 1
    char buf[33];
@


1.2
log
@* ext/sha1/sha1-ruby.c (sha1_new): get rid of an unneeded
  rb_obj_call_init() call.
@
text
@d67 15
d87 1
a87 1
    VALUE arg, obj;
a89 3
    rb_scan_args(argc, argv, "01", &arg);
    if (!NIL_P(arg)) Check_Type(arg, T_STRING);

d92 1
a92 3
    if (!NIL_P(arg)) {
	sha1_update(obj, arg);
    }
d106 1
@


1.1
log
@Initial revision
@
text
@a78 1
    rb_obj_call_init(obj, argc, argv);
@


1.1.1.1
log
@This is the initial import of Steve Coltrin's SHA1 module.
@
text
@@
