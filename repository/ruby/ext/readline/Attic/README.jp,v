head	1.3;
access;
symbols
	ruby_1_6:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2001.07.19.05.42.07;	author knu;	state dead;
branches;
next	1.2;

1.2
date	2001.07.05.15.47.03;	author knu;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.07.02.08.46.26;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2001.07.05.15.54.00;	author knu;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.07.19.05.44.26;	author knu;	state dead;
branches;
next	;


desc
@@


1.3
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@GNU Readline Libraryを利用するための拡張モジュールです。

require "readline"
include Readline

line = readline("Prompt> ", true)

のように使用してください。

[Readline]

<モジュール関数>

readline(prompt, add_history=nil)

  一行入力を読み込みます。
  add_historyがtrueの場合、ヒストリに読み込んだ文字列を追加します。

<クラスメソッド>

completion_proc = proc

  補完時の動作を決定するProcオブジェクトを指定します。
  procは引数に入力文字列を取り、候補文字列の配列を返すように
  してください。

completion_proc

  補完時の動作を決定するProcオブジェクトを返します。

completion_case_fold = case_fold

  補完時に大文字小文字を区別しない場合、trueを指定します。

completion_case_fold

  補完時に大文字小文字を区別しない場合、trueを返します。

completion_append_character = char

  補完時に付加される文字を文字列で指定します。先頭の一文字が
  設定され、空文字列 ("") または nil を指定すると何も付加
  されなくなります。

completion_append_character

  補完時に付加される文字を文字列で返します。デフォルトは
  空白 (" ") です。

vi_editing_mode

  VIモードになります。

emacs_editing_mode

  Emacsモードになります。

<クラス定数>

HISTORY

ヒストリに対する操作はこの定数を通して行ってください。
配列と同じように扱えるようになっています。
@


1.2
log
@Detypo and reword a bit.
@
text
@@


1.2.2.1
log
@* ext/readline/readline.c (readline_event): merge from 1.7: a
  non-void function should return a value.

* ext/readline/readline.c: merge from 1.7: add new methods:
  Readline::completion_append_character and
  Readline::completion_append_character=.

* ext/readline/README, ext/readline/README.jp: merge from 1.7: add
  an English version of the document.
@
text
@@


1.2.2.2
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@@


1.1
log
@* error.c (exc_exception): clone the receiver exception instead of
  creating brand new exception object of the receiver.

* eval.c (rb_eval_string_wrap): extend new ruby_top_self, not
  original self.

* eval.c (rb_eval_cmd): respect ruby_wrapper if set.

* eval.c (eval): do not update ruby_class unless scope is not
  provided.

* eval.c (eval): preserve wrapper information.

* eval.c (proc_invoke): ditto.

* eval.c (block_pass): ditto.

* parse.y (void_expr): too much warnings for void context
  (e.g. foo[1] that can be mere Proc call).

* error.c (rb_name_error): new function to raise NameError with
  name attribute set.

* eval.c (rb_f_missing): set name and args in the exception
  object. [new]

* error.c (name_name): NameError#name - new method.

* error.c (nometh_args): NoMethodError#args - new method.

* lex.c (rb_reserved_word): lex_state after tRESCUE should be
  EXPR_MID.

* gc.c (add_heap): allocation size of the heap unit is doubled for
  each allocation.

* dir.c (isdelim): space, tab, and newline are no longer
  delimiters for glob patterns.

* eval.c (svalue_to_avalue): new conversion scheme between single
  value and array values.

* eval.c (avalue_to_svalue): ditto.

* eval.c (rb_eval): REXPAND now uses avalue_to_svalue(), return
  and yield too.

* eval.c (rb_yield_0): use avalue_to_svalue().

* eval.c (proc_invoke): Proc#call gives avaules, whereas
  Proc#yield gives mvalues.

* eval.c (bmcall): convert given value (svalue) to avalue.
@
text
@d14 1
a14 1
readline(prompt, add=nil)
d17 1
a17 1
  addがtrueの場合、ヒストリに読み込んだ文字列を追加します。
@

