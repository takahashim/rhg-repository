head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2002.07.11.08.22.12;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.11.14.44.53;	author ttate;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.01.27.47;	author H_Konishi;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.03.11.59.01;	author ttate;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.02.12.06.23;	author ttate;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.02.10.56.13;	author ttate;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* string.c (rb_str_slice_bang): if there's no corresponding
  substring, slice! should return nil without exception.

* array.c (rb_ary_insert): type fixed.

* string.c (rb_str_split_m): accept separator value nil as well.

* string.c (rb_str_become): was leaking memory.

* class.c (rb_include_module): should not alter other
  classes/modules by inclusion.  by this fix, local order may not
  be preserved for some cases.

* class.c (include_class_new): module may be T_ICLASS; retrieve
  original module information.
@
text
@CLEANFILES = test/test.o
DISTCLEANFILES = call.func callback.func cbtable.func dlconfig.rb dlconfig.h \
                 test/libtest.so test/*~ *~ mkmf.log
LDSHARED_TEST = $(LDSHARED) $(LDFLAGS) test/test.o -o test/libtest.so $(LOCAL_LIBS)

libtest.so: test/libtest.so

test/libtest.so: test/test.o $(srcdir)/test/libtest.def
	$(RUBY) -rftools -e 'ARGV.each do|d|File.mkpath(File.dirname(d))end' $@@
	$(LDSHARED_TEST:dl.def=test/libtest.def)

test/test.o: $(srcdir)/test/test.c
	@@$(RUBY) -rftools -e 'File.mkpath(*ARGV)' test
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(srcdir)/test/test.c -o $@@

test:: dl.so libtest.so force
	$(RUBY) -I. -I$(srcdir)/lib $(srcdir)/test/test.rb

force:

.PHONY: force test

allclean: distclean
	@@rm -f $(CLEANFILES) $(DISTCLEANFILES)

$(OBJS): ./dlconfig.h

sym.o: dl.h call.func

dl.o: dl.h callback.func cbtable.func

ptr.o: dl.h

handle.o: dl.h

call.func: $(srcdir)/mkcall.rb ./dlconfig.rb
	@@echo "Generating call.func"
	@@$(RUBY) $(srcdir)/mkcall.rb > $@@

callback.func: $(srcdir)/mkcallback.rb ./dlconfig.rb
	@@echo "Generating callback.func"
	@@$(RUBY) $(srcdir)/mkcallback.rb > $@@

cbtable.func: $(srcdir)/mkcbtable.rb ./dlconfig.rb
	@@echo "Generating cbtable.func"
	@@$(RUBY) $(srcdir)/mkcbtable.rb > $@@

debug:
	$(MAKE) CPPFLAGS="$(CPPFLAGS) -DDEBUG"
@


1.5
log
@Get rid of STR2CSTR. (Thanks N.Nakada)
@
text
@d28 1
a28 1
sym.o: call.func
d30 5
a34 1
dl.o: callback.func cbtable.func
@


1.4
log
@new platform [bccwin32] merged.
@
text
@d8 1
a8 1
test/libtest.so: test/test.o test/libtest.def
@


1.3
log
@Merge Nakada's patch and define StringValuePtr for ruby-1.6.
CV ----------------------------------------------------------------------
@
text
@d9 1
a9 1
	$(RUBY) -rftools -e 'ARGV.each{|d|File.mkpath(File.dirname(d))}' $@@
d16 1
a16 1
test:: dl.so libtest.so .force
d19 1
a19 1
.force:
d21 1
a21 1
.PHONY: .force test
@


1.2
log
@Get rid of the RUBY, and use CPPFLAGS="$(CPPFLAGS) -DDEBUG"
in the debug phase. (Thanks Nakada)
@
text
@d4 1
d10 1
a10 1
	`$(RUBY) -e 'print ARGV.join(" ").gsub(/dl\\.def/,"test/libtest.def")' $(LDSHARED)` $(LDFLAGS) test/test.o -o test/libtest.so
d12 1
a12 1
test/test.o: test/test.c
d14 1
a14 1
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@@
d26 1
a26 1
$(OBJS): dlconfig.h
d32 1
a32 1
call.func: mkcall.rb dlconfig.rb
d34 1
a34 1
	@@$(RUBY) $< > $@@
d36 1
a36 1
callback.func: mkcallback.rb dlconfig.rb
d38 1
a38 1
	@@$(RUBY) $< > $@@
d40 1
a40 1
cbtable.func: mkcbtable.rb dlconfig.rb
d42 1
a42 1
	@@$(RUBY) $< > $@@
@


1.1
log
@Add ruby-dl
@
text
@a0 1
RUBY = $(RUBY_INSTALL_NAME)$(EXEEXT)
d44 1
a44 1
	$(MAKE) CFLAGS+=-DDEBUG
@
