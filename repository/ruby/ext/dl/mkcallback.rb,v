head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2002.06.24.07.20.10;	author nobu;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.11.14.54.51;	author ttate;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.11.14.44.53;	author ttate;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.11.11.16.56;	author ttate;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.09.17.47.33;	author ttate;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.02.10.56.13;	author ttate;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* eval.c (rb_eval): NODE_EVSTR is no longer used.

* eval.c (eval): not enforce to make assigned variables dynamic.

* parse.y (string): split rules to strings/xstring/regexp to allow
  arbitrary statements inside string interpolation.

* parse.y (here_document): splitted into three phases.

* parse.y (literall_append, literal_concat): added.
  append/concatinate string literals.

* sample/test.rb (valid_syntax): adjust line number for BEGIN.
@
text
@# -*- ruby -*-

require 'mkmf'
$:.unshift File.dirname(__FILE__)
require 'type'
require 'dlconfig'

def mkfunc(rettype, fnum, argc)
  args = (0..(argc-1)).collect{|i| "long arg#{i}"}.join(", ")

  subst_code = (0..(argc-1)).collect{|i|
    "  buff[#{i.to_s}] = arg#{i.to_s};"
  }.join("\n")

  ret_code =
    if( DLTYPE[rettype][:c2rb] )
      "  return #{DLTYPE[rettype][:rb2c]['retval']};"
    else
      "  /* no return value */"
    end

  code = [
    "static #{DLTYPE[rettype][:ctype]}",
    "rb_dl_callback_func_#{rettype.to_s}_#{fnum.to_s}(#{args})",
    "{",
    "  VALUE retval, proto, proc, obj;",
    "  VALUE argv[#{argc.to_s}];",
    "  int  argc;",
    "  long buff[#{argc.to_s}];",
    "",
    subst_code,
    "",
    "  obj = rb_hash_aref(DLFuncTable, rb_assoc_new(INT2NUM(#{rettype.to_s}),INT2NUM(#{fnum.to_s})));",
    "  proto = rb_ary_entry(obj, 0);",
    "  proc  = rb_ary_entry(obj, 1);",
    "  Check_Type(proto, T_STRING);",
    "  if( RSTRING(proto)->len >= #{argc.to_s} )",
    "    rb_raise(rb_eArgError, \"too many arguments\");",
    "  rb_dl_scan_callback_args(buff, RSTRING(proto)->ptr, &argc, argv);",
    "  retval = rb_funcall2(proc, id_call, argc, argv);",
    "",
    ret_code,
    "}",
  ].join("\n")

  return code
end

DLTYPE.keys.sort.each{|t|
  for n in 0..(MAX_CALLBACK - 1)
    print(mkfunc(t, n, 15), "\n\n")
  end
}
@


1.5
log
@Check the length of proto.
@
text
@d17 1
a17 1
      "  return #{DLTYPE[rettype][:rb2c][\"retval\"]};"
@


1.4
log
@Get rid of STR2CSTR. (Thanks N.Nakada)
@
text
@d37 2
@


1.3
log
@bugfix. (Thanks U.Nakamura)
@
text
@d36 2
a37 1
    "  rb_dl_scan_callback_args(buff, STR2CSTR(proto), &argc, argv);",
@


1.2
log
@* ext/dl: change the callback mechanism.
@
text
@d36 1
a36 1
    "  rb_dl_scan_callback_args(buff, STR2CSTR(proto), &argc, &argv);",
@


1.1
log
@Add ruby-dl
@
text
@d8 2
a9 58
$int_eq_long = try_run(<<EOF)
int main() {
  return sizeof(int) == sizeof(long) ? 0 : 1;
}
EOF

def func_arg(x,i)
  ctype = DLTYPE[x][:ctype]
  "#{ctype} arg#{i}"
end

def func_args(types)
  t = []
  types[1..-1].each_with_index{|x,i| t.push(func_arg(x,i))}
  t.join(", ")
end

def funcall_args(types)
  num = types.length - 1
  if( num > 0 )
    t = []
    types[1..-1].each_with_index{|x,i| t.push(DLTYPE[x][:c2rb].call("arg#{i}"))}
    return num.to_s + ", " + t.join(", ")
  else
    return num.to_s
  end
end

def output_func(types, n = 0)
  func_name = "rb_dl_func#{types2num(types)}_#{n}"
  code =
    "#{func_name}(#{func_args(types)}) /* #{types2ctypes(types).inspect} */\n" +
    "{\n" +
    "  VALUE val, obj;\n" +
    "#ifdef DEBUG\n" +
    "  printf(\"#{func_name}()\\n\");\n" +
    "#endif\n" +
    "  obj = rb_hash_aref(DLFuncTable, INT2NUM(#{types2num(types)}));\n" +
    "  obj = rb_hash_aref(obj,INT2NUM(#{n}));\n" +
    "  val = rb_funcall(obj, id_call,\n" +
    "                   #{funcall_args(types)});\n"

  rtype = DLTYPE[types[0]][:ctype]
  rcode = DLTYPE[types[0]][:rb2c]
  if( rcode )
    code += "  return #{rcode.call('val')};\n"
  end

  code =
    rtype + "\n" +
    code +
    "}\n\n"
  if( n < MAX_CBENT - 1)
    return code + output_func(types, n+1)
  else
    return code
  end
end
d11 31
d43 1
a43 9
def rec_output(types = [VOID])
  print output_func(types)
  if( types.length <= MAX_CBARG )
    DLTYPE.keys.sort.each{|t|
      if( t != VOID && DLTYPE[t][:cb] )
	rec_output(types + [t])
      end
    }
  end
d47 2
a48 2
  if( DLTYPE[t][:cb] )
    rec_output([t])
@
