head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	2002.05.20.15.35.48;	author ttate;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.11.08.07.01;	author ttate;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.11.06.55.12;	author ttate;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.11.06.35.48;	author ttate;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.11.03.06.33;	author ttate;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.10.14.13.39;	author ttate;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.05.05.11.11;	author ttate;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rename PtrData::alloc and Struct#alloc to malloc respectively.
@
text
@# -*- ruby -*-

require 'dl'
require 'dl/import'

module DL
  module Importable
    module Internal
      def define_struct(contents)
	init_types()
	Struct.new(@@types, contents)
      end
      alias struct define_struct

      def define_union(contents)
	init_types()
	Union.new(@@types, contents)
      end
      alias union define_union

      class Memory
	def initialize(ptr, names, ty, len, enc, dec)
	  @@ptr = ptr
	  @@names = names
	  @@ty    = ty
	  @@len   = len
	  @@enc   = enc
	  @@dec   = dec

	  # define methods
	  @@names.each{|name|
	    instance_eval [
	      "def #{name}",
	      "  v = @@ptr[\"#{name}\"]",
	      "  v = @@dec[\"#{name}\"].call(v,@@len[\"#{name}\"]) if @@dec[\"#{name}\"]",
	      "  return v",
	      "end",
	      "def #{name}=(v)",
	      "  v = @@enc[\"#{name}\"].call(v,@@len[\"#{name}\"]) if @@enc[\"#{name}\"]",
	      "  @@ptr[\"#{name}\"] = v",
	      "  return v",
	      "end",
	    ].join("\n")
	  }
	end

	def to_ptr
	  return @@ptr
	end

	def size
	  return @@ptr.size
	end
      end

      class Struct
	def initialize(types, contents)
	  @@names = []
	  @@ty   = {}
	  @@len  = {}
	  @@enc  = {}
	  @@dec  = {}
	  @@size = 0
	  @@tys  = ""
	  @@types = types
	  parse(contents)
	end

	def size
	  return @@size
	end

	def members
	  return @@names
	end

	# ptr must be a PtrData object.
	def new(ptr)
	  ptr.struct!(@@tys, *@@names)
	  mem = Memory.new(ptr, @@names, @@ty, @@len, @@enc, @@dec)
	  return mem
	end

	def malloc(size = nil)
	  if( !size )
	    size = @@size
	  end
	  ptr = DL::malloc(size)
	  return new(ptr)
	end

	def parse(contents)
	  contents.each{|elem|
	    name,ty,num,enc,dec = parse_elem(elem)
	    @@names.push(name)
	    @@ty[name]  = ty
	    @@len[name] = num
	    @@enc[name] = enc
	    @@dec[name] = dec
	    if( num )
	      @@tys += "#{ty}#{num}"
	    else
	      @@tys += ty
	    end
	  }
	  @@size = DL.sizeof(@@tys)
	end
	
	def parse_elem(elem)
	  elem.strip!
	  case elem
	  when /^([\w\d_\*]+)([\*\s]+)([\w\d_]+)$/
	    ty = ($1 + $2).strip
	    name = $3
	    num = nil;
	  when /^([\w\d_\*]+)([\*\s]+)([\w\d_]+)\[(\d+)\]$/
	    ty = ($1 + $2).strip
	    name = $3
	    num = $4.to_i
	  else
	    raise(RuntimeError, "invalid element: #{elem}")
	  end
	  ty,_,_,enc,dec = @@types.encode_type(ty)
	  return [name,ty,num,enc,dec]
	end
      end  # class Struct
      
      class Union < Struct
	def new
	  ptr = DL::malloc(@@size)
	  ptr.union!(@@tys, *@@names)
	  mem = Memory.new(ptr, @@names, @@ty, @@len, @@enc, @@dec)
	  return mem
	end
      end
    end  # module Internal
  end  # module Importable
end  # module DL
@


1.6
log
@Add DL::Importable::Internal::Struct#alloc.
@
text
@d84 1
a84 1
	def alloc(size = nil)
@


1.5
log
@remove README and README.html
@
text
@d77 8
a84 1
	def new(size = nil)
d89 1
a89 3
	  ptr.struct!(@@tys, *@@names)
	  mem = Memory.new(ptr, @@names, @@ty, @@len, @@enc, @@dec)
	  return mem
@


1.4
log
@Support "unsigned short".
@
text
@d50 4
d67 8
@


1.3
log
@define alias "struct" and "union" in the module Importable.
@
text
@d46 4
@


1.2
log
@Implement the substitution for structure members.
@
text
@d13 1
d19 1
d61 5
a65 2
	def new
	  ptr = DL::malloc(@@size)
@


1.1
log
@Add dl/struct.rb.
@
text
@d33 6
a38 1
	      "  v = @@dec[\"#{name}\"].call(v,#{@@len}) if @@dec[\"#{name}\"]",
@
