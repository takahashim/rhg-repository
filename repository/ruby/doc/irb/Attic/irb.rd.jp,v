head	1.5;
access;
symbols
	v1_6_4:1.1.2.4
	v1_7_1:1.3
	v1_6_4_preview4:1.1.2.3
	v1_6_4_preview3:1.1.2.3
	ruby_1_6:1.1.0.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2001.07.19.05.42.06;	author knu;	state dead;
branches;
next	1.4;

1.4
date	2001.06.01.15.21.37;	author keiju;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.07.23.52.57;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.07.23.34.33;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.07.23.35.09;	author knu;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.05.07.23.59.00;	author knu;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.06.01.15.26.47;	author keiju;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.07.19.05.44.25;	author knu;	state dead;
branches;
next	;


desc
@@


1.5
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@irb -- interactive ruby
				$Release Version: 0.6 $
			   	$Revision: 1.4 $
			   	$Date: 2001/06/01 15:21:37 $
			   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
=begin
= irbとは?

irbはinteractive rubyの略です. rubyの式を標準入力から簡単に入力/実行す
るためのツールです.

= 起動

  % ruby -r irb -e0
  % irb

のいずれかで行ないます. 前者の場合irbへのオプション指定は, 以下のように
なります.

  % ruby -r irb -e0 -- -v

= 使い方

irbの使い方は, Rubyさえ知っていればいたって簡単です. 基本的には irb と
いうコマンドを実行するだけです. irbを実行すると, 以下のようなプロンプ
トが表れてきます. 後は, rubyの式を入れて下さい. 式が完結した時点で実行
されます.

  dim% irb
  irb(main):001:0> 1+2
  3
  irb(main):002:0> class Foo
  irb(main):003:1>  def foo
  irb(main):004:2>    print 1
  irb(main):005:2>  end
  irb(main):006:1> end
  nil
  irb(main):007:0> 

また, irbはReadlineモジュールにも対応しています. Readlineモジュールが
インストールされている時には, それを使うのが標準の動作になります.

= コマンドオプション

  irb.rb [options] file_name opts
  options:
  -f		    ~/.irbrc を読み込まない.
  -m		    bcモード(分数, 行列の計算ができる)
  -d                $DEBUG をtrueにする(ruby -d と同じ)
  -r load-module    ruby -r と同じ.
  --inspect	    結果出力にinspectを用いる(bcモード以外はデフォルト). 
  --noinspect	    結果出力にinspectを用いない.
  --readline	    readlineライブラリを利用する.
  --noreadline	    readlineライブラリを利用しない. デフォルトの動作は,
		    inf-reuby-mode以外でreadlineライブラリを利用しよう
		    とする. 
  --prompt prompt-mode
  --prompt-mode prompt-mode
		    プロンプトモードを切替えます. 現在定義されているプ
		    ロンプトモードは, default, simple, xmp, inf-rubyが
		    用意されています. デフォルトはdefaultプロンプトモー
		    ドになっています.
			    
  --inf-ruby-mode   emacsのinf-ruby-mode用のプロンプト表示を行なう. 特
		    に指定がない限り, readlineライブラリは使わなくなる.
  --simple-prompt
		    非常にシンプルなプロンプトを用いるモードです.
  --noprompt	    プロンプト表示を行なわない.
  --tracer	    コマンド実行時にトレースを行なう.
  --back-trace-limit n
		    バックトレース表示をバックトレースの頭から n, 後ろ
		    からnだけ行なう. デフォルトは16 
  --irb_debug n	    irbのデバッグデバッグレベルをnに設定する(利用しな
		    い方が無難でしょう).
  -v, --version	    irbのバージョンを表示する

= コンフィギュレーション

irb起動時に``~/.irbrc''を読み込みます. もし存在しない場合は,
``.irbrc'', ``irb.rc'', ``_irbrc'', ``$irbrc''の順にloadを試みます.

オプションを設定する代わりに, 以下のコマンドでもデフォルトの動作を設定
できます.

  IRB.conf[:IRB_NAME]="irb"
  IRB.conf[:MATH_MODE]=false
  IRB.conf[:USE_TRACER]=false
  IRB.conf[:USE_LOADER]=false
  IRB.conf[:IGNORE_SIGINT]=true
  IRB.conf[:IGNORE_EOF]=false
  IRB.conf[:INSPECT_MODE]=nil
  IRB.conf[:IRB_RC] = nil
  IRB.conf[:BACK_TRACE_LIMIT]=16
  IRB.conf[:USE_LOADER] = false
  IRB.conf[:USE_READLINE] = nil
  IRB.conf[:USE_TRACER] = false
  IRB.conf[:IGNORE_SIGINT] = true
  IRB.conf[:IGNORE_EOF] = false
  IRB.conf[:PROMPT_MODE] = :DEFALUT
  IRB.conf[:PROMPT] = {...}
  IRB.conf[:DEBUG_LEVEL]=0
  IRB.conf[:VERBOSE]=true

== プロンプトの設定

プロンプトをカスタマイズしたい時には, 

   IRB.conf[:PROMPT]

を用います. 例えば, .irbrcの中で下のような式を記述します:

   IRB.conf[:PROMPT][:MY_PROMPT] = { # プロンプトモードの名前
     :PROMPT_I => nil,		  # 通常のプロンプト
     :PROMPT_S => nil,		  # 文字列などの継続行のプロンプト
     :PROMPT_C => nil,		  # 式が継続している時のプロンプト
     :RETURN => "    ==>%s\n"	  # リターン時のプロンプト
   }

プロンプトモードを指定したい時には,

  irb --prompt my-prompt

でそのプロンプトモードで起動されます. または, .irbrcに下式を記述しても
OKです.

  IRB.conf[:PROMPT_MODE] = :MY_PROMPT

PROMPT_I, PROMPT_S, PROMPT_Cは, フォーマットを指定します.

  %N	起動しているコマンド名が出力される.
  %m	mainオブジェクト(self)がto_sで出力される.
  %M	mainオブジェクト(self)がinspectされて出力される.
  %l	文字列中のタイプを表す(", ', /, ], `]'は%wの中の時)
  %NNi	インデントのレベルを表す. NNは数字が入りprintfの%NNdと同じ. 省
	略可能
  %NNn	行番号を表します.
  %%    %

例えば, デフォルトのプロンプトモードは:

  IRB.conf[:PROMPT_MODE][:DEFAULT] = {
      :PROMPT_I => "%N(%m):%03n:%i> ",
      :PROMPT_S => "%N(%m):%03n:%i%l ",
      :PROMPT_C => "%N(%m):%03n:%i* ",
      :RETURN => "%s\n"
  } 

となっています.

RETURNは, 現在のところprintf形式です. 将来仕様が変わるかも知れません.

== サブirbの設定

コマンドラインオプションおよびIRB.confは(サブ)irb起動時のデフォルトの
設定を決めるもので, `5. コマンド'にあるconfで個別の(サブ)irbの設定がで
きるようになっています.

IRB.conf[:IRB_RC]にprocが設定されていると, サブirbを起動する時にその
procをirbのコンテキストを引数として呼び出します. これによって個別のサ
ブirbごとに設定を変えることができるようになります.


= コマンド

irb拡張コマンドは, 簡単な名前と頭に`irb_'をつけた名前と両方定義されて
います. これは, 簡単な名前がoverrideされた時のためです.

--- exit, quit, irb_exit	
    終了する. 
    サブirbの場合, そのサブirbを終了する.
    cbしている場合, そのバインディングのモードを終了する.

--- conf, irb_context
    irbの現在の設定を表示する. 設定の変更は, confにメッセージを送るこ
    とによって行なえる. 

--- conf.back_trace_limit
    バックトレース表示をバックトレースの頭からn, 後ろからnだけ行なう.
    デフォルトは16
    
--- conf.debug_level = N
    irb用のデバッグレベルの設定

--- conf.ignore_eof = true/false
    ^Dが入力された時の動作を設定する. trueの時は^Dを無視する, falseの
    時はirbを終了する. 

--- conf.ignore_sigint= true/false
    ^Cが入力された時の動作を設定する. false時は, irbを終了する. trueの
    時の動作は以下のようになる:
      入力中: これまで入力したものをキャンセルしトップレベルに戻る. 
      実行中: 実行を中止する.

--- conf.inf_ruby_mode = true/false
    inf-ruby-mode用のプロンプト表示を行なう. デフォルトはfalse.

--- conf.inspect_mode = true/false/nil
    インスペクトモードを設定する.
    true: インスペクトして表示する.
    false: 通常のprintで表示する.
    nil: 通常モードであれば, inspect modeとなり, mathモードの時は, non
	 inspect modeとなる.   

--- conf.irb_level
    参照のみ. irbが何段cbしているか?

--- conf.math_mode
    参照のみ. bcモード(分数, 行列の計算ができます)かどうか?

--- conf.use_loader = true/false
    load/require時にirbのfile読み込み機能を用いるモードのスイッチ(デフォ
    ルトは用いない). このモードはIRB全体に反映される.

--- conf.prompt_c
    ifの直後など, 行が継続している時のプロンプト.

--- conf.prompt_i
    通常のプロンプト.

--- conf.prompt_s
    文字列中などを表すプロンプト.

--- conf.rc
    ~/.irbrcを読み込んだかどうか?

--- conf.use_prompt = true/false
    プロンプト表示するかどうか? デフォルトではプロンプトを表示する.

--- conf.use_readline = true/false/nil
    readlineを使うかどうか?
    true: readlineを使う.
    false: readlineを使わない.
    nil: (デフォルト)inf-reuby-mode以外でreadlineライブラリを利用しよ
         うとする.  

--- conf.verbose=T/F
    irbからいろいろなメッセージを出力するか?

--- cb, irb_change_binding [obj]
    ローカル変数のスコープが違う新たなbindingに移る.  objが指定された
    時は, そのobjをselfとする. 

--- irb [obj]
    サブirbを立ちあげる. objが指定された時は, そのobjをselfとする.

--- jobs, irb_jobs
    サブirbのリスト

--- fg n, irb_fg n
    指定したサブirbにスイッチする. nは, 次のものを指定する.

      irb番号
      スレッド
      irbオブジェクト
      self(irb objで起動した時のobj)

--- kill n, irb_kill n
      サブirbをkillする. nはfgと同じ.


= システム変数

   _  前の計算の実行結果を覚えている(ローカル変数).

=  使用例

以下のような感じです.

  dim% ruby irb.rb
  irb(main):001:0> irb                        # サブirbの立ちあげ
  irb#1(main):001:0> jobs                     # サブirbのリスト
  #0->irb on main (#<Thread:0x400fb7e4> : stop)
  #1->irb#1 on main (#<Thread:0x40125d64> : running)
  nil
  irb#1(main):002:0> fg 0                     # jobのスイッチ
  nil
  irb(main):002:0> class Foo;end
  nil
  irb(main):003:0> irb Foo                    # Fooをコンテキストしてirb
					      # 立ちあげ
  irb#2(Foo):001:0> def foo                   # Foo#fooの定義
  irb#2(Foo):002:1>   print 1
  irb#2(Foo):003:1> end
  nil
  irb#2(Foo):004:0> fg 0                      # jobをスイッチ
  nil
  irb(main):004:0> jobs                       # jobのリスト
  #0->irb on main (#<Thread:0x400fb7e4> : running)
  #1->irb#1 on main (#<Thread:0x40125d64> : stop)
  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)
  nil
  irb(main):005:0> Foo.instance_methods       # Foo#fooがちゃんと定義さ
					      # れている
  ["foo"]
  irb(main):006:0> fg 2                       # jobをスイッチ
  nil
  irb#2(Foo):005:0> def bar                   # Foo#barを定義
  irb#2(Foo):006:1>  print "bar"
  irb#2(Foo):007:1> end
  nil
  irb#2(Foo):010:0>  Foo.instance_methods
  ["bar", "foo"]
  irb#2(Foo):011:0> fg 0                      
  nil
  irb(main):007:0> f = Foo.new
  #<Foo:0x4010af3c>
  irb(main):008:0> irb f                      # Fooのインスタンスでirbを
					      # 立ちあげる.
  irb#3(#<Foo:0x4010af3c>):001:0> jobs
  #0->irb on main (#<Thread:0x400fb7e4> : stop)
  #1->irb#1 on main (#<Thread:0x40125d64> : stop)
  #2->irb#2 on Foo (#<Thread:0x4011d54c> : stop)
  #3->irb#3 on #<Foo:0x4010af3c> (#<Thread:0x4010a1e0> : running)
  nil
  irb#3(#<Foo:0x4010af3c>):002:0> foo         # f.fooの実行
  nil
  irb#3(#<Foo:0x4010af3c>):003:0> bar         # f.barの実行
  barnil
  irb#3(#<Foo:0x4010af3c>):004:0> kill 1, 2, 3# jobのkill
  nil
  irb(main):009:0> jobs
  #0->irb on main (#<Thread:0x400fb7e4> : running)
  nil
  irb(main):010:0> exit                       # 終了
  dim% 

= 使用上の制限

irbは, 評価できる時点(式が閉じた時点)での逐次実行を行ないます. したがっ
て, rubyを直接使った時と, 若干異なる動作を行なう場合があります.

現在明らかになっている問題点を説明します.

== ローカル変数の宣言

rubyでは, 以下のプログラムはエラーになります.

  eval "foo = 0"
  foo
  --
  -:2: undefined local variable or method `foo' for #<Object:0x40283118> (NameError)
  ---
  NameError

ところが, irbを用いると

  >> eval "foo = 0"
  => 0
  >> foo
  => 0

となり, エラーを起こしません. これは, rubyが最初にスクリプト全体をコン
パイルしてローカル変数を決定するからです. それに対し, irbは実行可能に
なる(式が閉じる)と自動的に評価しているからです. 上記の例では, 

  evel "foo = 0" 

を行なった時点で評価を行ない, その時点で変数が定義されるため, 次式で 
変数fooは定義されているからです.

このようなrubyとirbの動作の違いを解決したい場合は, begin...endで括って
バッチ的に実行して下さい:

  >> begin
  ?>   eval "foo = 0"
  >>   foo
  >> end
  NameError: undefined local variable or method `foo' for #<Object:0x4013d0f0>
  (irb):3
  (irb_local_binding):1:in `eval'

== ヒアドキュメント

現在のところヒアドキュメントの実装は不完全です. 

== シンボル

シンボルであるかどうかの判断を間違えることがあります. 具体的には式が完了
しているのに継続行と見なすことがあります.

=end

% Begin Emacs Environment
% Local Variables:
% mode: text
% comment-column: 0
% comment-start: "%"
% comment-end: "\n"
% End:
%

@


1.4
log
@
* irb messages: fix typos.
@
text
@d3 2
a4 2
			   	$Revision: 1.3 $
			   	$Date: 2001/05/07 23:52:57 $
@


1.3
log
@Hit `=begin' and `=end' in proper places so rd2 can format them
without a problem.
@
text
@d3 2
a4 2
			   	$Revision: 1.2 $
			   	$Date: 2001/05/07 23:34:33 $
d60 1
a60 1
		    ロンプトモードは, defalut, simple, xmp, inf-rubyが
@


1.2
log
@Convert from JIS to EUC.
@
text
@d3 2
a4 2
			   	$Revision: 1.1 $
			   	$Date: 2001/04/30 17:38:22 $
d6 1
a6 1
==begin
d381 1
a381 1
==end
@


1.1
log
@Initial revision
@
text
@d3 2
a4 2
			   	$Revision: 1.18 $
			   	$Date: 2001/04/16 06:04:39 $
d7 1
a7 1
= irb$B$H$O(B?
d9 2
a10 2
irb$B$O(Binteractive ruby$B$NN,$G$9(B. ruby$B$N<0$rI8=`F~NO$+$i4JC1$KF~NO(B/$B<B9T$9(B
$B$k$?$a$N%D!<%k$G$9(B.
d12 1
a12 1
= $B5/F0(B
d17 2
a18 2
$B$N$$$:$l$+$G9T$J$$$^$9(B. $BA0<T$N>l9g(Birb$B$X$N%*%W%7%g%s;XDj$O(B, $B0J2<$N$h$&$K(B
$B$J$j$^$9(B.
d22 1
a22 1
= $B;H$$J}(B
d24 4
a27 4
irb$B$N;H$$J}$O(B, Ruby$B$5$(CN$C$F$$$l$P$$$?$C$F4JC1$G$9(B. $B4pK\E*$K$O(B irb $B$H(B
$B$$$&%3%^%s%I$r<B9T$9$k$@@$1$G$9(B. irb$B$r<B9T$9$k$H(B, $B0J2<$N$h$&$J%W%m%s%W(B
$B%H$,I=$l$F$-$^$9(B. $B8e$O(B, ruby$B$N<0$rF~$l$F2<$5$$(B. $B<0$,407k$7$?;~E@@$G<B9T(B
$B$5$l$^$9(B.
d40 2
a41 2
$B$^$?(B, irb$B$O(BReadline$B%b%8%e!<%k$K$bBP1~$7$F$$$^$9(B. Readline$B%b%8%e!<%k$,(B
$B%$%s%9%H!<%k$5$l$F$$$k;~$K$O(B, $B$=$l$r;H$&$N$,I8=`$NF0:n$K$J$j$^$9(B.
d43 1
a43 1
= $B%3%^%s%I%*%W%7%g%s(B
d47 10
a56 10
  -f		    ~/.irbrc $B$rFI$_9~$^$J$$(B.
  -m		    bc$B%b!<%I(B($BJ,?t(B, $B9TNs$N7W;;$,$G$-$k(B)
  -d                $DEBUG $B$r(Btrue$B$K$9$k(B(ruby -d $B$HF1$8(B)
  -r load-module    ruby -r $B$HF1$8(B.
  --inspect	    $B7k2L=PNO$K(Binspect$B$rMQ$$$k(B(bc$B%b!<%I0J30$O%G%U%)%k%H(B). 
  --noinspect	    $B7k2L=PNO$K(Binspect$B$rMQ$$$J$$(B.
  --readline	    readline$B%i%$%V%i%j$rMxMQ$9$k(B.
  --noreadline	    readline$B%i%$%V%i%j$rMxMQ$7$J$$(B. $B%G%U%)%k%H$NF0:n$O(B,
		    inf-reuby-mode$B0J30$G(Breadline$B%i%$%V%i%j$rMxMQ$7$h$&(B
		    $B$H$9$k(B. 
d59 4
a62 4
		    $B%W%m%s%W%H%b!<%I$r@@ZBX$($^$9(B. $B8=:_Dj5A$5$l$F$$$k%W(B
		    $B%m%s%W%H%b!<%I$O(B, defalut, simple, xmp, inf-ruby$B$,(B
		    $BMQ0U$5$l$F$$$^$9(B. $B%G%U%)%k%H$O(Bdefault$B%W%m%s%W%H%b!<(B
		    $B%I$K$J$C$F$$$^$9(B.
d64 2
a65 2
  --inf-ruby-mode   emacs$B$N(Binf-ruby-mode$BMQ$N%W%m%s%W%HI=<($r9T$J$&(B. $BFC(B
		    $B$K;XDj$,$J$$8B$j(B, readline$B%i%$%V%i%j$O;H$o$J$/$J$k(B.
d67 3
a69 3
		    $BHs>o$K%7%s%W%k$J%W%m%s%W%H$rMQ$$$k%b!<%I$G$9(B.
  --noprompt	    $B%W%m%s%W%HI=<($r9T$J$o$J$$(B.
  --tracer	    $B%3%^%s%I<B9T;~$K%H%l!<%9$r9T$J$&(B.
d71 5
a75 5
		    $B%P%C%/%H%l!<%9I=<($r%P%C%/%H%l!<%9$NF,$+$i(B n, $B8e$m(B
		    $B$+$i(Bn$B$@@$19T$J$&(B. $B%G%U%)%k%H$O(B16 
  --irb_debug n	    irb$B$N%G%P%C%0%G%P%C%0%l%Y%k$r(Bn$B$K@@_Dj$9$k(B($BMxMQ$7$J(B
		    $B$$J}$,L5Fq$G$7$g$&(B).
  -v, --version	    irb$B$N%P!<%8%g%s$rI=<($9$k(B
d77 1
a77 1
= $B%3%s%U%#%.%e%l!<%7%g%s(B
d79 2
a80 2
irb$B5/F0;~$K(B``~/.irbrc''$B$rFI$_9~$_$^$9(B. $B$b$7B8:_$7$J$$>l9g$O(B,
``.irbrc'', ``irb.rc'', ``_irbrc'', ``$irbrc''$B$N=g$K(Bload$B$r;n$_$^$9(B.
d82 2
a83 2
$B%*%W%7%g%s$r@@_Dj$9$kBe$o$j$K(B, $B0J2<$N%3%^%s%I$G$b%G%U%)%k%H$NF0:n$r@@_Dj(B
$B$G$-$^$9(B.
d104 1
a104 1
== $B%W%m%s%W%H$N@@_Dj(B
d106 1
a106 1
$B%W%m%s%W%H$r%+%9%?%^%$%:$7$?$$;~$K$O(B, 
d110 1
a110 1
$B$rMQ$$$^$9(B. $BNc$($P(B, .irbrc$B$NCf$G2<$N$h$&$J<0$r5-=R$7$^$9(B:
d112 5
a116 5
   IRB.conf[:PROMPT][:MY_PROMPT] = { # $B%W%m%s%W%H%b!<%I$NL>A0(B
     :PROMPT_I => nil,		  # $BDL>o$N%W%m%s%W%H(B
     :PROMPT_S => nil,		  # $BJ8;zNs$J$I$N7QB39T$N%W%m%s%W%H(B
     :PROMPT_C => nil,		  # $B<0$,7QB3$7$F$$$k;~$N%W%m%s%W%H(B
     :RETURN => "    ==>%s\n"	  # $B%j%?!<%s;~$N%W%m%s%W%H(B
d119 1
a119 1
$B%W%m%s%W%H%b!<%I$r;XDj$7$?$$;~$K$O(B,
d123 2
a124 2
$B$G$=$N%W%m%s%W%H%b!<%I$G5/F0$5$l$^$9(B. $B$^$?$O(B, .irbrc$B$K2<<0$r5-=R$7$F$b(B
OK$B$G$9(B.
d128 1
a128 1
PROMPT_I, PROMPT_S, PROMPT_C$B$O(B, $B%U%)!<%^%C%H$r;XDj$7$^$9(B.
d130 7
a136 7
  %N	$B5/F0$7$F$$$k%3%^%s%IL>$,=PNO$5$l$k(B.
  %m	main$B%*%V%8%'%/%H(B(self)$B$,(Bto_s$B$G=PNO$5$l$k(B.
  %M	main$B%*%V%8%'%/%H(B(self)$B$,(Binspect$B$5$l$F=PNO$5$l$k(B.
  %l	$BJ8;zNsCf$N%?%$%W$rI=$9(B(", ', /, ], `]'$B$O(B%w$B$NCf$N;~(B)
  %NNi	$B%$%s%G%s%H$N%l%Y%k$rI=$9(B. NN$B$O?t;z$,F~$j(Bprintf$B$N(B%NNd$B$HF1$8(B. $B>J(B
	$BN,2DG=(B
  %NNn	$B9THV9f$rI=$7$^$9(B.
d139 1
a139 1
$BNc$($P(B, $B%G%U%)%k%H$N%W%m%s%W%H%b!<%I$O(B:
d148 1
a148 1
$B$H$J$C$F$$$^$9(B.
d150 1
a150 1
RETURN$B$O(B, $B8=:_$N$H$3$m(Bprintf$B7A<0$G$9(B. $B>-Mh;EMM$,JQ$o$k$+$bCN$l$^$;$s(B.
d152 1
a152 1
== $B%5%V(Birb$B$N@@_Dj(B
d154 3
a156 3
$B%3%^%s%I%i%$%s%*%W%7%g%s$*$h$S(BIRB.conf$B$O(B($B%5%V(B)irb$B5/F0;~$N%G%U%)%k%H$N(B
$B@@_Dj$r7h$a$k$b$N$G(B, `5. $B%3%^%s%I(B'$B$K$"$k(Bconf$B$G8DJL$N(B($B%5%V(B)irb$B$N@@_Dj$,$G(B
$B$-$k$h$&$K$J$C$F$$$^$9(B.
d158 3
a160 3
IRB.conf[:IRB_RC]$B$K(Bproc$B$,@@_Dj$5$l$F$$$k$H(B, $B%5%V(Birb$B$r5/F0$9$k;~$K$=$N(B
proc$B$r(Birb$B$N%3%s%F%-%9%H$r0z?t$H$7$F8F$S=P$7$^$9(B. $B$3$l$K$h$C$F8DJL$N%5(B
$B%V(Birb$B$4$H$K@@_Dj$rJQ$($k$3$H$,$G$-$k$h$&$K$J$j$^$9(B.
d163 1
a163 1
= $B%3%^%s%I(B
d165 2
a166 2
irb$B3HD%%3%^%s%I$O(B, $B4JC1$JL>A0$HF,$K(B`irb_'$B$r$D$1$?L>A0$HN>J}Dj5A$5$l$F(B
$B$$$^$9(B. $B$3$l$O(B, $B4JC1$JL>A0$,(Boverride$B$5$l$?;~$N$?$a$G$9(B.
d169 3
a171 3
    $B=*N;$9$k(B. 
    $B%5%V(Birb$B$N>l9g(B, $B$=$N%5%V(Birb$B$r=*N;$9$k(B.
    cb$B$7$F$$$k>l9g(B, $B$=$N%P%$%s%G%#%s%0$N%b!<%I$r=*N;$9$k(B.
d174 2
a175 2
    irb$B$N8=:_$N@@_Dj$rI=<($9$k(B. $B@@_Dj$NJQ99$O(B, conf$B$K%a%C%;!<%8$rAw$k$3(B
    $B$H$K$h$C$F9T$J$($k(B. 
d178 2
a179 2
    $B%P%C%/%H%l!<%9I=<($r%P%C%/%H%l!<%9$NF,$+$i(Bn, $B8e$m$+$i(Bn$B$@@$19T$J$&(B.
    $B%G%U%)%k%H$O(B16
d182 1
a182 1
    irb$BMQ$N%G%P%C%0%l%Y%k$N@@_Dj(B
d185 2
a186 2
    ^D$B$,F~NO$5$l$?;~$NF0:n$r@@_Dj$9$k(B. true$B$N;~$O(B^D$B$rL5;k$9$k(B, false$B$N(B
    $B;~$O(Birb$B$r=*N;$9$k(B. 
d189 4
a192 4
    ^C$B$,F~NO$5$l$?;~$NF0:n$r@@_Dj$9$k(B. false$B;~$O(B, irb$B$r=*N;$9$k(B. true$B$N(B
    $B;~$NF0:n$O0J2<$N$h$&$K$J$k(B:
      $BF~NOCf(B: $B$3$l$^$GF~NO$7$?$b$N$r%-%c%s%;%k$7%H%C%W%l%Y%k$KLa$k(B. 
      $B<B9TCf(B: $B<B9T$rCf;_$9$k(B.
d195 1
a195 1
    inf-ruby-mode$BMQ$N%W%m%s%W%HI=<($r9T$J$&(B. $B%G%U%)%k%H$O(Bfalse.
d198 5
a202 5
    $B%$%s%9%Z%/%H%b!<%I$r@@_Dj$9$k(B.
    true: $B%$%s%9%Z%/%H$7$FI=<($9$k(B.
    false: $BDL>o$N(Bprint$B$GI=<($9$k(B.
    nil: $BDL>o%b!<%I$G$"$l$P(B, inspect mode$B$H$J$j(B, math$B%b!<%I$N;~$O(B, non
	 inspect mode$B$H$J$k(B.   
d205 1
a205 1
    $B;2>H$N$_(B. irb$B$,2?CJ(Bcb$B$7$F$$$k$+(B?
d208 1
a208 1
    $B;2>H$N$_(B. bc$B%b!<%I(B($BJ,?t(B, $B9TNs$N7W;;$,$G$-$^$9(B)$B$+$I$&$+(B?
d211 2
a212 2
    load/require$B;~$K(Birb$B$N(Bfile$BFI$_9~$_5!G=$rMQ$$$k%b!<%I$N%9%$%C%A(B($B%G%U%)(B
    $B%k%H$OMQ$$$J$$(B). $B$3$N%b!<%I$O(BIRB$BA4BN$KH?1G$5$l$k(B.
d215 1
a215 1
    if$B$ND>8e$J$I(B, $B9T$,7QB3$7$F$$$k;~$N%W%m%s%W%H(B.
d218 1
a218 1
    $BDL>o$N%W%m%s%W%H(B.
d221 1
a221 1
    $BJ8;zNsCf$J$I$rI=$9%W%m%s%W%H(B.
d224 1
a224 1
    ~/.irbrc$B$rFI$_9~$s$@@$+$I$&$+(B?
d227 1
a227 1
    $B%W%m%s%W%HI=<($9$k$+$I$&$+(B? $B%G%U%)%k%H$G$O%W%m%s%W%H$rI=<($9$k(B.
d230 5
a234 5
    readline$B$r;H$&$+$I$&$+(B?
    true: readline$B$r;H$&(B.
    false: readline$B$r;H$o$J$$(B.
    nil: ($B%G%U%)%k%H(B)inf-reuby-mode$B0J30$G(Breadline$B%i%$%V%i%j$rMxMQ$7$h(B
         $B$&$H$9$k(B.  
d237 1
a237 1
    irb$B$+$i$$$m$$$m$J%a%C%;!<%8$r=PNO$9$k$+(B?
d240 2
a241 2
    $B%m!<%+%kJQ?t$N%9%3!<%W$,0c$&?7$?$J(Bbinding$B$K0\$k(B.  obj$B$,;XDj$5$l$?(B
    $B;~$O(B, $B$=$N(Bobj$B$r(Bself$B$H$9$k(B. 
d244 1
a244 1
    $B%5%V(Birb$B$rN)$A$"$2$k(B. obj$B$,;XDj$5$l$?;~$O(B, $B$=$N(Bobj$B$r(Bself$B$H$9$k(B.
d247 1
a247 1
    $B%5%V(Birb$B$N%j%9%H(B
d250 1
a250 1
    $B;XDj$7$?%5%V(Birb$B$K%9%$%C%A$9$k(B. n$B$O(B, $B<!$N$b$N$r;XDj$9$k(B.
d252 4
a255 4
      irb$BHV9f(B
      $B%9%l%C%I(B
      irb$B%*%V%8%'%/%H(B
      self(irb obj$B$G5/F0$7$?;~$N(Bobj)
d258 1
a258 1
      $B%5%V(Birb$B$r(Bkill$B$9$k(B. n$B$O(Bfg$B$HF1$8(B.
d261 1
a261 1
= $B%7%9%F%`JQ?t(B
d263 1
a263 1
   _  $BA0$N7W;;$N<B9T7k2L$r3P$($F$$$k(B($B%m!<%+%kJQ?t(B).
d265 1
a265 1
=  $B;HMQNc(B
d267 1
a267 1
$B0J2<$N$h$&$J46$8$G$9(B.
d270 2
a271 2
  irb(main):001:0> irb                        # $B%5%V(Birb$B$NN)$A$"$2(B
  irb#1(main):001:0> jobs                     # $B%5%V(Birb$B$N%j%9%H(B
d275 1
a275 1
  irb#1(main):002:0> fg 0                     # job$B$N%9%$%C%A(B
d279 3
a281 3
  irb(main):003:0> irb Foo                    # Foo$B$r%3%s%F%-%9%H$7$F(Birb
					      # $BN)$A$"$2(B
  irb#2(Foo):001:0> def foo                   # Foo#foo$B$NDj5A(B
d285 1
a285 1
  irb#2(Foo):004:0> fg 0                      # job$B$r%9%$%C%A(B
d287 1
a287 1
  irb(main):004:0> jobs                       # job$B$N%j%9%H(B
d292 2
a293 2
  irb(main):005:0> Foo.instance_methods       # Foo#foo$B$,$A$c$s$HDj5A$5(B
					      # $B$l$F$$$k(B
d295 1
a295 1
  irb(main):006:0> fg 2                       # job$B$r%9%$%C%A(B
d297 1
a297 1
  irb#2(Foo):005:0> def bar                   # Foo#bar$B$rDj5A(B
d307 2
a308 2
  irb(main):008:0> irb f                      # Foo$B$N%$%s%9%?%s%9$G(Birb$B$r(B
					      # $BN)$A$"$2$k(B.
d315 1
a315 1
  irb#3(#<Foo:0x4010af3c>):002:0> foo         # f.foo$B$N<B9T(B
d317 1
a317 1
  irb#3(#<Foo:0x4010af3c>):003:0> bar         # f.bar$B$N<B9T(B
d319 1
a319 1
  irb#3(#<Foo:0x4010af3c>):004:0> kill 1, 2, 3# job$B$N(Bkill
d324 1
a324 1
  irb(main):010:0> exit                       # $B=*N;(B
d327 1
a327 1
= $B;HMQ>e$N@@)8B(B
d329 2
a330 2
irb$B$O(B, $BI>2A$G$-$k;~E@@(B($B<0$,JD$8$?;~E@@(B)$B$G$NC`<!<B9T$r9T$J$$$^$9(B. $B$7$?$,$C(B
$B$F(B, ruby$B$rD>@@\;H$C$?;~$H(B, $B<c430[$J$kF0:n$r9T$J$&>l9g$,$"$j$^$9(B.
d332 1
a332 1
$B8=:_L@@$i$+$K$J$C$F$$$kLdBjE@@$r@@bL@@$7$^$9(B.
d334 1
a334 1
== $B%m!<%+%kJQ?t$N@@k8@@(B
d336 1
a336 1
ruby$B$G$O(B, $B0J2<$N%W%m%0%i%`$O%(%i!<$K$J$j$^$9(B.
d345 1
a345 1
$B$H$3$m$,(B, irb$B$rMQ$$$k$H(B
d352 3
a354 3
$B$H$J$j(B, $B%(%i!<$r5/$3$7$^$;$s(B. $B$3$l$O(B, ruby$B$,:G=i$K%9%/%j%W%HA4BN$r%3%s(B
$B%Q%$%k$7$F%m!<%+%kJQ?t$r7hDj$9$k$+$i$G$9(B. $B$=$l$KBP$7(B, irb$B$O<B9T2DG=$K(B
$B$J$k(B($B<0$,JD$8$k(B)$B$H<+F0E*$KI>2A$7$F$$$k$+$i$G$9(B. $B>e5-$NNc$G$O(B, 
d358 2
a359 2
$B$r9T$J$C$?;~E@@$GI>2A$r9T$J$$(B, $B$=$N;~E@@$GJQ?t$,Dj5A$5$l$k$?$a(B, $B<!<0$G(B 
$BJQ?t(Bfoo$B$ODj5A$5$l$F$$$k$+$i$G$9(B.
d361 2
a362 2
$B$3$N$h$&$J(Bruby$B$H(Birb$B$NF0:n$N0c$$$r2r7h$7$?$$>l9g$O(B, begin...end$B$G3g$C$F(B
$B%P%C%AE*$K<B9T$7$F2<$5$$(B:
d372 1
a372 1
== $B%R%"%I%-%e%a%s%H(B
d374 1
a374 1
$B8=:_$N$H$3$m%R%"%I%-%e%a%s%H$N<BAu$OIT40A4$G$9(B. 
d376 1
a376 1
== $B%7%s%\%k(B
d378 2
a379 2
$B%7%s%\%k$G$"$k$+$I$&$+$NH=CG$r4V0c$($k$3$H$,$"$j$^$9(B. $B6qBNE*$K$O<0$,40N;(B
$B$7$F$$$k$N$K7QB39T$H8+$J$9$3$H$,$"$j$^$9(B.
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d3 2
a4 2
			   	$Revision: 1.1.1.1 $
			   	$Date: 2001/04/30 17:38:22 $
@


1.1.2.2
log
@Convert from JIS to EUC.
@
text
@d3 2
a4 2
			   	$Revision: 1.1.2.1 $
			   	$Date: 2001/04/30 18:39:35 $
d7 1
a7 1
= irbとは?
d9 2
a10 2
irbはinteractive rubyの略です. rubyの式を標準入力から簡単に入力/実行す
るためのツールです.
d12 1
a12 1
= 起動
d17 2
a18 2
のいずれかで行ないます. 前者の場合irbへのオプション指定は, 以下のように
なります.
d22 1
a22 1
= 使い方
d24 4
a27 4
irbの使い方は, Rubyさえ知っていればいたって簡単です. 基本的には irb と
いうコマンドを実行するだけです. irbを実行すると, 以下のようなプロンプ
トが表れてきます. 後は, rubyの式を入れて下さい. 式が完結した時点で実行
されます.
d40 2
a41 2
また, irbはReadlineモジュールにも対応しています. Readlineモジュールが
インストールされている時には, それを使うのが標準の動作になります.
d43 1
a43 1
= コマンドオプション
d47 10
a56 10
  -f		    ~/.irbrc を読み込まない.
  -m		    bcモード(分数, 行列の計算ができる)
  -d                $DEBUG をtrueにする(ruby -d と同じ)
  -r load-module    ruby -r と同じ.
  --inspect	    結果出力にinspectを用いる(bcモード以外はデフォルト). 
  --noinspect	    結果出力にinspectを用いない.
  --readline	    readlineライブラリを利用する.
  --noreadline	    readlineライブラリを利用しない. デフォルトの動作は,
		    inf-reuby-mode以外でreadlineライブラリを利用しよう
		    とする. 
d59 4
a62 4
		    プロンプトモードを切替えます. 現在定義されているプ
		    ロンプトモードは, defalut, simple, xmp, inf-rubyが
		    用意されています. デフォルトはdefaultプロンプトモー
		    ドになっています.
d64 2
a65 2
  --inf-ruby-mode   emacsのinf-ruby-mode用のプロンプト表示を行なう. 特
		    に指定がない限り, readlineライブラリは使わなくなる.
d67 3
a69 3
		    非常にシンプルなプロンプトを用いるモードです.
  --noprompt	    プロンプト表示を行なわない.
  --tracer	    コマンド実行時にトレースを行なう.
d71 5
a75 5
		    バックトレース表示をバックトレースの頭から n, 後ろ
		    からnだけ行なう. デフォルトは16 
  --irb_debug n	    irbのデバッグデバッグレベルをnに設定する(利用しな
		    い方が無難でしょう).
  -v, --version	    irbのバージョンを表示する
d77 1
a77 1
= コンフィギュレーション
d79 2
a80 2
irb起動時に``~/.irbrc''を読み込みます. もし存在しない場合は,
``.irbrc'', ``irb.rc'', ``_irbrc'', ``$irbrc''の順にloadを試みます.
d82 2
a83 2
オプションを設定する代わりに, 以下のコマンドでもデフォルトの動作を設定
できます.
d104 1
a104 1
== プロンプトの設定
d106 1
a106 1
プロンプトをカスタマイズしたい時には, 
d110 1
a110 1
を用います. 例えば, .irbrcの中で下のような式を記述します:
d112 5
a116 5
   IRB.conf[:PROMPT][:MY_PROMPT] = { # プロンプトモードの名前
     :PROMPT_I => nil,		  # 通常のプロンプト
     :PROMPT_S => nil,		  # 文字列などの継続行のプロンプト
     :PROMPT_C => nil,		  # 式が継続している時のプロンプト
     :RETURN => "    ==>%s\n"	  # リターン時のプロンプト
d119 1
a119 1
プロンプトモードを指定したい時には,
d123 2
a124 2
でそのプロンプトモードで起動されます. または, .irbrcに下式を記述しても
OKです.
d128 1
a128 1
PROMPT_I, PROMPT_S, PROMPT_Cは, フォーマットを指定します.
d130 7
a136 7
  %N	起動しているコマンド名が出力される.
  %m	mainオブジェクト(self)がto_sで出力される.
  %M	mainオブジェクト(self)がinspectされて出力される.
  %l	文字列中のタイプを表す(", ', /, ], `]'は%wの中の時)
  %NNi	インデントのレベルを表す. NNは数字が入りprintfの%NNdと同じ. 省
	略可能
  %NNn	行番号を表します.
d139 1
a139 1
例えば, デフォルトのプロンプトモードは:
d148 1
a148 1
となっています.
d150 1
a150 1
RETURNは, 現在のところprintf形式です. 将来仕様が変わるかも知れません.
d152 1
a152 1
== サブirbの設定
d154 3
a156 3
コマンドラインオプションおよびIRB.confは(サブ)irb起動時のデフォルトの
設定を決めるもので, `5. コマンド'にあるconfで個別の(サブ)irbの設定がで
きるようになっています.
d158 3
a160 3
IRB.conf[:IRB_RC]にprocが設定されていると, サブirbを起動する時にその
procをirbのコンテキストを引数として呼び出します. これによって個別のサ
ブirbごとに設定を変えることができるようになります.
d163 1
a163 1
= コマンド
d165 2
a166 2
irb拡張コマンドは, 簡単な名前と頭に`irb_'をつけた名前と両方定義されて
います. これは, 簡単な名前がoverrideされた時のためです.
d169 3
a171 3
    終了する. 
    サブirbの場合, そのサブirbを終了する.
    cbしている場合, そのバインディングのモードを終了する.
d174 2
a175 2
    irbの現在の設定を表示する. 設定の変更は, confにメッセージを送るこ
    とによって行なえる. 
d178 2
a179 2
    バックトレース表示をバックトレースの頭からn, 後ろからnだけ行なう.
    デフォルトは16
d182 1
a182 1
    irb用のデバッグレベルの設定
d185 2
a186 2
    ^Dが入力された時の動作を設定する. trueの時は^Dを無視する, falseの
    時はirbを終了する. 
d189 4
a192 4
    ^Cが入力された時の動作を設定する. false時は, irbを終了する. trueの
    時の動作は以下のようになる:
      入力中: これまで入力したものをキャンセルしトップレベルに戻る. 
      実行中: 実行を中止する.
d195 1
a195 1
    inf-ruby-mode用のプロンプト表示を行なう. デフォルトはfalse.
d198 5
a202 5
    インスペクトモードを設定する.
    true: インスペクトして表示する.
    false: 通常のprintで表示する.
    nil: 通常モードであれば, inspect modeとなり, mathモードの時は, non
	 inspect modeとなる.   
d205 1
a205 1
    参照のみ. irbが何段cbしているか?
d208 1
a208 1
    参照のみ. bcモード(分数, 行列の計算ができます)かどうか?
d211 2
a212 2
    load/require時にirbのfile読み込み機能を用いるモードのスイッチ(デフォ
    ルトは用いない). このモードはIRB全体に反映される.
d215 1
a215 1
    ifの直後など, 行が継続している時のプロンプト.
d218 1
a218 1
    通常のプロンプト.
d221 1
a221 1
    文字列中などを表すプロンプト.
d224 1
a224 1
    ~/.irbrcを読み込んだかどうか?
d227 1
a227 1
    プロンプト表示するかどうか? デフォルトではプロンプトを表示する.
d230 5
a234 5
    readlineを使うかどうか?
    true: readlineを使う.
    false: readlineを使わない.
    nil: (デフォルト)inf-reuby-mode以外でreadlineライブラリを利用しよ
         うとする.  
d237 1
a237 1
    irbからいろいろなメッセージを出力するか?
d240 2
a241 2
    ローカル変数のスコープが違う新たなbindingに移る.  objが指定された
    時は, そのobjをselfとする. 
d244 1
a244 1
    サブirbを立ちあげる. objが指定された時は, そのobjをselfとする.
d247 1
a247 1
    サブirbのリスト
d250 1
a250 1
    指定したサブirbにスイッチする. nは, 次のものを指定する.
d252 4
a255 4
      irb番号
      スレッド
      irbオブジェクト
      self(irb objで起動した時のobj)
d258 1
a258 1
      サブirbをkillする. nはfgと同じ.
d261 1
a261 1
= システム変数
d263 1
a263 1
   _  前の計算の実行結果を覚えている(ローカル変数).
d265 1
a265 1
=  使用例
d267 1
a267 1
以下のような感じです.
d270 2
a271 2
  irb(main):001:0> irb                        # サブirbの立ちあげ
  irb#1(main):001:0> jobs                     # サブirbのリスト
d275 1
a275 1
  irb#1(main):002:0> fg 0                     # jobのスイッチ
d279 3
a281 3
  irb(main):003:0> irb Foo                    # Fooをコンテキストしてirb
					      # 立ちあげ
  irb#2(Foo):001:0> def foo                   # Foo#fooの定義
d285 1
a285 1
  irb#2(Foo):004:0> fg 0                      # jobをスイッチ
d287 1
a287 1
  irb(main):004:0> jobs                       # jobのリスト
d292 2
a293 2
  irb(main):005:0> Foo.instance_methods       # Foo#fooがちゃんと定義さ
					      # れている
d295 1
a295 1
  irb(main):006:0> fg 2                       # jobをスイッチ
d297 1
a297 1
  irb#2(Foo):005:0> def bar                   # Foo#barを定義
d307 2
a308 2
  irb(main):008:0> irb f                      # Fooのインスタンスでirbを
					      # 立ちあげる.
d315 1
a315 1
  irb#3(#<Foo:0x4010af3c>):002:0> foo         # f.fooの実行
d317 1
a317 1
  irb#3(#<Foo:0x4010af3c>):003:0> bar         # f.barの実行
d319 1
a319 1
  irb#3(#<Foo:0x4010af3c>):004:0> kill 1, 2, 3# jobのkill
d324 1
a324 1
  irb(main):010:0> exit                       # 終了
d327 1
a327 1
= 使用上の制限
d329 2
a330 2
irbは, 評価できる時点(式が閉じた時点)での逐次実行を行ないます. したがっ
て, rubyを直接使った時と, 若干異なる動作を行なう場合があります.
d332 1
a332 1
現在明らかになっている問題点を説明します.
d334 1
a334 1
== ローカル変数の宣言
d336 1
a336 1
rubyでは, 以下のプログラムはエラーになります.
d345 1
a345 1
ところが, irbを用いると
d352 3
a354 3
となり, エラーを起こしません. これは, rubyが最初にスクリプト全体をコン
パイルしてローカル変数を決定するからです. それに対し, irbは実行可能に
なる(式が閉じる)と自動的に評価しているからです. 上記の例では, 
d358 2
a359 2
を行なった時点で評価を行ない, その時点で変数が定義されるため, 次式で 
変数fooは定義されているからです.
d361 2
a362 2
このようなrubyとirbの動作の違いを解決したい場合は, begin...endで括って
バッチ的に実行して下さい:
d372 1
a372 1
== ヒアドキュメント
d374 1
a374 1
現在のところヒアドキュメントの実装は不完全です. 
d376 1
a376 1
== シンボル
d378 2
a379 2
シンボルであるかどうかの判断を間違えることがあります. 具体的には式が完了
しているのに継続行と見なすことがあります.
@


1.1.2.3
log
@Hit `=begin' and `=end' in proper places so rd2 can format them
without a problem.
@
text
@d3 2
a4 2
			   	$Revision: 1.1.2.2 $
			   	$Date: 2001/05/07 23:35:09 $
d6 1
a6 1
=begin
d381 1
a381 1
=end
@


1.1.2.4
log
@
* irb messages: fix typos.
@
text
@d3 2
a4 2
			   	$Revision: 1.1.2.3 $
			   	$Date: 2001/05/07 23:59:00 $
d60 1
a60 1
		    ロンプトモードは, default, simple, xmp, inf-rubyが
@


1.1.2.5
log
@Rename *.jp to *.ja, since jp is a region code and ja is a language
code.
@
text
@d3 2
a4 2
			   	$Revision: 1.1.2.4 $
			   	$Date: 2001/06/01 15:26:47 $
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@@
