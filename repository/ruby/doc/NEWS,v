head	1.49;
access;
symbols
	v1_6_7:1.1.2.15
	v1_6_6:1.1.2.14
	v1_6_5:1.1.2.13
	v1_6_4:1.1.2.1
	ruby_1_6:1.1.0.2;
locks; strict;
comment	@# @;


1.49
date	2002.08.30.13.47.49;	author knu;	state Exp;
branches;
next	1.48;

1.48
date	2002.07.14.21.32.17;	author nobu;	state Exp;
branches;
next	1.47;

1.47
date	2002.07.11.19.25.45;	author aamine;	state Exp;
branches;
next	1.46;

1.46
date	2002.06.26.08.01.00;	author nobu;	state Exp;
branches;
next	1.45;

1.45
date	2002.06.22.15.26.58;	author tadf;	state Exp;
branches;
next	1.44;

1.44
date	2002.05.29.05.20.35;	author matz;	state Exp;
branches;
next	1.43;

1.43
date	2002.05.23.05.35.28;	author matz;	state Exp;
branches;
next	1.42;

1.42
date	2002.05.19.12.13.51;	author tadf;	state Exp;
branches;
next	1.41;

1.41
date	2002.05.09.17.01.19;	author nobu;	state Exp;
branches;
next	1.40;

1.40
date	2002.04.17.15.00.22;	author knu;	state Exp;
branches;
next	1.39;

1.39
date	2002.04.02.13.16.00;	author ttate;	state Exp;
branches;
next	1.38;

1.38
date	2002.03.27.05.28.00;	author matz;	state Exp;
branches;
next	1.37;

1.37
date	2002.03.26.02.03.04;	author aamine;	state Exp;
branches;
next	1.36;

1.36
date	2002.03.22.07.34.00;	author aamine;	state Exp;
branches;
next	1.35;

1.35
date	2002.03.22.04.55.03;	author knu;	state Exp;
branches;
next	1.34;

1.34
date	2002.03.19.09.03.09;	author matz;	state Exp;
branches;
next	1.33;

1.33
date	2002.03.14.13.26.18;	author nobu;	state Exp;
branches;
next	1.32;

1.32
date	2002.03.13.10.11.09;	author knu;	state Exp;
branches;
next	1.31;

1.31
date	2002.03.13.09.44.59;	author knu;	state Exp;
branches;
next	1.30;

1.30
date	2002.03.11.16.10.54;	author knu;	state Exp;
branches;
next	1.29;

1.29
date	2002.03.11.15.29.50;	author akr;	state Exp;
branches;
next	1.28;

1.28
date	2002.03.11.15.22.24;	author akr;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.11.12.55.52;	author nobu;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.18.09.52.48;	author matz;	state Exp;
branches;
next	1.25;

1.25
date	2002.01.28.08.44.39;	author matz;	state Exp;
branches;
next	1.24;

1.24
date	2002.01.25.08.22.07;	author matz;	state Exp;
branches;
next	1.23;

1.23
date	2002.01.23.07.30.41;	author matz;	state Exp;
branches;
next	1.22;

1.22
date	2002.01.11.11.24.11;	author aamine;	state Exp;
branches;
next	1.21;

1.21
date	2002.01.11.10.54.23;	author aamine;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.11.09.18.52;	author matz;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.21.09.23.24;	author matz;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.26.12.00.40;	author knu;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.08.06.43.10;	author matz;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.29.06.28.47;	author matz;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.16.08.13.54;	author knu;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.14.08.13.29;	author matz;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.13.05.56.30;	author knu;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.13.05.32.41;	author knu;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.06.03.05.15;	author matz;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.24.10.19.46;	author knu;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.19.05.49.43;	author knu;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.05.16.07.53;	author knu;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.19.09.21.38;	author knu;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.19.05.28.10;	author knu;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.13.10.51.39;	author knu;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.12.05.34.03;	author knu;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.09.05.58.53;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.05.08.17.02;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.04.05.30.25;	author knu;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.06.04.05.31.06;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.06.05.08.17.25;	author knu;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.06.06.07.51.08;	author knu;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.06.09.06.00.52;	author knu;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.06.11.06.26.19;	author matz;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2001.06.19.05.27.54;	author knu;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2001.07.05.15.32.07;	author knu;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2001.07.05.15.53.59;	author knu;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2001.07.06.07.18.56;	author knu;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2001.07.19.05.49.51;	author knu;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2001.07.31.10.23.39;	author knu;	state Exp;
branches;
next	1.1.2.12;

1.1.2.12
date	2001.08.13.05.32.59;	author knu;	state Exp;
branches;
next	1.1.2.13;

1.1.2.13
date	2001.08.16.08.10.47;	author knu;	state Exp;
branches;
next	1.1.2.14;

1.1.2.14
date	2001.12.03.09.39.22;	author knu;	state Exp;
branches;
next	1.1.2.15;

1.1.2.15
date	2002.01.04.14.20.11;	author matz;	state Exp;
branches;
next	1.1.2.16;

1.1.2.16
date	2002.03.11.16.04.00;	author knu;	state Exp;
branches;
next	1.1.2.17;

1.1.2.17
date	2002.03.13.09.53.54;	author knu;	state Exp;
branches;
next	;


desc
@@


1.49
log
@Add set.rb.
@
text
@: Set class (set.rb)

  Imported.

: OptionParser module

  Imported.  Command line options utility library.

: parser

  %W(...) notation, word list literal like %w(...) with the
  exception that #{} interpolation is allowed.

: parser

  Now arbitrary statements are allowed inside #{} interpolation
  without escapes.  In other hand, they can no longer access to
  variables defined in eval.

: parser

  Digits preceded minus sign is a literal integer.

: IO::sysopen

  a new method to get a raw file descriptor.

: TCPServer#accept, UNIXServer#accept, Socket#accept

  new methods to return an accepted socket fd.

: Date and DateTime

  lib/date.rb now provides both Date and DateTime.

  Some methods have been renamed.  But the old names are still alive.

  Some new methods have been added (Date::parse, Date#strftime, etc.).

  Date#mjd now returns the chronological modified Julian day number.

  All facilities about tjd have been removed.

: Thread#join

  Optional argument limits maximum time to wait the thread in second.
  And returns nil if timed out.

: dl module

  Imported. An interface to the dynamic linker.

: IO#sysseek

  Added.

: IO

  64bit off_t support by Janathan Baker.

: abort()

  optional terminate message argument.

: iconv module

  Imported.  Wrapper library of (({iconv})).

: Dir::glob

  Now accepts optional FNM_* flags via the second argument, whereas
  Dir::[] doesn't.

    Dir.glob("makefile", File::FNM_CASEFOLD) #=> ['Makefile', 'makefile']

: fileutils module

  Imported.  File utility library.

: racc runtime module

  Imported.  Racc runtime library. (Racc is a parser generator for ruby)

: tsort module

  Imported.  Topological sorting library.

: stringio module

  Imported.  Pseudo (({IO})) class from/to (({String})).

: strscan module

  Imported.  Fast string scanner library.

: Array#pack, String#unpack

  allows comment in template strings.

: Array#pack, String#unpack

  new templates 'q' and 'Q' for 64bit integer (signed and unsigned respectively).

: Array#fill

  takes block to get the values to fill.

: Array#new

  takes block to get the values to fill.

: Array#fetch

  takes block to get the default value.

: Hash#update

  takes block to resolve key conflict.

: IO#fsync

  Added.

: Array expansion

  Fixed with the following behavior:

    a = *[1]
    p a #=> [1]

  Now 1-element array in rhs is expanded properly.

    a = *[1]
    p a #=> 1

: allocation framework

  any instance of class can be allocated by class.allocate,
  (except a few classes).

: break and next

  Extended to take an optional expression, which is used as a value
  for termination. [experimental]

: comparison of exception classes in a rescue clause

  Changed to use Module#=== for comparing $! with the exception
  class specified in each rescue clause.

  As the previous behavior was to use kind_of?, the effect is limited
  to the SystemCallError case.  SystemCallError.=== has been newly
  defined to return true when the two have the same errno.  With this
  change, SystemCallError's with the same errno, such as Errno::EAGAIN
  and Errno::EWOULDBLOCK, can both be rescued by listing just one of
  them.

: constants lookup

  Improved at the performance of searching by using an internal hash
  table.

: expression parenthesis in the first argument

  Experimentally altered to get the following code (note the space
  after p):

    p ("xx"*2).to_i

  Interpreted as:

    p (("xx"*2).to_i)

  Instead of:

    (p("xx"*2)).to_i

: implicit comparison in conditional expressions

  is obsoleted except when it is used in -e.

  : between Range and $.
      Use explicit comparison instead.

  : between Regexp and $_
      Use the unary method ~/re/ instead.

: to_str

  Added to get objects which define to_str() treated as String's.

  Now almost all the built-in methods try each argument with to_str()
  when they expect it to be a String.

    foo = Object.new
    class <<foo
      def to_str
        "foo"
      end
    end
    p File.open(foo)
    => -:7:in `open': wrong argument type Object (expected String) (TypeError)
       ruby 1.6.4 (2001-04-19) [i586-linux]
    => -:7:in `open': No such file or directory - "foo" (Errno::ENOENT)
       ruby 1.7.0 (2001-05-02) [i586-linux]

: pp module

  Imported. Prity Printing library.

: open

  Extended so that when the third argument is permission flags it
  calls open(2) instead of fopen(3).

: Array#fetch

  Added.

: Array#insert(n, other, ...)

  Added. [ruby-talk:14289]

  This is much the same as (({ary[n,0] = [other,...]})) except
  returing self.

    ary = [0,1,2,3]
    ary[2, 0] = [4, 5, 6]
    p ary

    ary = [0,1,2,3]
    ary.insert(2, 4, 5, 6)
    p ary

: Array#sort!

  Changed to always return self without checking whether the sequence
  of the elements was modified or not.

  Beware that this behavior is not guaranteed to continue in the
  future.  Do not rely on its return value. [ruby-dev:12506]

: Curses

  Updated.  New methods and constants for using the mouse, character
  attributes, colors and key codes have been added.

: Dir#path

  Added.

: Dir.chdir

  Extended to take a block.

: Dir.glob

  Made to support meta-character escaping by a backslash.  Wildcards
  and spaces may now be escaped using a backslash.

: Dir.open

  Changed to return what the block returns when a block is given, just
  as File.open does. (It always returned (({nil})) in 1.6 and
  prior)

: Dir.chdir

  Changed to warn only when invoked from multiple threads or no block
  is given. [ruby-dev:13823]

    Dir.chdir('foo') {
      Dir.chdir('bar') {   # previously warned
        puts Dir.pwd
      }
    }

: Enumerable#all?
: Enumerable#any?
: Enumerable#inject
: Enumerable#sort_by

  Added.

: File#fnmatch, File::Constants::FNM_*

  Added.  Refer to the fnmatch(3) manpage for details.

  Localism is FNM_DOTMATCH which has the opposite meaning of the
  commonly known FNM_PERIOD, which does not exist in Ruby.

  e.g.

    # exclude files matching "*.bak" case-insensitively.
    files.reject! {|fn| File.fnmatch?("*.bak", fn, File::FNM_CASEFOLD) }

: File.lchmod
: File.lchown

  Added.

: IO#puts

  do not treat Array specially.

: IO.for_fd

  Added.

: IO.read

  Added. [ruby-talk:9460]

: Interrupt

  Made a subclass of SignalException. (It was a subclass of
  Exception in 1.6 and prior)

: Marshal

  Fixed not to dump anonymous classes/modules.

  Fixed with loading modules.

: MatchData#to_ary

  Added for convenience of Regexp#match. [ruby-dev:12766]

  Previously we had to do:

    foo, bar, baz = /(\w+?)\s+(\w+?)\s+(\w+)/.match("foo bar baz").to_a[1..-1]
    p [foo, bar, baz]

  But now can do:

    _, foo, bar, baz = /(\w+?)\s+(\w+?)\s+(\w+)/.match("foo bar baz")
    p [foo, bar, baz]

: Math.acos(x)
: Math.asin(x)
: Math.atan(x)
: Math.cosh(x)
: Math.hypot(x,y)
: Math.sinh(x)
: Math.tanh(x)

  Added.

: Method#==

  Added.

: Module#include?

  Added. [ruby-dev:13941] 

: Module#included

  Added.  This is a hook called after Module#append_feature.

: Module#method_removed
: Module#method_undefined

  Added.

: Module.new, Class.new

  Extended to take block.

: Multiple assignment behavior

  Fixed so that "*a = nil" results in "a == []".

: Net::HTTP

  New version of Net::HTTP has introduced seriously incompatible
  changes. For details, see document embedded in net/http.rb itself.

: NameError and NoMethodError

  Moved and now NoMethodError < NameError < StandardError.

: NoMethodError

  Added. [ruby-dev:12763]

: NotImplementError

  Finally obsoleted.  Use NotImplementedError.

: Object#singleton_method_removed
: Object#singleton_method_undefined

  Added.

: Proc#==

  Added.

: Proc#yield

  Added.  This is equivalent to Proc#call except it does not check the
  number of given arguments, which are thus passed to the proc as-is.

: Process.times

  Moved from Time.times. (Time.times still remains but emits a
  warning)

: Process.waitall

  Added.

: Process::Status

  Added.  (({$?})) is now an instance of this class.

: Range#step([step=1])

  Added.

: Range#to_ary

  Added.  You can now do something like this:

    a, b, c = 1..3

: Regexp#options

  Added.

: Regexp.last_match(n)

  Extended to take an optional argument.

: Signal

  Added. This module has module functions Signal.trap and Signal.list.

: Socket.pack_sockaddr_in, Socket.unpack_sockaddr_in

  Added.  Utility for direct Socket access.

: Socket.pack_sockaddr_un, Socket.unpack_sockaddr_un

  Added.  Utility for direct Socket access.

: String#[regexp, nth]

  Extended to accepts optional second argument.

  tries match between self and REGEXP, then returns the
  content of the NTH regexp register.

: String#casecmp

  Added.  This is a case insensitive version of String#<=>.

: String#chomp

  if $/ == '\n', chops off last newlines (any of \n, \r, \r\n).

: String#eql?

  Changed to be always case sensitive.

: String#insert(n, other)

  Added.

  This is much the same as (({str[n, 0] = other})) except returing
  self.

: String#lstrip, rstrip, lstrip!, rstrip!

  Added.  These strip only left or right part of a string.

: String#match

  Added.

: String/Array methods

  returns an instance of receivers class.

: String.new

  The first argument becomes optional.

: Symbol#intern

  Added.

: Symbol.all_symbols

  Added. [ruby-dev:12921]

: SystemCallError.===

  Added. (See the "Comparison of exception classes in a rescue clause"
  paragraph above) [ruby-dev:12670]

: SystemExit#status

  Added.

: TCPServer#listen, UNIXServer#listen

  Added.

: TCPSocket.new
: TCPSocket.open

  Extended to take an address and a port number for the local side in
  optional 3rd and 4th arguments.

: Time

  Extended to accept a negative time_t. (Only when the platform
  supports it)

    p Time.at(-1)
    => Thu Jan 01 08:59:59 JST 1970

: Time#to_a
: Time#zone

  Made to return "UTC" under gmtime.  It used to return a platform
  dependent value, typically "GMT", in 1.6 and prior.

To be investigated:

 Sat Feb 24 03:15:49 2001  Yukihiro Matsumoto  <matz@@ruby-lang.org>

        * io.c (set_stdin): preserve original stdin.

        * io.c (set_outfile): preserve original stdout/stderr.

@


1.48
log
@OptionParser
@
text
@d1 4
@


1.47
log
@* NEWS: add note for net/http's incompatibility.
@
text
@d1 4
@


1.46
log
@* parse.y (words, qwords): word list literal rules.

* parse.y (parse_string): ditto.

* parse.y (yylex): %W: word list literal with interpolation. [new]
@
text
@d366 5
@


1.45
log
@updated to the new version (based on date2 3.3).
@
text
@d3 11
@


1.44
log
@* parse.y: yyparse #defines moved from intern.h

* ruby.c (proc_options): access prefixed "ruby_yydebug".

* applied modifies to pacify some of gcc -Wall warnings.

* parse.y (arg): no more ugly hack for "**", so that "-2**2" to be
  parsed as "(-2)**2", whereas "- 2**2" or "-(2)**2" to be parsed
  as "-(2**2)".

* parse.y (yylex): '-2' to be literal fixnum. [new]

* time.c (time_succ): new method for Range support.

* time.c (time_arg): nil test against v[6] (usec).
@
text
@d21 4
@


1.43
log
@* ruby.c (proc_options): removed "-*-" support for #! line.

* io.c (rb_io_s_sysopen): new method to get a raw file
  descriptor. [new]

* ext/socket/socket.c (tcp_sysaccept): new method to return an
  accepted socket fd (integer). [new]

* ext/socket/socket.c (unix_sysaccept,sock_sysaccept): ditto.
@
text
@d1 4
@


1.42
log
@added a summary of the changes in the new date.
@
text
@d1 8
@


1.41
log
@* eval.c (rb_thread_join): added an argument to limit time to wait
  the thread.

* eval.c (rb_thread_join_m): new. and added optional argument.
@
text
@d1 8
@


1.40
log
@* ext/Setup*, ext/bigfloat/*: Back out the import of BigFloat in
  favor of its forthcoming successor, BigDecimal.
@
text
@d1 5
@


1.39
log
@Add entries to each Setup.* and remove Changes files.
@
text
@a8 5
: BigFloat

  Imported courtesy of Shigeo Kobayashi.  Variable precision extension
  library.

@


1.38
log
@* io.c (rb_io_sysseek): new method based on a patch from Aristarkh
  A Zagorodnikov <xm@@bolotov-team.ru>. [new]

* io.c (READ_DATA_PENDING): use !feof(fp) for default behavior.
@
text
@d1 4
@


1.37
log
@* lib/fileutils.rb: new file.
* lib/README: add fileutlis.rb.
* doc/NEWS: add fileutils.rb.
@
text
@d1 4
@


1.36
log
@add raccrt, strscan entry
@
text
@d25 4
d31 1
a31 1
  Imported. Racc runtime library (Racc is a parser generator for ruby).
@


1.35
log
@Mention the import of BigFloat.
@
text
@d25 4
d36 4
@


1.34
log
@* re.c (rb_reg_search): should clear last_match if pos is out of
  string range.

* string.c (rb_str_index_m): ditto.

* string.c (rb_str_rindex): ditto.

* class.c (rb_define_class): should handle autoload.

* class.c (rb_define_module): ditto.
@
text
@d1 5
@


1.33
log
@* ext/iconv: imported.
@
text
@d1 8
@


1.32
log
@* dir.c: FNM_PERIOD is obsoleted and FNM_DOTMATCH is introduced
  instead, which has the opposite meaning of FNM_PERIOD.

* dir.c: Dir::glob now accepts optional FNM_* flags via the second
  argument, whereas Dir::[] doesn't.
@
text
@d1 4
@


1.31
log
@* lib/getopts.rb: single_options can be nil[*], and is not not
  optional. ([*]Pointed out by gotoken)
@
text
@d1 1
a1 1
: getopts.rb
d3 4
a6 8
  Rewrote to fix some bugs and complete features.
    - Accept options with the colon in the first argument;
      getopts("a:bcd:") is equivalent to getopts("bc", "a:", "d:").
    - Do not discard the argument that caused an error.
    - Do not discard '-', which commonly stands for stdin or stdout.
    - Allow specifying a long option with a value using '='.
      (command --long-option=value)
    - Stop reading options when it meets a non-option argument.
d209 3
d214 2
a215 2
    # exclude files matching "*.bak".
    files.reject! {|fn| File.fnmatch?("*.bak", fn) }
@


1.30
log
@Remove the entries that have already been merged into the stable
branch.

[Note that the NEWS file on this branch should note the differences
from the latest snapshot of the stable branch]
@
text
@d1 11
@


1.29
log
@tsort description modifed.
@
text
@a119 8
: syslog module

  Imported. UNIX syslog interface.

: forwardable module

  Imported. Method delegation library.

a122 4

: uri module

  Imported. URI library.
@


1.28
log
@tsort library added.
@
text
@d1 1
a1 1
: tsort library
d3 1
a3 1
  added.
@


1.27
log
@StringIO.
@
text
@d1 4
@


1.26
log
@* parse.y (expr_value, arg_value, primary_value): value_expr()
  check in place.

* eval.c (block_pass): "&nil" should clear block given.

* dir.c (push_braces): remove MAXPATHLEN dependency.

* dir.c (dir_s_globd): ditto.

* dln.c (init_funcname): ditto.

* dln.c (load_1): ditto.

* dln.c (dln_load): ditto.

* configure.in: add GNU/Hurd switches.

* pack.c (pack_pack): allows comment in template strings.

* pack.c (pack_unpack): ditto.
@
text
@d1 4
@


1.25
log
@* eval.c (is_defined): defined?(Foo::Baz) should check constants
  only, no methods.

* eval.c (is_defined): should not dump core on defined?(a::b)
  where a is not a class nor a module.

* object.c (Init_Object): remove dup and clone from TrueClass,
  FalseClass, and NilClass.

* array.c (rb_ary_fill): Array#fill takes block to get the value to
  fill.

* string.c (rb_str_to_i): to_i(0) auto-detects base radix.

* array.c (rb_ary_initialize): fill by the block evaluation value
  if block is given.
@
text
@d1 8
@


1.24
log
@* class.c (rb_include_module): detect cyclic module inclusion.

* eval.c (rb_thread_cleanup): need not to free thread stacks at
  process termination.

* array.c (rb_ary_fetch): use the block to get the default value
  if the block is given.

* eval.c (rb_thread_schedule): should check time only if BOTH
  WAIT_SELECT and WAIT_TIME.

* eval.c (umethod_bind): should update rklass field.

* hash.c (rb_hash_update): if a block is given, yields [key,
  value1, value2] to the block to resolve conflict.

* string.c (rb_str_split_m): no need to consider KANJI
characters, if the length of separator is 1 (byte).
@
text
@d1 8
@


1.23
log
@* array.c (Init_Array): remove Array#filter.

* object.c (rb_mod_initialize): should accept zero argument.

* object.c (rb_mod_cmp): should raise ArgumentError if
  inheritance/inclusion relation between two classes/modules is
  not defined. [new]

* io.c (rb_io_fsync): new method. [new]
@
text
@d1 8
@


1.22
log
@* doc/NEWS: moved syntax related issues to top of the list.
@
text
@d1 4
@


1.21
log
@* doc/NEWS: sorted by entry name.
* doc/NEWS: modify String#[re,n] entry.
* doc/NEWS: unify method expressions.
@
text
@d23 12
d55 10
a131 12
: Comparison of exception classes in a rescue clause

  Changed to use Module#=== for comparing $! with the exception
  class specified in each rescue clause.

  As the previous behavior was to use kind_of?, the effect is limited
  to the SystemCallError case.  SystemCallError.=== has been newly
  defined to return true when the two have the same errno.  With this
  change, SystemCallError's with the same errno, such as Errno::EAGAIN
  and Errno::EWOULDBLOCK, can both be rescued by listing just one of
  them.

a204 6
: Line-range operation

  Obsoleted except the case when used in a one-liner (ruby -e "..."),
  which means "if 101..200" in a script is no longer interpreted as
  comparison between (({$.})) and 101 or 200.

d260 1
a260 1
: NameError & NoMethodError
a308 5
: Regexp

  It is being obsoleted to regard /re/ as /re/ =~ $_ in a conditional
  context.  Use ~/re/ instead.

d369 1
a369 1
  returns "".
@


1.20
log
@* re.c (match_select): should propagate taintness.

* hash.c (rb_hash_set_default): Hash#default= should return the
  new value.

* string.c (rb_str_to_i): accepts optional base argument. [new]

* numeric.c (rb_fix2str): should not handle negative fixnum values
  int32 via calling sprintf() directly.
@
text
@d1 18
a18 1
: String#to_i
d20 2
a21 1
  Accepts optional base argument.
d23 1
a23 1
: Integer#to_s
d25 2
a26 1
  Accepts optional base argument.
d28 4
a31 1
: TCPServer#listen, UNIXServer#listen
d33 1
a33 1
  Added.
d35 1
a35 1
: String#match
d37 1
a37 1
  Added.
d39 1
a39 1
: Syslog module
d41 1
a41 1
  Imported.
d43 1
a43 1
: String#chomp
d45 1
a45 1
  if $/ == '\n', chops off last newlines (any of \n, \r, \r\n).
d47 2
a48 1
: Module::new/Class::new
d50 11
a60 1
  takes block.
d62 1
a62 1
: allocation framework
d64 1
a64 2
  any instance of class can be allocated by class.allocate,
  (except a few classes).
d66 1
a66 1
: String#[]
d68 1
a68 1
  starting offset can be specified as optional second parameter.
d70 1
a70 1
: String/Array methods
d72 1
a72 1
  returns an instance of receivers class.
d74 1
a74 1
: String::new
d76 1
a76 1
  returns "".
d78 1
a78 1
: Dir#path
d80 2
a81 1
  Added.
d83 1
a83 1
: Enum#sort_by
d87 1
a87 1
: Signal
d89 1
a89 1
  new module, has module functions Signal::trap and Signal::list.
d91 2
a92 1
: Curses
d94 7
a100 2
  Updated.  New methods and constants for using the mouse, character
  attributes, colors and key codes have been added.
d102 1
a102 1
: Range#step([step=1])
d104 2
a105 1
  Added.
d107 2
a108 1
: Regexp
d110 1
a110 2
  It is being obsoleted to regard /re/ as /re/ =~ $_ in a conditional
  context.  Use ~/re/ instead.
d112 2
a113 1
: String#lstrip, rstrip, lstrip!, rstrip!
d115 6
a120 1
  Added.  These strip only left or right part of a string.
d122 1
a122 1
: Socket::pack_sockaddr_in(), Socket::unpack_sockaddr_in()
d124 2
a125 1
  Added.  Utility for direct Socket access.
d127 1
a127 1
: Socket::pack_sockaddr_un(), Socket::unpack_sockaddr_un()
d129 1
a129 1
  Added.  Utility for direct Socket access.
d131 1
a131 1
: String#casecmp
d133 1
a133 1
  Added.  This is a case insensitive version of String#<=>.
d135 1
a135 1
: String#eql?
d137 2
a138 1
  Changed to be always case sensitive.
d140 1
a140 1
: Module#include?
d142 3
a144 1
  Added. [ruby-dev:13941] 
d146 1
a146 1
: Dir::chdir
d151 3
a153 12
    Dir.chdir("/tmp")

    pwd = Dir.pwd	#=> "/tmp"
    puts pwd

    Dir.chdir("foo") {
      pwd = Dir.pwd	#=> "/tmp/foo"
      puts pwd

      Dir.chdir("bar") {	# <-- previously warned
        pwd = Dir.pwd	#=> "/tmp/foo/bar"
        puts pwd
a154 3

      pwd = Dir.pwd	#=> "/tmp/foo"
      puts pwd
d157 4
a160 2
    pwd = Dir.pwd	#=> "/tmp"
    puts pwd
d162 1
a162 4
: Proc#yield

  Added.  This is equivalent to Proc#call except it does not check the
  number of given arguments, which are thus passed to the proc as-is.
d171 1
a171 1
    files.reject! { |fn| File::fnmatch?("*.bak", fn) }
d173 2
a174 1
: Method#==
d178 1
a178 1
: Multiple assignment behavior
d180 1
a180 1
  Fixed so that "*a = nil" results in "a == []".
d182 1
a182 1
: Array expansion
d184 1
a184 1
  Fixed with the following behavior:
d186 1
a186 2
    a = *[1]
    p a #=> [1]
d188 1
a188 1
  Now 1-element array in rhs is expanded properly.
d190 1
a190 2
    a = *[1]
    p a #=> 1
d192 2
a193 1
: NameError & NoMethodError
d195 1
a195 1
  Moved and now NoMethodError < NameError < StandardError.
d197 3
a199 4
: open

  Extended so that when the third argument is permission flags it
  calls open(2) instead of fopen(3).
d207 1
a207 1
: constants
d209 1
a209 2
  Improved at the performance of searching by using an internal hash
  table.
d211 1
a211 1
: Syntax
d213 2
a214 2
  Experimentally altered to get the following code (note the space
  after p):
d216 1
a216 1
    p ("xx"*2).to_i
d218 2
a219 1
  Interpreted as:
d221 7
a227 1
    p (("xx"*2).to_i)
d229 1
a229 1
  Instead of:
d231 1
a231 1
    (p("xx"*2)).to_i
d233 1
a233 1
: Range#to_ary
d235 1
a235 1
  Added.  You can now do something like this:
d237 1
a237 1
    a, b, c = 1..3
d239 1
a239 1
: break and next
d241 1
a241 2
  Extended to take an optional expression, which is used as a value
  for termination. [experimental]
d243 2
a244 1
: to_str
d246 1
a246 1
  Added to get objects which define to_str() treated as String's.
d248 1
a248 2
  Now almost all the built-in methods try each argument with to_str()
  when they expect it to be a String.
d250 1
a250 11
    foo = Object.new
    class <<foo
      def to_str
        "foo"
      end
    end
    p File.open(foo)
    => -:7:in `open': wrong argument type Object (expected String) (TypeError)
       ruby 1.6.4 (2001-04-19) [i586-linux]
    => -:7:in `open': No such file or directory - "foo" (Errno::ENOENT)
       ruby 1.7.0 (2001-05-02) [i586-linux]
d252 1
a252 1
: Line-range operation
d254 1
a254 3
  Obsoleted except the case when used in a one-liner (ruby -e "..."),
  which means "if 101..200" in a script is no longer interpreted as
  comparison between (({$.})) and 101 or 200.
d256 1
a256 1
: Comparison of exception classes in a rescue clause
d258 1
a258 2
  Changed to use ((<Module>))#=== for comparing $! with the exception
  class specified in each rescue clause.
d260 1
a260 6
  As the previous behavior was to use kind_of?, the effect is limited
  to the SystemCallError case.  SystemCallError.=== has been newly
  defined to return true when the two have the same errno.  With this
  change, SystemCallError's with the same errno, such as Errno::EAGAIN
  and Errno::EWOULDBLOCK, can both be rescued by listing just one of
  them.
d262 1
a262 1
: ((<Array>))#fetch
d264 1
a264 1
  Added.
d266 1
a266 1
: ((<Array>))#insert(n, other, ...)
d268 2
a269 1
  Added. ((<ruby-talk:14289>))
d271 1
a271 2
  This is much the same as (({ary[n,0] = [other,...]})) except
  returing self.
d273 1
a273 7
        ary = [0,1,2,3]
        ary[2, 0] = [4, 5, 6]
        p ary

        ary = [0,1,2,3]
        ary.insert(2, 4, 5, 6)
        p ary
d275 1
a275 1
: ((<Array>))#sort!
d277 1
a277 2
  Changed to always return self without checking whether the sequence
  of the elements was modified or not.
d279 2
a280 2
  Beware that this behavior is not guaranteed to continue in the
  future.  Do not rely on its return value. ((<ruby-dev:12506>))$B!%(B
d282 1
a282 1
: ((<Dir>)).open
d284 2
a285 3
  Changed to return what the block returns when a block is given, just
  as ((<File>)).open does. (It always returned (({nil})) in 1.6 and
  prior)
d287 1
a287 1
: ((<Dir>)).chdir
d289 1
a289 1
  Extended to take a block.
d291 1
a291 1
: ((<Dir>)).glob
d293 1
a293 2
  Made to support meta-character escaping by a backslash.  Wildcards
  and spaces may now be escaped using a backslash.
d295 1
a295 3
: ((<Enumerable>))#all?
: ((<Enumerable>))#any?
: ((<Enumerable>))#inject
d299 1
a299 2
: ((<File>)).lchmod
: ((<File>)).lchown
d301 1
a301 1
  Added.
d303 1
a303 1
: ((<IO>)).for_fd
d305 1
a305 1
  Added.
d307 2
a308 1
: ((<IO>)).read
d310 1
a310 1
  Added. ((<ruby-talk:9460>))
d312 1
a312 1
: ((<Interrupt>))
d314 1
a314 2
  Made a subclass of ((<SignalException>)). (It was a subclass of
  Exception in 1.6 and prior)
d316 1
a316 1
: ((<MatchData>))#to_ary
d318 1
a318 1
  Added for convenience of Regexp#match. ((<ruby-dev:12766>))
d320 1
a320 1
  Previously we had to do:
d322 1
a322 2
    foo, bar, baz = /(\w+?)\s+(\w+?)\s+(\w+)/.match("foo bar baz").to_a[1..-1]
    p [foo, bar, baz]
d324 1
a324 1
  But now can do:
d326 1
a326 2
    _, foo, bar, baz = /(\w+?)\s+(\w+?)\s+(\w+)/.match("foo bar baz")
    p [foo, bar, baz]
d328 1
a328 7
: ((<Math>)).acos(x)
: ((<Math>)).asin(x)
: ((<Math>)).atan(x)
: ((<Math>)).cosh(x)
: ((<Math>)).sinh(x)
: ((<Math>)).tanh(x)
: ((<Math>)).hypot(x,y)
d330 1
a330 1
  Added.
d332 1
a332 1
: ((<Module>))#included
d334 2
a335 1
  Added.  This is a hook called after Module#append_feature.
d337 1
a337 2
: ((<Module>))#method_removed
: ((<Module>))#method_undefined
d339 1
a339 1
  Added.
d341 1
a341 1
: ((<NoMethodError>))
d343 1
a343 1
  Added. ((<ruby-dev:12763>))
d345 1
a345 1
: NotImplementError
d347 1
a347 1
  Finally obsoleted.  Use ((<NotImplementedError>)).
d349 1
a349 2
: ((<Object>))#singleton_method_removed
: ((<Object>))#singleton_method_undefined
d353 2
a354 1
: ((<Proc>))#==
d356 1
a356 1
  Added.
d358 1
a358 1
: ((<Process>)).times
d360 1
a360 2
  Moved from ((<Time>)).times. (Time.times still remains but emits a
  warning)
d362 1
a362 1
: ((<Process::Status>))
d364 1
a364 1
  Added.  (({$?})) is now an instance of this class.
d366 1
a366 3
: ((<Process>)).waitall

  Added.
d368 1
a368 1
: ((<Regexp>)).last_match(n)
d370 1
a370 1
  Extended to take an optional argument.
d372 1
a372 1
: ((<Regexp>))#options
d376 1
a376 3
: ((<String>))#insert(n, other)

  Added.
d378 1
a378 2
  This is much the same as (({str[n, 0] = other})) except returing
  self.
d380 1
a380 1
: ((<Symbol>)).all_symbols
d382 2
a383 1
  Added. ((<ruby-dev:12921>))
d385 1
a385 1
: ((<Symbol>))#intern
d389 1
a389 6
: ((<SystemCallError>)).===

  Added. (See the "Comparison of exception classes in a rescue clause"
  paragraph above) ((<ruby-dev:12670>))

: ((<SystemExit>))#status
d393 2
a394 2
: ((<TCPSocket>)).new
: ((<TCPSocket>)).open
d399 1
a399 1
: ((<Time>))
d407 2
a408 2
: ((<Time>))#to_a
: ((<Time>))#zone
@


1.19
log
@* time.c (time_plus): result should not be negative unless
  NEGATIVE_TIME_T is defined.

* time.c (time_new_internal): should check tv_sec overflow too.

* time.c (time_timeval): should check time_t range when time is
  initialized from float.

* time.c (time_plus): uses modf(3).

* variable.c (rb_cvar_set): add frozen class/module check.

* variable.c (rb_cvar_declare): add frozen class/module check.

* re.c (match_to_a): should propagate taint.

* re.c (rb_reg_s_quote): ditto.
@
text
@d1 8
a23 4

: IO#puts

  do not treat Array specially.
@


1.18
log
@Import the "syslog" module from the rough ruby project.  This module
provides the interface to the UNIX system logger (syslog).
@
text
@d1 8
@


1.17
log
@* process.c (security): always give warning for insecure PATH.

* dir.c (my_getcwd): do not rely on MAXPATHLEN.

* file.c (rb_file_s_readlink): ditto.

* file.c (path_check_1): ditto.

* eval.c (rb_yield_0): should not call rb_f_block_given_p().

* string.c (rb_str_chomp_bang): should terminate string by NUL.

* eval.c (rb_yield_0): better error message.
@
text
@d1 4
@


1.16
log
@* parse.y (yylex): ternary ? can be followed by newline.

* eval.c (rb_f_require): should check static linked libraries
  before raising exception.

* array.c (rb_ary_equal): check identiry equality first.

* string.c (rb_str_equal): ditto.

* struct.c (rb_struct_equal): ditto.

* numeric.c (Init_Numeric): undef Integer::new.

* eval.c (rb_eval): NODE_WHILE should update result for each
  conditional evaluation.

* eval.c (rb_eval): NODE_UNTIL should return last evaluated value
  (or value given to break).
@
text
@d1 33
@


1.15
log
@Mention ext/curses.
@
text
@d1 8
@


1.14
log
@* range.c (range_step): new method.

* string.c (rb_str_cmp): remove needless conditional.

* string.c (rb_str_lstrip_bang) `return Qnil' was missing.
@
text
@d1 5
a38 13
: Digest module

  Added as a replacement for md5 and sha1 modules.

    require 'digest/md5'
    include Digest

    md = MD5.new
    md << "abc"
    puts md

    puts MD5.hexdigest("123")

a143 9

: SHA1 module

  ruby-sha1 1.2 is newly imported as a standard library, which shares
  a common interface with the existing md5 module.

: MD5#<<

  Added as an alias for MD5#update.
@


1.13
log
@Update.
@
text
@d1 4
@


1.12
log
@Update.
@
text
@d1 5
@


1.11
log
@* string.c (rb_str_lstrip_bang): new method.

* string.c (rb_str_rstrip_bang): new method.

* string.c (rb_str_associate): should consider STR_ASSOC too.

* eval.c (rb_undefined): do not recurse if method_missing is
  undefined.

* process.c (proc_waitpid): now all arguments are optional.

* process.c (Init_process): waitpid is now alias to wait.

* process.c (Init_process): waitpid2 is now alias to wait2.

* process.c (rb_waitpid): made public.

* ext/pty/pty.c (pty_getpty): avoid disturbing SIGCHLD using
  thread and rb_waitpid.

* process.c (proc_getpgrp): now takes no argument on all
  platforms.

* process.c (proc_setpgrp): ditto.

* ext/socket/socket.c (sock_s_pack_sockaddr_in): added
  Socket::pack_sockaddr_in(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_un): added
  Socket::pack_sockaddr_un(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_in): added
  Socket::unpack_sockaddr_in(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_un): added
  Socket::unpack_sockaddr_un(). [new]
@
text
@d1 4
@


1.10
log
@Update.
@
text
@d1 8
@


1.9
log
@Update.
@
text
@d1 12
@


1.8
log
@Reflect the previous backport.
@
text
@d1 39
@


1.7
log
@* ext/readline/readline.c: add new methods:
  Readline::completion_append_character and
  Readline::completion_append_character=.k
@
text
@a0 5
: Readline::completion_append_characte
: Readline::completion_append_character=

  Added.

@


1.6
log
@Update.
@
text
@d1 5
@


1.5
log
@* dir.c (Init_Dir): add a new method File::fnmatch? along with
  File::Constants::FNM_*.  While I am here, FNM_NOCASE is renamed
  to FNM_CASEFOLD which is commonly used by *BSD and GNU libc.
@
text
@d1 5
@


1.4
log
@Update.
@
text
@d1 9
@


1.3
log
@Add an entry.
@
text
@d1 4
@


1.2
log
@Update.
@
text
@d1 4
@


1.1
log
@Add NEWS, in which we describe the changes that affect users.
@
text
@d1 32
@


1.1.2.1
log
@Add NEWS, in which we describe the changes that affect users.
@
text
@d1 1
a1 1
Summary of the changes since 1.6.3:
d3 2
a4 1
: Hash#replace
d6 1
a6 1
  Fixed so the following code does not fail in core dump.
d8 1
a8 2
    h  = { 10 => 100, 20 => 200 }
    h2 = { }
d10 11
a20 6
    h.each { |k, v|
      if (k == 10)
        h.delete(10)
        h2.replace(h)  # => Abort core dumped
      end
    }
d22 1
a22 1
: File::unlink
d24 2
a25 1
  Changed to be forbidden under $SAFE >= 2.
d27 1
a27 1
: ruby -T4
d29 2
a30 2
  Fixed.  ARGV is now properly marked as tainted so ruby -T4 no longer
  fails in SecurityError.
d32 1
a32 1
: Regexp
d34 1
a34 2
  Fixed.  Now \1 .. \9 always mean backreferences, and referring to
  unclosed/unmatched parentheses always fails.
d36 1
a36 1
: String taint infection
d38 1
a38 1
  Fixed for the following cases.  [ruby-dev:13340]
d40 2
a41 5
  # []=
  s1 = "abc"
  s2 = "cde".taint
  s1[0]= s2
  p s1.tainted?             # => false
d43 11
a53 3
  # crypt
  s = "abc".taint
  p s.crypt("cd").tainted?  # => false
d55 1
a55 3
  # ljust
  s = "abc".taint
  p s.ljust(10).tainted?    # => false
d57 3
a59 3
  # rjust
  s = "abc".taint
  p s.rjust(10).tainted?    # => false
d61 1
a61 3
  # center
  s = "abc".taint
  p s.center(10).tainted?   # => false
d63 2
a64 1
  Now they will all be marked as tainted.
d66 6
a71 1
: rb_yield_0()
d73 1
a73 2
  Fixed so it adjusts a 1-element array when yielded from C API, as
  well.  Previously, the following code produced a wrong result:
d75 1
a75 2
    class X
      include Enumerable
d77 1
a77 6
      def each(&block)
        block.call(1)
        block.call(2)
        block.call(3)
      end
    end
d79 1
a79 2
    x = X.new
    p x.to_a #=> [[1], [2], [3]]
d81 2
a82 1
  Now it properly produces [1, 2, 3].
d84 3
a86 1
: $SAFE
d88 3
a90 2
  Fixed so aliasing global valiables is disallowed under $SAFE = 4.
 ((<ruby-dev:13287>))
d92 1
a92 1
: Open3::popen3
d94 2
a95 2
  Fixed to do exit! instead of exit so the dying process does not
  invoke at_exit. ((<ruby-dev:13170>))
d97 2
a98 1
: SizedQueue#pop
d100 1
a100 2
  Fixed so the following code does not cause a dead lock.
  ((<ruby-dev:13169>))
d102 3
a104 2
    ruby -r thread -e 'q = SizedQueue.new(1); q.push(1);'
                   -e 'Thread.new{sleep 1; q.pop}; q.push(1);'
d106 1
a106 1
: SizedQueue#max=
d108 1
a108 1
  Fixed so it really works. ((<ruby-dev:13170>))
d110 1
a110 2
: Queue
: SizedQueue
d112 2
a113 2
  Fixed to rescue ThreadError in case the thread is dead just before
  calling Thread#run. ((<ruby-dev:13194>))
d115 3
a117 3
: Array#&
: Array#|
: Array#uniq
d119 1
a119 1
  Fixed so they do not freeze the elements. ((<ruby-list:29665>))
d121 2
a122 2
    (%w(foo bar) & %w(foo baz))[0].upcase!
    => -:1:in `upcase!': can't modify frozen string (TypeError)
d124 1
a124 2
    %w(foo bar bar baz).uniq[0].upcase!
    => -:1:in `upcase!': can't modify frozen string (TypeError)
d126 1
a126 1
: shell.rb
d128 1
a128 2
    shell.rb 0.6 is newly imported as a standard library, along with
    documents.
d130 1
a130 1
: forwardable.rb
d132 1
a132 2
    forwardable.rb 1.1 is newly imported as a standard library, along with
    documents.
d134 1
a134 1
: irb & irb-tools
d136 2
a137 1
    irb and irb-tolls are updated to 0.7.4 and 0.7.1, respectively.
d139 1
a139 1
: Daylight saving time
d141 1
a141 1
  Fixed so it is handled correctly. [ruby-bugs-ja (PR#46)]
d143 1
a143 4
    env TZ=America/Managua ruby -e 'p Time.local(1998,12,1,0,59,59)'
    => Mon Nov 30 01:59:59 EST 1998
    env TZ=America/Managua ruby -e 'p Time.local(1998,12,1,0,59,59).tv_sec'   
    => 912409199
d145 2
a146 1
: SIGINFO
d148 1
a148 1
  Support SIGINFO of 4.4BSD.  [ruby-bugs-ja (PR#45)]
d150 2
a151 1
: Modifier rescue
d153 7
a159 2
  Fixed so the following code does not emit a parse error any more.
  ((<ruby-dev:13073>)), ((<ruby-dev:13292>))
d161 1
a161 4
    raise "" rescue []
    raise "" rescue (p "foo"; true)
    raise "" rescue -1
    raise "" rescue (-1)
d163 1
a163 1
: Thread
d165 1
a165 1
  Fixed so the following code does not cause a dead lock any more.
d167 2
a168 2
    Thread.start { Thread.stop }
    sleep
d170 1
a170 5
    => deadlock 0x40199b58: 2:0  - -:1
       deadlock 0x401a2528: 2:4 (main) - -:2
       -:2:in `sleep': Thread: deadlock (fatal)
               from -:2
       ruby 1.6.3 (2001-03-19) [i586-linux]
d172 1
a172 3
: Module#const_defined?
: Module#const_get
: Module#const_set
d174 1
a174 2
  Fixed so they do not access to anything other than constants.
  ((<ruby-dev:13019>))
d176 1
a176 1
: Marshal.dump
d178 1
a178 2
  Improved so it dumps Float with better precision: "%.12g" -> "%.16g"
  ((<ruby-list:29349>))
d180 2
a181 1
: Fixnum#[]
d183 1
a183 1
  Fixed a bug on the platforms which sizeof(long) > sizeof(int).
d185 1
a185 1
: Regular Expression
d187 1
a187 1
  Fixed a couple of minor bugs. ((<ruby-talk:13658>)), ((<ruby-talk:13744>))
d189 1
a189 1
: retry
d191 2
a192 1
  Fixed so the following code works correctly again. ((<ruby-talk:13957>))
d194 1
a194 5
        def WHILE(cond)
          return if not cond
          yield
          retry
        end
d196 1
a196 5
        i=0
        WHILE(i<3) {
          print i
          i+=1
        }
d198 1
a198 2
        ruby 1.6.2 (2000-12-25) [i586-linux]
        => 012
d200 1
a200 2
        ruby 1.6.3 (2001-03-19) [i586-linux]
        => 0
d202 1
a202 2
        ruby 1.6.4 (2001-05-02) [i586-linux]
        => 012
d204 1
a204 1
: ((<File::Stat>))#size
d206 1
a206 1
  Fixed to return a correct value for files larger than 1G bytes.
d208 1
a208 6
        File.open("/tmp/1GB", "w") {|f|
          f.seek(2**30-1, 0)
          f.puts
          f.flush
          p f.stat.size
        }
d210 1
a210 4
        # => ruby 1.6.3 (2001-04-03) [i586-linux]
             -1073741824
        # => ruby 1.6.4 (2001-04-19) [i586-linux]
             1073741824
d212 1
a212 1
: ((<Float>))#modulo, ((<Float>))#divmod
d214 2
a215 1
  Fixed. ((<ruby-dev:12718>))
d217 1
a217 1
: ((<ObjectSpace>))#_id2ref
d219 1
a219 1
  Fixed so it does not raise a  exception.
d221 1
a221 1
: recursive malloc problem
d223 1
a223 2
  Fixed by preallocating a buffer for stdio using setvbuf().
  ((<ruby-dev:12795>))
d225 1
a225 1
: ((<File>))#flock
d227 2
a228 3
  Fixed so it does not raise Errno::EACCES when the file to flock is
  already locked. (only applicable to the platforms which lack
  flock())
d230 1
a230 1
: ((<File::Stat>)).new(filename)
d232 1
a232 1
  Added. ((<ruby-dev:12803>))
d234 2
a235 1
: ((<Bignum>))#% miscalculation
d237 2
a238 1
  (Re-)Fixed.
d240 1
a240 4
        a = 677330545177305025495135714080
        b = 14269972710765292560
        p a % b  #=> 0
        p -a % b #=> 
d242 2
a243 3
        => ruby 1.6.3 (2001-04-02) [i386-cygwin]
           0
           14269972710765292560
d245 2
a246 3
        => ruby 1.6.4 (2001-04-19) [i586-linux]
           0
           0
d248 2
a249 1
: ((<Marshal>))
d251 2
a252 1
  Fixed so a Bignum is properly restored through dump & load.
d254 1
a254 1
: Universal Naming Convention(UNC) support (win32)
d256 1
a256 3
  Added.  Now the UNC form (//host/share) is supported.  Use slash
  (`(({/}))') instead of backslash (`(({\}))') for separating
  components.
d258 1
a258 1
: ((<Dir>)).glob (win32)
d260 1
a260 1
  Fixed so it works for the current directory as well.
a261 2
        p Dir["./*.c"]
        => []
@


1.1.2.2
log
@Update.
@
text
@a0 14
Summary of the changes since 1.6.4:

: $SAFE

  Fixed so defining a new method is allowed under $SAFE == 4, which
  previously wasn't.

    ruby -e '$SAFE = 4; def a; end'
    => -e:1: Insecure operation `(null)' at level 4 (SecurityError)

: IO#ioctl

  Fixed to accept a Bignum as the second argument.

d81 2
a82 2
  Fixed so aliasing global valiables is disallowed under $SAFE == 4.
  ((<ruby-dev:13287>))
@


1.1.2.3
log
@Update.
@
text
@d3 1
a3 20
: $SAFE / load

  Fixed a bug that a file with a tainted filename can be loaded even
  under $SAFE == 1 when the second argument is true.  [ruby-dev:13481]

    $SAFE = 1
    filename = "foo"
    filename.taint
    load(filename, true)
    #=> true

: Regexp

  Fixed for the following case.  [ruby-talk:16233]

    ruby -e 'puts "OK" if /(.|a)bd/ =~ "cxbd"'
    ruby -e 'puts "OK" if /(a|.)bd/ =~ "cxbd"'
    #=> OK

: $SAFE / def
d31 1
a31 1
: $SAFE / File::unlink
d93 1
a93 1
: $SAFE / alias
@


1.1.2.4
log
@Add an entry.
@
text
@a2 5
: lib/sync.rb
: lib/mutex_m.rb

  Fixed for obj.extend(Sync_m) and obj.extend(Mutex_m).

@


1.1.2.5
log
@* hash.c (ruby_setenv): readline library leaves their environment
  strings uncopied.  "free" check revised.

* st.c (numhash): should shuffle bits by dividing by prime number.
@
text
@d119 1
a119 1
  Fixed so aliasing global variables is disallowed under $SAFE == 4.
d169 1
a169 1
    irb and irb-tools are updated to 0.7.4 and 0.7.1, respectively.
@


1.1.2.6
log
@Update.
@
text
@a2 13
: require

  Changed to search directories for ".rb" and ".so" at the same time,
  instead of search directories for ".rb" then for ".so".  The
  previous behavior had a security risk. [ruby-bugs (PR#140)]

  Which means, now:

    require "socket"

  will find the standard socket.so prior to a socket.rb in the current
  directory.

d10 2
a11 2
  Fixed a bug that a file with a tainted filename can be loaded when
  1 <= $SAFE <= 3 and the second argument is true.  [ruby-dev:13481]
@


1.1.2.7
log
@Mention that Socket::SO_* was added.
@
text
@a2 4
: Socket::SO_*

  Added.

@


1.1.2.8
log
@* ext/readline/readline.c (readline_event): merge from 1.7: a
  non-void function should return a value.

* ext/readline/readline.c: merge from 1.7: add new methods:
  Readline::completion_append_character and
  Readline::completion_append_character=.

* ext/readline/README, ext/readline/README.jp: merge from 1.7: add
  an English version of the document.
@
text
@a2 5
: Readline::completion_append_characte
: Readline::completion_append_character=

  Added.

@


1.1.2.9
log
@Update.
@
text
@a2 42
: require

  Fixed with handling of a `~' to allow an extention to be omitted.
  [ruby-dev:13756)

    $ echo p __FILE__ > ~/a.rb
    $ ruby17 -v -r~/a -e0
    ruby 1.7.1 (2001-07-03) [i686-linux]
    0: No such file to load -- ~/a (LoadError)
    $ ruby16 -v -r~/a -e0
    ruby 1.6.4 (2001-07-02) [i686-linux]
    0: No such file to load -- ~/a (LoadError)
    $ ruby14 -v -r~/a -e0
    ruby 1.4.6 (2000-08-16) [i686-linux]
    "/home/nobu/a.rb"

: String#each_line

  Fixed to properly propagate taintness. [ruby-dev:13755]

: NKF::nkf

  Fixed to properly propagate taintness. [ruby-dev:13754]

: ruby -x

  Fixed a bug that when a `-x' is specified the interpreter might exit
  without running a script. [ruby-dev:13752]

: attr_*

  Fixed to raise an error when unwanted parameters are given.
  [ruby-dev:13748]

    class C
      def initialize
	@@message = 'ok'
      end
      attr_reader :message
    end
    puts C.new.message(1,2,3) # raises ArgumentError

@


1.1.2.10
log
@Update.
@
text
@a2 9
: String#rindex

  Fixed with a bug when a regex is given. [ruby-dev:13843]

    "foobar".index("b")  #=> 3
    "foobar".index(/b/)  #=> 3
    "foobar".rindex("b") #=> 3
    "foobar".rindex(/b/) #=> nil  <- ???

d29 1
a29 1
  Fixed with a bug that when a `-x' is specified the interpreter might exit
d74 1
a74 1
  Fixed with a bug that a file with a tainted filename can be loaded when
d285 1
a285 1
  Fixed with a bug on the platforms which sizeof(long) > sizeof(int).
d289 1
a289 1
  Fixed with a couple of minor bugs. ((<ruby-talk:13658>)), ((<ruby-talk:13744>))
@


1.1.2.11
log
@Update the require/$LOADPATH paragraph.
@
text
@d63 1
a63 1
: require / $LOAD_PATH
d65 3
a67 1
  Changed to use a new algorithm to locate a library.
d69 1
a69 2
  Now when requiring "foo", the following directories are searched for
  the library in the order listed.
d71 1
a71 12
    $prefix/lib/ruby/site_ruby/$ver/foo.rb
    $prefix/lib/ruby/site_ruby/$ver/foo.so
    $prefix/lib/ruby/site_ruby/$ver/$arch/foo.rb
    $prefix/lib/ruby/site_ruby/$ver/$arch/foo.so
    $prefix/lib/ruby/site_ruby/foo.rb
    $prefix/lib/ruby/site_ruby/foo.so
    $prefix/lib/ruby/$ver/foo.rb
    $prefix/lib/ruby/$ver/foo.so
    $prefix/lib/ruby/$ver/$arch/foo.rb
    $prefix/lib/ruby/$ver/$arch/foo.so
    ./foo.rb
    ./foo.so
d73 2
a74 4
  The previous behavior had a potential security risk because a
  foo.rb (if exists) in the current directory is located prior to a
  foo.so in $prefix/lib/ruby/site_ruby/$ver/$arch.
  [ruby-bugs (PR#140)]
@


1.1.2.12
log
@Update.
@
text
@a2 4
: Struct

  Fixed to check frozen and taint status before modifying.

@


1.1.2.13
log
@Mention ext/digest.
@
text
@a2 13
: Digest module

  Added as a replacement for md5 and sha1 modules.

    require 'digest/md5'
    include Digest

    md = MD5.new
    md << "abc"
    puts md

    puts MD5.hexdigest("123")

@


1.1.2.14
log
@Mention the import of the syslog module.
@
text
@a2 4
: Syslog module

  Imported.

@


1.1.2.15
log
@forgot to commit everything bug ChangeLog
@
text
@d1 1
a1 1
Summary of the changes since 1.6.5:
@


1.1.2.16
log
@Add user visible changes after 1.6.5.
@
text
@a0 80
Summary of the changes since 1.6.7:

: Marshal.dump

  Fixed where Marshal::dump(foo, proc{...}) fails. (which was
  accidentally broken between 1.6.6 and 1.6.7)

Summary of the changes since 1.6.6:

: Digest::SHA2

  Fixed where it had a couple of off-by-one errors in the algorithm
  implementation.

: Digest

  Fixed where it polluted namespace by defining some global symbols
  that conflict with OpenSSL.

: Syslog

  Changed from a singleton class to a module for ease of use, keeping
  backward compatibility intact.

: URI::join

  Added.

: URI

  Fixed where some methods did not conform to the RFC's in some
  (rather trivial) points.

: Float()

  Enhanced so that it allows underscores between digits.

: net/protocol: Protocol#start

  Now returns the return value of the given block.

: net/protocol

  Fixed to set timeout limit by default, and set read_timeout
  dynamically.

: net/smtp

  Fixed not to resolve HELO domain automatically.

: net/http: HTTP#{request_get,request_post}

  Renamed from get2 and post2, respectively.

: net/pop: POP#auth_only

  Fixed.

: $SAFE / block

  Fixed not to pass a tainted block if $SAFE > 0.

: ruby-mode.el

  Now handles nested parentheses in a string and terminators in #{},
  and fontifies instance/class/global variables that start with '_'.

: Time#{gmtoff,gmt_offset,utc_offset}

  Added.

: time.rb

  Imported. (which is formerly known as "timex.rb")

: bugfixes

  Numeral bugs have been fixed.  There are too many to mention here.
  Please refer to ChangeLog.

@


1.1.2.17
log
@* lib/getopts.rb: Merge from 1.7.  Rewrite to fix some bugs and
  complete features.
    - Accept options with the colon in the first argument;
      getopts("a:bcd:") is equivalent to getopts("bc", "a:", "d:").
    - Do not discard the argument that caused an error.
    - Do not discard '-', which commonly stands for stdin or stdout.
    - Allow specifying a long option with a value using '='.
      (command --long-option=value)
    - Stop reading options when it meets a non-option argument.
@
text
@a2 11
: getopts.rb

  Rewrote to fix some bugs and complete features.
    - Accept options with the colon in the first argument;
      getopts("a:bcd:") is equivalent to getopts("bc", "a:", "d:").
    - Do not discard the argument that caused an error.
    - Do not discard '-', which commonly stands for stdin or stdout.
    - Allow specifying a long option with a value using '='.
      (command --long-option=value)
    - Stop reading options when it meets a non-option argument.

@
