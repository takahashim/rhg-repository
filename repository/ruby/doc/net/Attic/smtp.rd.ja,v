head	1.7;
access;
symbols
	v1_6_7:1.1.2.5
	v1_6_6:1.1.2.4
	v1_6_5:1.1.2.1
	ruby_1_6:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2002.07.11.21.35.32;	author aamine;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.26.11.17.13;	author aamine;	state dead;
branches;
next	1.5;

1.5
date	2001.12.30.19.18.45;	author aamine;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.13.19.15.21;	author aamine;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.09.08.58.30;	author aamine;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.17.03.08.45;	author aamine;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.18.20.45.55;	author aamine;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.07.18.20.57.42;	author aamine;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.12.07.09.40.16;	author aamine;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.12.07.10.12.52;	author aamine;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.12.09.08.58.06;	author aamine;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2002.01.15.03.34.59;	author aamine;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* doc/net/smtp.rd.ja: add note for RubyMail/TMail.
@
text
@=begin

= net/smtp.rb

== このライブラリについて

メールを送信するためのプロトコル SMTP (Simple Mail Transfer Protocol)
を扱うライブラリです。ヘッダなどメールのデータを扱うことはできません。
SMTP の実装は RFC2821 に基いています。

  * RFC2821 ((<URL:http://www.ietf.org/rfc/rfc2821.txt>))

== メールの編集について

このライブラリができるのは送信だけです。メールヘッダの編集機能などは
ありません。高度な編集機能が必要なら、TMail や RubyMail のような
ライブラリを併用してください。いずれも RAA からダウンロードできます。
またインターネットメールフォーマットの正式な規格書は RFC2822 です。

  * RAA ((<URL:http://www.ruby-lang.org/en/raa.html>))
  * RFC2822 ((<URL:http://www.ietf.org/rfc/rfc2822.txt>))

== 使用例

=== とにかくメールを送る

SMTP を使ってメールを送るにはまず SMTP.start でセッションを開きます。
第一引数がサーバのアドレスで第二引数がポート番号です。
ブロックを使うと File.open と同じように終端処理を自動的にやってくれる
のでおすすめです。

    require 'net/smtp'
    Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
        # use smtp object only in this block
    }

your.smtp.server は適切な SMTP サーバのアドレスに読みかえてください。
通常は LAN の管理者やプロバイダが SMTP サーバを用意してくれているはずです。

セッションが開いたらあとは send_mail でメールを流しこむだけです。

    require 'net/smtp'

    Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
        smtp.send_mail <<EndOfMail, 'your@@mail.address', 'to@@some.domain'
    From: Your Name <your@@mail.address>
    To: Dest Address <to@@some.domain>
    Subject: test mail
    Date: Sat, 23 Jun 2001 16:26:43 +0900
    Message-Id: <unique.message.id.string@@some.domain>

    This is test mail.
    EndOfMail
    }

=== セッションを終了する

メールを送ったら SMTP#finish を呼んでセッションを終了しなければいけ
ません。File のように GC 時に勝手に close されることもありません。
いろいろなところで finish がないソースコードの例を見掛けますが、
すべて誤りです。finish は必ず呼んでください。

またブロック付きの SMTP.start/SMTP#start を使うと勝手に finish を
呼んでくれるので便利です。可能な限りブロック付きの start を使うのが
よいでしょう。

    # using SMTP#finish
    smtp = Net::SMTP.start( 'your.smtp.server', 25 )
    smtp.send_mail mail_string, 'from@@address', 'to@@address'
    smtp.finish

    # using block form of SMTP.start
    Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
        smtp.send_mail mail_string, 'from@@address', 'to@@address'
    }

=== 文字列以外からの送信

ひとつ上の例では文字列リテラル(ヒアドキュメント)を使って送信しましたが、
each メソッドを持ったオブジェクトからならなんでも送ることができます。
以下は File オブジェクトから直接送信する例です。

    require 'net/smtp'
    Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
        File.open( 'Mail/draft/1' ) {|f|
            smtp.send_mail f, 'your@@mail.address', 'to@@some.domain'
        }
    }

=== HELO ドメイン

SMTP ではメールを送る側のホストの名前 (HELO ドメインと呼ぶ) を要求
されるのですが、Net::SMTP ではとりあえず localhost.localdomain と
いう名前を送信しています。たいていの SMTP サーバはこの HELO ドメイン
による認証はあまり真面目に行わないので (簡単に偽造できるからです)
問題にならないことが多いのですが、まれにメールセッションを切られる
こともあります。そういうときはとりあえず HELO ドメインを与えてみて
ください。もちろんそれ以外の時も HELO ドメインはちゃんと渡すのが
ベストです。

HELO ドメインは SMTP.start/SMTP#start の第三引数 helo_domain に指定
します。

    Net::SMTP.start( 'your.smtp.server', 25,
                     'mail.from.domain' ) {|smtp|

よくあるダイヤルアップホストの場合、HELO ドメインには ISP のメール
サーバのドメインを使っておけばたいてい通ります。

== class Net::SMTP

=== クラスメソッド

: new( address, port = 25 )
    新しい SMTP オブジェクトを生成します。address はSMTPサーバーのFQDNで、
    port は接続するポート番号です。ただし、このメソッドではまだ接続はしません。

: start( address, port = 25, helo_domain = 'localhost.localdomain', account = nil, password = nil, authtype = nil )
: start( address, port = 25, helo_domain = 'localhost.localdomain', account = nil, password = nil, authtype = nil ) {|smtp| .... }
    以下と同じです。
        Net::SMTP.new(address,port).start(helo_domain,account,password,authtype)

        # example
        Net::SMTP.start( 'your.smtp.server' ) {
            smtp.send_mail mail_string, 'from@@mail.address', 'dest@@mail.address'
        }

=== メソッド

: start( helo_domain = <local host name>, account = nil, password = nil, authtype = nil )
: start( helo_domain = <local host name>, account = nil, password = nil, authtype = nil ) {|smtp| .... }
    TCP コネクションを張り、同時に SMTP セッションを開始します。そのとき、
    こちらのホストの FQDN を helo_domain に指定します。
    もしすでにセッションが開始していたら IOError を発生します。

    account と password の両方が与えられた場合、AUTH コマンドによって
    認証を行います。authtype は使用する認証のタイプで、シンボル
    で :plain か :cram_md5 を指定します。

: active?
    SMTP セッションが開始されていたら真。

: address
    接続するアドレス

: port
    接続するポート番号

: open_timeout
: open_timeout=(n)
    接続時に待つ最大秒数。この秒数たってもコネクションが
    開かなければ例外 TimeoutError を発生します。

: read_timeout
: read_timeout=(n)
    読みこみ (read(1) 一回) でブロックしてよい最大秒数。
    この秒数たっても読みこめなければ例外 TimeoutError を発生します。

: finish
    SMTP セッションを終了します。セッション開始前にこのメソッドが
    呼ばれた場合は例外 IOError を発生します。

: send_mail( mailsrc, from_addr, *to_addrs )
    mailsrc をメールとして送信します。mailsrc は each イテレータを持つ
    オブジェクトならなんでも構いません (たとえば String や File)。
    from_domain は送り主のメールアドレス ('...@@...'のかたちのもの) で、
    to_addrs には送信先メールアドレスを並べます。

        # example
        Net::SMTP.start( 'your.smtp.server' ) {|smtp|
            smtp.send_mail mail_string,
                           'from@@mail.address',
                           'dest@@mail.address' 'dest2@@mail.address'
        }

: ready( from_addr, *to_addrs ) {|adapter| .... }
    メール書きこみの準備をしたうえで、write メソッドを持つオブジェクトを
    ブロックにあたえます。from_addr は送信元メールアドレスで to_addrs は
    宛先のメールボックスです。

        # example
        Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
	    smtp.ready( 'from@@mail.addr', 'dest@@mail.addr' ) {|f|
                f.puts 'From: aamine@@loveruby.net'
                f.puts 'To: someone@@somedomain.org'
                f.puts 'Subject: test mail'
                f.puts
                f.puts 'This is test mail.'
	    }
        }

== 発生する例外

セッション中に (SMTP レベルの) エラーがおこった場合、
以下の例外が発生します。
: Net::ProtoSyntaxError
    SMTP コマンドの構文ミス(500番台)
: Net::ProtoFatalError
    恒久的なエラー(550番台)
: Net::ProtoUnknownError
    予期しないエラー。おそらくバグ
: Net::ProtoServerBusy
    一時的なエラー(420/450番台)

=end
@


1.6
log
@* doc/net/protocol.rd.ja, smtp.rd.ja, pop.rd.ja: removed.
* MANIFEST: remove doc/net/* entries.
@
text
@d9 13
a21 2
SMTP の実装は [RFC2821] ((<URL:http://www.ietf.org/rfc/rfc2821.txt>))
に基いています。
@


1.5
log
@aamine
* lib/net/protocol.rb: Protocol#start returns the return value of block.
* lib/net/protocol.rb: set timeout limit by default.
* lib/net/protocol.rb: new methods WriteAdapter#write, puts, print, printf.
* lib/net/http.rb: rename HTTP#get2 to request_get, post2 to request_post ...
* lib/net/smtp.rb: should not resolve HELO domain automatically.
@
text
@@


1.4
log
@aamine
* lib/net/pop.rb: new method Net::POP3.APOP
* lib/net/http.rb: set default Content-Type to x-www-form-urlencoded (causes warning)
* lib/net/protocol.rb: remove Net::NetPrivate module.
* lib/net/smtp.rb: ditto.
* lib/net/pop.rb: ditto.
* lib/net/http.rb: ditto.
@
text
@d79 1
a79 1
=== Hello ドメイン
d81 11
a91 5
SMTP ではメールを送る側のホストの名前を要求されるのですが、
ダイヤルアップなどの場合には自分のマシンに正式な名前がない場合が
あります。そのような場合は適宜 SMTP サーバの名前などを与えてやら
ないと配送を拒否されることがあります。SMTP.start あるいは SMTP#start
の引数 helo_domain がそれです。
d96 2
d107 2
a108 2
: start( address, port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil )
: start( address, port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil ) {|smtp| .... }
d172 7
a178 5
	    smtp.ready( 'from@@mail.addr', 'dest@@mail.addr' ) do |adapter|
	      adapter.write str1
	      adapter.write str2
	      adapter.write str3
	    end
@


1.3
log
@aamine
* lib/net/protocol.rb: calls on_connect before conn_command
@
text
@d3 1
a3 1
= net/smtp.rb version 1.2.3
@


1.2
log
@aamine
* lib/net/protocol.rb: Protocol.new requires at least one arg.
* lib/net/smtp.rb: ditto.
* lib/net/pop.rb: ditto.
* lib/net/http.rb: ditto.
@
text
@d23 1
a23 1
      # use smtp object only in this block
d34 1
a34 1
      smtp.send_mail <<EndOfMail, 'your@@mail.address', 'to@@some.domain'
d45 21
d74 3
a76 3
      File.open( 'Mail/draft/1' ) {|f|
        smtp.send_mail f, 'your@@mail.address', 'to@@some.domain'
      }
d106 1
a106 1
          smtp.send_mail mail_string, 'from@@mail.address', 'dest@@mail.address'
d152 3
a154 3
          smtp.send_mail mail_string,
                         'from@@mail.address',
                         'dest@@mail.address' 'dest2@@mail.address'
d164 5
a168 5
          smtp.ready( 'from@@mail.addr', 'dest@@mail.addr' ) do |adapter|
            adapter.write str1
            adapter.write str2
            adapter.write str3
          end
@


1.1
log
@add doc/net/http.rd.ja pop.rd.ja smtp.rd.ja
@
text
@d74 1
a74 1
: new( address = 'localhost', port = 25 )
d78 2
a79 2
: start( address = 'localhost', port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil )
: start( address = 'localhost', port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil ) {|smtp| .... }
@


1.1.2.1
log
@new files added: doc/net/http.rd.ja pop.rd.ja smtp.rd.ja
@
text
@d3 1
a3 1
= net/smtp.rb version 1.1.36
@


1.1.2.2
log
@aamine
* lib/net/smtp.rb: SMTP.new requires at least one arg.
* lib/net/pop.rb: POP.new requires at least one arg.
* lib/net/pop.rb: uses "raise *Error.new" instead of simple raise.
* lib/net/http.rb: HTTP.new requires at least one arg.
* lib/net/http.rb: changes implicit start algolithm.
@
text
@d74 1
a74 1
: new( address, port = 25 )
d78 2
a79 2
: start( address, port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil )
: start( address, port = 25, helo_domain = Socket.gethostname, account = nil, password = nil, authtype = nil ) {|smtp| .... }
@


1.1.2.3
log
@aamine
* lib/net/smtp.rb: uses Digest::MD5 instead of MD5 (again).
* lib/net/pop.rb: ditto.
* lib/net/http.rb (HTTP#request): must pass block.
@
text
@d3 1
a3 1
= net/smtp.rb version 1.1.37
@


1.1.2.4
log
@aamine
* lib/net/protocol.rb: calls on_connect before conn_command
@
text
@d23 1
a23 1
        # use smtp object only in this block
d34 1
a34 1
        smtp.send_mail <<EndOfMail, 'your@@mail.address', 'to@@some.domain'
a44 21
=== セッションを終了する

メールを送ったら SMTP#finish を呼んでセッションを終了しなければいけ
ません。File のように GC 時に勝手に close されることもありません。
いろいろなところで finish がないソースコードの例を見掛けますが、
すべて誤りです。finish は必ず呼んでください。

またブロック付きの SMTP.start/SMTP#start を使うと勝手に finish を
呼んでくれるので便利です。可能な限りブロック付きの start を使うのが
よいでしょう。

    # using SMTP#finish
    smtp = Net::SMTP.start( 'your.smtp.server', 25 )
    smtp.send_mail mail_string, 'from@@address', 'to@@address'
    smtp.finish

    # using block form of SMTP.start
    Net::SMTP.start( 'your.smtp.server', 25 ) {|smtp|
        smtp.send_mail mail_string, 'from@@address', 'to@@address'
    }

d53 3
a55 3
        File.open( 'Mail/draft/1' ) {|f|
            smtp.send_mail f, 'your@@mail.address', 'to@@some.domain'
        }
d85 1
a85 1
            smtp.send_mail mail_string, 'from@@mail.address', 'dest@@mail.address'
d131 3
a133 3
            smtp.send_mail mail_string,
                           'from@@mail.address',
                           'dest@@mail.address' 'dest2@@mail.address'
d143 5
a147 5
	    smtp.ready( 'from@@mail.addr', 'dest@@mail.addr' ) do |adapter|
	      adapter.write str1
	      adapter.write str2
	      adapter.write str3
	    end
@


1.1.2.5
log
@aamine
* lib/net/protocol.rb: Protocol#start returns the return value of block.
* lib/net/protocol.rb: set timeout limit by default.
* lib/net/protocol.rb: new methods WriteAdapter#write, puts, print, printf.
* lib/net/protocol.rb: change template method scheme.
* lib/net/http.rb: rename HTTP#get2 to request_get, post2 to request_post ...
* lib/net/pop.rb: POP#auth_only did not work.
* lib/net/smtp.rb: should not resolve HELO domain automatically.
@
text
@d3 1
a3 1
= net/smtp.rb
d79 1
a79 1
=== HELO ドメイン
d81 5
a85 11
SMTP ではメールを送る側のホストの名前 (HELO ドメインと呼ぶ) を要求
されるのですが、Net::SMTP ではとりあえず localhost.localdomain と
いう名前を送信しています。たいていの SMTP サーバはこの HELO ドメイン
による認証はあまり真面目に行わないので (簡単に偽造できるからです)
問題にならないことが多いのですが、まれにメールセッションを切られる
こともあります。そういうときはとりあえず HELO ドメインを与えてみて
ください。もちろんそれ以外の時も HELO ドメインはちゃんと渡すのが
ベストです。

HELO ドメインは SMTP.start/SMTP#start の第三引数 helo_domain に指定
します。
a89 2
よくあるダイヤルアップホストの場合、HELO ドメインには ISP のメール
サーバのドメインを使っておけばたいてい通ります。
d99 2
a100 2
: start( address, port = 25, helo_domain = 'localhost.localdomain', account = nil, password = nil, authtype = nil )
: start( address, port = 25, helo_domain = 'localhost.localdomain', account = nil, password = nil, authtype = nil ) {|smtp| .... }
d164 5
a168 7
	    smtp.ready( 'from@@mail.addr', 'dest@@mail.addr' ) {|f|
                f.puts 'From: aamine@@loveruby.net'
                f.puts 'To: someone@@somedomain.org'
                f.puts 'Subject: test mail'
                f.puts
                f.puts 'This is test mail.'
	    }
@
