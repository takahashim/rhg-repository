head	1.2;
access;
symbols
	v1_6_3:1.2
	ruby_1_6:1.2.0.2
	v1_1d1:1.1.1.1.4.1
	v1_1d0:1.1.1.1.4.1
	v1_1c7:1.1.1.1.4.1
	v1_1c6:1.1.1.1.4.1
	v1_1d-start:1.1.1.1.4.1
	v1_1c5:1.1.1.1.4.1
	v1_1dev:1.1.1.1.4.1.0.2
	v1_1c4:1.1.1.1.4.1
	v1_1c3:1.1.1.1.4.1
	v1_1c2:1.1.1.1.4.1
	v1_1c1:1.1.1.1.4.1
	v1_1c0:1.1.1.1.4.1
	v1_1b9_31:1.1.1.1.4.1
	v1_1b9_30:1.1.1.1.4.1
	v1_1b9_28:1.1.1.1.4.1
	v1_1b9_27:1.1.1.1.4.1
	v1_1b9_26:1.1.1.1.4.1
	r1_1b9_25:1.1.1.1.4.1
	r1_1b9_24:1.1.1.1.4.1
	v1_1b9_23:1.1.1.1.4.1
	v1_1b9_22:1.1.1.1.4.1
	v1_1b9_20:1.1.1.1.4.1
	v1_1b9_18:1.1.1.1.4.1
	v1_1b9_16:1.1.1.1.4.1
	v1_1b9_15:1.1.1.1.4.1
	v1_1b9_13:1.1.1.1.4.1
	v1_1b9_12:1.1.1.1.4.1
	v1_1b9_11:1.1.1.1.4.1
	v1_1b9_08:1.1.1.1.4.1
	v1_1b9_07:1.1.1.1.4.1
	r1_1b9:1.1.1.1.4.1
	v1_1b8:1.1.1.1.4.1
	v1_1b7:1.1.1.1.4.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.08.13.06.09.54;	author matz;	state dead;
branches;
next	1.1;

1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	98.02.09.10.56.24;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.11.17.09.12.50;	author matz;	state dead;
branches;
next	;


desc
@@


1.2
log
@remove obsolete files
@
text
@#! /usr/local/bin/ruby

require "parsedate"
require "base64"

include ParseDate

class Mail
  def Mail.new(f)
    if !f.kind_of?(IO)
      f = open(f, "r")
      me = super(f)
      f.close
    else
      me = super
    end
    return me
  end

  def initialize(f)
    @@header = {}
    @@body = []
    while f.gets()
      $_.chop!
      next if /^From /		# skip From-line  
      break if /^$/		# end of header
      if /^(\S+):\s*(.*)/
	@@header[attr = $1.capitalize] = $2
      elsif attr
	sub(/^\s*/, '')
	@@header[attr] += "\n" + $_
      end
    end

    return if ! $_

    while f.gets()
      break if /^From /
      @@body.push($_)
    end
  end

  def header
    return @@header
  end

  def body
    return @@body
  end

end

if ARGV.length == 0
  if ENV['MAIL']
    ARGV[0] = ENV['MAIL']
  elsif ENV['USER']
    ARGV[0] = '/usr/spool/mail/' + ENV['USER']
  elsif ENV['LOGNAME']
    ARGV[0] = '/usr/spool/mail/' + ENV['LOGNAME']
  end
end

require "tk"
list = scroll = nil
TkFrame.new{|f|
  list = TkListbox.new(f) {
    yscroll proc{|idx|
	scroll.set *idx
    }
    relief 'raised'
#    geometry "80x5"
    width 80
    height 5
    setgrid 'yes'
    pack('side'=>'left','fill'=>'both','expand'=>'yes')
  }
  scroll = TkScrollbar.new(f) {
    command proc{|idx|
      list.yview *idx
    }
    pack('side'=>'right','fill'=>'y')
  }
  pack
}
root = Tk.root
TkButton.new(root) {
  text 'Dismiss'
  command proc {exit}
  pack('fill'=>'both','expand'=>'yes')
}
root.bind "Control-c", proc{exit}
root.bind "Control-q", proc{exit}
root.bind "space", proc{exit}

$outcount = 0;
for file in ARGV
  next if !File.exist?(file)
  f = open(file, "r")
  while !f.eof
    mail = Mail.new(f)
    date =  mail.header['Date']
    next if !date
    from =  mail.header['From']
    subj =  mail.header['Subject']
    y = m = d = 0
    y, m, d = parsedate(date) if date
    from = "sombody@@somewhere" if ! from
    subj = "(nil)" if ! subj
    from = decode_b(from)
    subj = decode_b(subj)
    list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
    $outcount += 1
  end
  f.close
  list.see 'end'
end

limit = 10000
if $outcount == 0
  list.insert 'end', "You have no mail."
  limit = 2000
end
Tk.after limit, proc{
  exit
}
Tk.mainloop
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@
@
text
@@


1.1.1.1.4.1
log
@1.1b7 pre
@
text
@d97 1
a97 3
  next if File.exist?(file)
  atime = File.atime(file)
  mtime = File.mtime(file)
d99 14
a112 20
  begin
    until f.eof
      mail = Mail.new(f)
      date = mail.header['Date']
      next unless date
      from = mail.header['From']
      subj = mail.header['Subject']
      y = m = d = 0
      y, m, d = parsedate(date) if date
      from = "sombody@@somewhere" unless from
      subj = "(nil)" unless subj
      from = decode_b(from)
      subj = decode_b(subj)
      list.insert 'end', format('%-02d/%02d/%02d [%-28.28s] %s',y,m,d,from,subj)
      $outcount += 1
    end
  ensure
    f.close
    File.utime(atime, mtime, file)
    list.see 'end'
d114 2
@


1.1.1.1.4.2
log
@1.1c8
@
text
@@

