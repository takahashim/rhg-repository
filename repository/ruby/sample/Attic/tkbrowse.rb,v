head	1.2;
access;
symbols
	v1_6_3:1.2
	ruby_1_6:1.2.0.2
	v1_1d1:1.1.1.1.4.1
	v1_1d0:1.1.1.1.4.1
	v1_1c7:1.1.1.1.4.1
	v1_1c6:1.1.1.1.4.1
	v1_1d-start:1.1.1.1.4.1
	v1_1c5:1.1.1.1.4.1
	v1_1dev:1.1.1.1.4.1.0.2
	v1_1c4:1.1.1.1.4.1
	v1_1c3:1.1.1.1.4.1
	v1_1c2:1.1.1.1.4.1
	v1_1c1:1.1.1.1.4.1
	v1_1c0:1.1.1.1.4.1
	v1_1b9_31:1.1.1.1.4.1
	v1_1b9_30:1.1.1.1.4.1
	v1_1b9_28:1.1.1.1.4.1
	v1_1b9_27:1.1.1.1.4.1
	v1_1b9_26:1.1.1.1.4.1
	r1_1b9_25:1.1.1.1.4.1
	r1_1b9_24:1.1.1.1.4.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.08.13.06.09.53;	author matz;	state dead;
branches;
next	1.1;

1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	98.05.29.09.32.14;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.11.17.09.12.50;	author matz;	state dead;
branches;
next	;


desc
@@


1.2
log
@remove obsolete files
@
text
@#!/usr/local/bin/ruby
#
# This script generates a directory browser, which lists the working
# directory and allows you to open files or subdirectories by
# double-clicking.

# Create a scrollbar on the right side of the main window and a listbox
# on the left side.

require "tkscrollbox"

list = TkScrollbox.new {
  relief 'raised'
  width 20
  height 20
  setgrid 'yes'
  pack
}

# The procedure below is invoked to open a browser on a given file;  if the
# file is a directory then another instance of this program is invoked; if
# the file is a regular file then the Mx editor is invoked to display
# the file.

def browse (dir, file)
  if dir != "."
    file="#{dir}/#{file}"
    if File.directory? file
      system "browse #{file} &"
    else
      if File.file? file
	if ENV['EDITOR']
	  system format("%s %s&", ENV['EDITOR'], file)
	else
	  sysmte "xedit #{file}&"
	end
      else
	STDERR.print "\"#{file}\" isn't a directory or regular file"
      end
    end
  end
end

# Fill the listbox with a list of all the files in the directory (run
# the "ls" command to get that information).

if ARGV.length>0 
  dir = ARGV[0]
else
  dir="."
end
list.insert 'end', *`ls #{dir}`.split

# Set up bindings for the browser.

list.focus
list.bind "Control-q", proc{exit}
list.bind "Control-c", proc{exit}
list.bind "Control-p", proc{
  print "selection <", TkSelection.get, ">\n"
}

list.bind "Double-Button-1", proc{
  for i in TkSelection.get.split
    print "clicked ", i, "\n"
    browse dir, i
  end
}
Tk.mainloop
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@
@
text
@@


1.1.1.1.4.1
log
@*** empty log message ***
@
text
@d12 8
a24 35
$dirlist = {}

def browsedir (dir)
  if $dirlist.key? dir
    $dirlist[dir]
  else
    top = if $dirlist.size > 0 then TkToplevel.new else nil end
    list = TkScrollbox.new(top) {
      relief 'raised'
      width 20
      height 20
      setgrid 'yes'
      pack
    }
    list.insert 'end', *`ls #{dir}`.split

    # Set up bindings for the browser.

    list.focus
    list.bind "Control-q", proc{exit}
    list.bind "Control-c", proc{exit}
    list.bind "Control-p", proc{
      print "selection <", TkSelection.get, ">\n"
    }

    list.bind "Double-Button-1", proc{
      for i in TkSelection.get.split
	print "clicked ", i, "\n"
	browse dir, i
      end
    }
    $dirlist[dir] = list
  end
end

d26 11
a36 7
  file="#{dir}/#{file}"
  if File.directory? file
    browsedir(file)
  else
    if File.file? file
      if ENV['EDITOR']
	system format("%s %s&", ENV['EDITOR'], file)
d38 1
a38 1
	system "xedit #{file}&"
a39 2
    else
      STDERR.print "\"#{file}\" isn't a directory or regular file"
d52 1
d54 15
a68 1
browsedir(dir)
@


1.1.1.1.4.2
log
@1.1c8
@
text
@@


