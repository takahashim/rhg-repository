head	1.2;
access;
symbols
	v1_6_7:1.1.2.1
	v1_6_6:1.1.2.1
	v1_6_5:1.1.2.1
	v1_6_4:1.1.2.1
	v1_7_1:1.2
	v1_6_4_preview4:1.1.2.1
	ruby_1_6:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2001.05.26.03.38.39;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.25.15.01.48;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.25.15.01.48;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Synchronize MANIFEST with reality.  Add missing files.
@
text
@# simple httpd

# The code demonstrates how a multi-protocol daemon should be written.

require "socket"
require "thread"

port = 8888
res = Socket.getaddrinfo(nil, port, nil, Socket::SOCK_STREAM, nil, Socket::AI_PASSIVE)
sockpool = []
names = []
threads = []

res.each do |i|
  s = TCPserver.new(i[3], i[1])
  n = Socket.getnameinfo(s.getsockname, Socket::NI_NUMERICHOST|Socket::NI_NUMERICSERV).join(" port ")
  sockpool.push s
  names.push n
end

(0 .. sockpool.size - 1).each do |i|
  mysock = sockpool[i]
  myname = names[i]
  STDERR.print "socket #{mysock} started, address #{myname}\n"
  threads[i] = Thread.start do		# Thread.start cannot be used here!
    ls = mysock	# copy to dynamic variable
    t = Thread.current
    STDERR.print "socket #{myname} listener started, pid #{$$} thread #{t}\n"
    while TRUE
      as = ls.accept
      Thread.start do
	STDERR.print "socket #{myname} accepted, thread ", Thread.current, "\n"
	s = as	# copy to dynamic variable
	str = ''
	while line = s.gets
	  break if line == "\r\n" or line == "\n"
	  str << line
	end
	STDERR.print "socket #{myname} got string\n"
	s.write("HTTP/1.0 200 OK\n")
	s.write("Content-type: text/plain\n\n")
	s.write("this is test: my name is #{myname}, you sent:\n")
	s.write("---start\n")
	s.write(str)
	s.write("---end\n")
	s.close
	STDERR.print "socket #{myname} processed, thread ", Thread.current, " terminating\n"
      end
    end
  end
end

for t in threads
  t.join
end
@


1.1
log
@file dualstack-httpd.rb was initially added on branch ruby_1_6.
@
text
@d1 55
@


1.1.2.1
log
@* string.c (rb_str_replace): add taint status infection
  (OBJ_INFECT()).

* string.c (rb_str_crypt): ditto.

* string.c (rb_str_ljust): ditto.

* string.c (rb_str_rjust): ditto.

* string.c (rb_str_center): ditto.
@
text
@a0 55
# simple httpd

# The code demonstrates how a multi-protocol daemon should be written.

require "socket"
require "thread"

port = 8888
res = Socket.getaddrinfo(nil, port, nil, Socket::SOCK_STREAM, nil, Socket::AI_PASSIVE)
sockpool = []
names = []
threads = []

res.each do |i|
  s = TCPserver.new(i[3], i[1])
  n = Socket.getnameinfo(s.getsockname, Socket::NI_NUMERICHOST|Socket::NI_NUMERICSERV).join(" port ")
  sockpool.push s
  names.push n
end

(0 .. sockpool.size - 1).each do |i|
  mysock = sockpool[i]
  myname = names[i]
  STDERR.print "socket #{mysock} started, address #{myname}\n"
  threads[i] = Thread.start do		# Thread.start cannot be used here!
    ls = mysock	# copy to dynamic variable
    t = Thread.current
    STDERR.print "socket #{myname} listener started, pid #{$$} thread #{t}\n"
    while TRUE
      as = ls.accept
      Thread.start do
	STDERR.print "socket #{myname} accepted, thread ", Thread.current, "\n"
	s = as	# copy to dynamic variable
	str = ''
	while line = s.gets
	  break if line == "\r\n" or line == "\n"
	  str << line
	end
	STDERR.print "socket #{myname} got string\n"
	s.write("HTTP/1.0 200 OK\n")
	s.write("Content-type: text/plain\n\n")
	s.write("this is test: my name is #{myname}, you sent:\n")
	s.write("---start\n")
	s.write(str)
	s.write("---end\n")
	s.close
	STDERR.print "socket #{myname} processed, thread ", Thread.current, " terminating\n"
      end
    end
  end
end

for t in threads
  t.join
end
@

