head	1.18;
access;
symbols
	v1_6_7:1.13.2.2
	v1_6_6:1.13.2.1
	v1_6_5:1.13.2.1
	v1_6_4:1.13
	v1_7_1:1.13
	v1_6_4_preview4:1.13
	v1_6_4_preview3:1.13
	v1_6_4_preview2:1.13
	v1_6_4_preview1:1.13
	v1_6_3:1.13
	ruby_m17n:1.13.0.4
	ruby_1_6:1.13.0.2
	v1_6_2:1.13
	v1_6_1:1.13
	v1_6_0:1.13
	v1_4_6:1.3.2.2
	v1_4_5:1.3.2.2
	v1_4_4:1.3
	ruby_1_4_3:1.3
	ruby1_4_3:1.3
	v1_4_3:1.3
	v1_5_0:1.4
	ruby_1_4_3_pre1:1.3
	ruby_1_4:1.3.0.2
	v1_4_2:1.3
	v1_4_1:1.3
	v1_4_0:1.2
	v1_3_7:1.1.1.3.2.11
	v1_3_6_repack:1.1.1.3.2.11
	v1_3_6:1.1.1.3.2.11
	v1_3_5:1.1.1.3.2.11
	v1_2_6repack:1.1.1.2.2.10
	v1_3_4_990625:1.1.1.3.2.10
	v1_3_4_990624:1.1.1.3.2.10
	v1_2_6:1.1.1.2.2.10
	v1_3_4_990611:1.1.1.3.2.10
	v1_3_4_990531:1.1.1.3.2.8
	v1_3_3_990518:1.1.1.3.2.8
	v1_3_3_990513:1.1.1.3.2.8
	v1_3_3_990507:1.1.1.3.2.6
	v1_2_5:1.1.1.2.2.10
	v1_2_4:1.1.1.2.2.10
	v1_3_1_990225:1.1.1.3.2.3
	v1_3_1_990224:1.1.1.3.2.3
	v1_3_1_990215:1.1.1.3.2.2
	v1_3_1_990212:1.1.1.3.2.2
	v1_3_1_990210:1.1.1.3.2.1
	v1_3_1_:1.1.1.3.2.1
	v1_3_1_990209:1.1.1.3.2.1
	v1_3_1_990205:1.1.1.3.2.1
	v1_3_1_990203:1.1.1.3.2.1
	v1_3_1_990201:1.1.1.3.2.1
	v1_3_1"_990201:1.1.1.3.2.1
	v1_3_1_990128:1.1.1.3.2.1
	v1_3_1_990127:1.1.1.3.2.1
	v1_3_1_990126:1.1.1.3.2.1
	ruby_1_3:1.1.1.3.0.2
	v1_2_2:1.1.1.2.2.10
	RUBY_1_3:1.1.1.3
	v1_2_2_pr1:1.1.1.2.2.10
	v1_2_1repack:1.1.1.2.2.10
	v1_2_1:1.1.1.2.2.10
	v1_2_stable:1.1.1.2.2.10
	v1_1d1:1.1.1.2.2.9.2.1
	v1_1d0:1.1.1.2.2.9.2.1
	v1_1c9_1:1.1.1.2.2.10
	v1_1c9:1.1.1.2.2.10
	v1_1c8:1.1.1.2.2.10
	v1_1c7:1.1.1.2.2.10
	v1_1c6:1.1.1.2.2.10
	v1_1d-start:1.1.1.2.2.9
	v1_1c5:1.1.1.2.2.9
	v1_1dev:1.1.1.2.2.9.0.2
	v1_1c4:1.1.1.2.2.9
	v1_1c3:1.1.1.2.2.7
	v1_1c2:1.1.1.2.2.7
	v1_1c1:1.1.1.2.2.7
	v1_1c0:1.1.1.2.2.7
	v1_1b9_31:1.1.1.2.2.7
	v1_1b9_30:1.1.1.2.2.7
	v1_1b9_28:1.1.1.2.2.7
	v1_1b9_27:1.1.1.2.2.6
	v1_1b9_26:1.1.1.2.2.6
	r1_1b9_25:1.1.1.2.2.6
	r1_1b9_24:1.1.1.2.2.6
	v1_1b9_23:1.1.1.2.2.6
	v1_1b9_22:1.1.1.2.2.4
	v1_1b9_20:1.1.1.2.2.4
	v1_1b9_18:1.1.1.2.2.3
	v1_1b9_16:1.1.1.2.2.3
	v1_1b9_15:1.1.1.2.2.3
	v1_1b9_13:1.1.1.2.2.3
	v1_1b9_12:1.1.1.2.2.3
	v1_1b9_11:1.1.1.2.2.3
	v1_1b9_08:1.1.1.2.2.3
	v1_1b9_07:1.1.1.2.2.3
	r1_1b9:1.1.1.2
	v1_1b8:1.1.1.2
	v1_1b7:1.1.1.2
	v1_1b6:1.1.1.2
	v1_1r:1.1.1.2.0.2
	v1_1:1.1.1.2
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2002.08.21.15.47.54;	author michal;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.24.04.54.14;	author matz;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.19.04.14.07;	author matz;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.04.14.14.35;	author matz;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.11.19.20.54;	author knu;	state Exp;
branches;
next	1.13;

1.13
date	2000.07.27.09.49.22;	author matz;	state Exp;
branches
	1.13.2.1
	1.13.4.1;
next	1.12;

1.12
date	2000.06.07.15.49.37;	author eban;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.30.04.24.03;	author matz;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.25.05.55.06;	author matz;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.24.04.34.08;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.22.07.09.55;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.18.04.32.07;	author matz;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.17.06.33.49;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	99.12.14.06.49.52;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	99.12.06.09.03.58;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	99.08.24.08.21.54;	author matz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.08.13.05.45.13;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.13.06;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.06;	author matz;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.01.16.12.19.12;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	1.1.1.3;

1.1.1.3
date	99.01.20.04.59.25;	author matz;	state Exp;
branches
	1.1.1.3.2.1;
next	;

1.1.1.3.2.1
date	99.01.26.10.08.15;	author matz;	state Exp;
branches;
next	1.1.1.3.2.2;

1.1.1.3.2.2
date	99.02.12.11.17.06;	author matz;	state Exp;
branches;
next	1.1.1.3.2.3;

1.1.1.3.2.3
date	99.02.24.04.31.24;	author matz;	state Exp;
branches;
next	1.1.1.3.2.4;

1.1.1.3.2.4
date	99.03.24.08.52.33;	author matz;	state Exp;
branches;
next	1.1.1.3.2.5;

1.1.1.3.2.5
date	99.04.20.08.21.41;	author matz;	state Exp;
branches;
next	1.1.1.3.2.6;

1.1.1.3.2.6
date	99.05.06.08.31.46;	author matz;	state Exp;
branches;
next	1.1.1.3.2.7;

1.1.1.3.2.7
date	99.05.10.08.22.47;	author matz;	state Exp;
branches;
next	1.1.1.3.2.8;

1.1.1.3.2.8
date	99.05.11.01.34.32;	author matz;	state Exp;
branches;
next	1.1.1.3.2.9;

1.1.1.3.2.9
date	99.06.01.06.59.19;	author matz;	state Exp;
branches;
next	1.1.1.3.2.10;

1.1.1.3.2.10
date	99.06.09.09.21.31;	author matz;	state Exp;
branches;
next	1.1.1.3.2.11;

1.1.1.3.2.11
date	99.07.15.07.59.54;	author matz;	state Exp;
branches;
next	;

1.1.1.2.2.1
date	98.03.03.10.16.14;	author matz;	state Exp;
branches;
next	1.1.1.2.2.2;

1.1.1.2.2.2
date	98.03.09.07.56.58;	author matz;	state Exp;
branches;
next	1.1.1.2.2.3;

1.1.1.2.2.3
date	98.03.26.09.09.38;	author matz;	state Exp;
branches;
next	1.1.1.2.2.4;

1.1.1.2.2.4
date	98.05.15.05.43.25;	author matz;	state Exp;
branches;
next	1.1.1.2.2.5;

1.1.1.2.2.5
date	98.05.25.09.42.35;	author matz;	state Exp;
branches;
next	1.1.1.2.2.6;

1.1.1.2.2.6
date	98.05.26.08.24.48;	author matz;	state Exp;
branches;
next	1.1.1.2.2.7;

1.1.1.2.2.7
date	98.06.25.09.15.53;	author matz;	state Exp;
branches;
next	1.1.1.2.2.8;

1.1.1.2.2.8
date	98.08.31.09.27.56;	author matz;	state Exp;
branches;
next	1.1.1.2.2.9;

1.1.1.2.2.9
date	98.09.03.07.43.40;	author matz;	state Exp;
branches
	1.1.1.2.2.9.2.1;
next	1.1.1.2.2.10;

1.1.1.2.2.10
date	98.10.06.02.45.02;	author matz;	state Exp;
branches;
next	;

1.1.1.2.2.9.2.1
date	98.10.06.03.28.15;	author matz;	state Exp;
branches;
next	;

1.3.2.1
date	2000.06.05.09.01.02;	author matz;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2000.06.08.16.20.46;	author eban;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2000.07.31.09.20.55;	author matz;	state Exp;
branches;
next	;

1.13.2.1
date	2001.07.11.19.25.52;	author knu;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2002.01.04.14.19.48;	author matz;	state Exp;
branches;
next	;

1.13.4.1
date	2001.01.12.04.36.00;	author matz;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2002.07.09.05.26.49;	author matz;	state Exp;
branches;
next	;


desc
@@


1.18
log
@*.c: Int vs Long cleanup
@
text
@/* Definitions for data structures and routines for the regular
   expression library, version 0.12.
   Copyright (C) 1985,89,90,91,92,93,95,96,97,98 Free Software Foundation, Inc.

   This file is part of the GNU C Library.  Its master source is NOT part of
   the C library, however.  The master source lives in /gd/gnu/lib.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the GNU C Library; see the file LGPL.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
/* Multi-byte extension added May, 1993 by t^2 (Takahiro Tanimoto)
   Last change: May 21, 1993 by t^2  */
/* modified for Ruby by matz@@netlab.co.jp */

#ifndef REGEX_H
#define REGEX_H

/* symbol mangling for ruby */
#ifdef RUBY
# define re_adjust_startpos ruby_re_adjust_startpos
# define re_compile_fastmap ruby_re_compile_fastmap
# define re_compile_pattern ruby_re_compile_pattern
# define re_copy_registers ruby_re_copy_registers
# define re_free_pattern ruby_re_free_pattern
# define re_free_registers ruby_re_free_registers
# define re_match ruby_re_match
# define re_mbcinit ruby_re_mbcinit
# define re_search ruby_re_search
# define re_set_casetable ruby_re_set_casetable
# define register_info_type ruby_register_info_type
#endif

#include <stddef.h>

/* Define number of parens for which we record the beginnings and ends.
   This affects how much space the `struct re_registers' type takes up.  */
#ifndef RE_NREGS
#define RE_NREGS 10
#endif

#define BYTEWIDTH 8

#define RE_REG_MAX ((1<<BYTEWIDTH)-1)

/* Maximum number of duplicates an interval can allow.  */
#ifndef RE_DUP_MAX
#define RE_DUP_MAX  ((1 << 15) - 1) 
#endif


/* If this bit is set, then character classes are supported; they are:
     [:alpha:],	[:upper:], [:lower:],  [:digit:], [:alnum:], [:xdigit:],
     [:space:], [:print:], [:punct:], [:graph:], and [:cntrl:].
   If not set, then character classes are not supported.  */
#define RE_CHAR_CLASSES (1L << 9)

/* match will be done case insensetively */
#define RE_OPTION_IGNORECASE (1L)
/* perl-style extended pattern available */
#define RE_OPTION_EXTENDED   (RE_OPTION_IGNORECASE<<1)
/* newline will be included for . */
#define RE_OPTION_MULTILINE  (RE_OPTION_EXTENDED<<1)
/* ^ and $ ignore newline */
#define RE_OPTION_SINGLELINE (RE_OPTION_MULTILINE<<1)
/* search for longest match, in accord with POSIX regexp */
#define RE_OPTION_LONGEST    (RE_OPTION_SINGLELINE<<1)

#define RE_MAY_IGNORECASE    (RE_OPTION_LONGEST<<1)
#define RE_OPTIMIZE_ANCHOR   (RE_MAY_IGNORECASE<<1)
#define RE_OPTIMIZE_EXACTN   (RE_OPTIMIZE_ANCHOR<<1)
#define RE_OPTIMIZE_NO_BM    (RE_OPTIMIZE_EXACTN<<1)
#define RE_OPTIMIZE_BMATCH   (RE_OPTIMIZE_NO_BM<<1)

/* For multi-byte char support */
#define MBCTYPE_ASCII 0
#define MBCTYPE_EUC 1
#define MBCTYPE_SJIS 2
#define MBCTYPE_UTF8 3

#if defined IMPORT || defined USEIMPORTLIB
extern __declspec(dllimport)
#elif defined EXPORT
extern __declspec(dllexport)
#else
extern
#endif
const unsigned char *re_mbctab;
#if defined(__STDC__)
void re_mbcinit (int);
#else
void re_mbcinit ();
#endif

#undef ismbchar
#define ismbchar(c) re_mbctab[(unsigned char)(c)]
#define mbclen(c)   (re_mbctab[(unsigned char)(c)]+1)

/* Structure used in re_match() */

typedef union
{
  unsigned char *word;
  struct {
    unsigned is_active : 1;
    unsigned matched_something : 1;
  } bits;
} register_info_type;

/* This data structure is used to represent a compiled pattern.  */

struct re_pattern_buffer
  {
    char *buffer;	/* Space holding the compiled pattern commands.  */
    int allocated;	/* Size of space that `buffer' points to. */
    int used;		/* Length of portion of buffer actually occupied  */
    char *fastmap;	/* Pointer to fastmap, if any, or zero if none.  */
			/* re_search uses the fastmap, if there is one,
			   to skip over totally implausible characters.  */
    char *must;	        /* Pointer to exact pattern which strings should have
			   to be matched.  */
    int *must_skip;     /* Pointer to exact pattern skip table for bm_search */
    long options;	/* Flags for options such as extended_pattern. */
    long re_nsub;	/* Number of subexpressions found by the compiler. */
    char fastmap_accurate;
			/* Set to zero when a new pattern is stored,
			   set to one when the fastmap is updated from it.  */
    char can_be_null;   /* Set to one by compiling fastmap
			   if this pattern might match the null string.
			   It does not necessarily match the null string
			   in that case, but if this is zero, it cannot.
			   2 as value means can match null string
			   but at end of range or before a character
			   listed in the fastmap.  */

    /* stack & working area for re_match() */
    unsigned char **regstart;
    unsigned char **regend;
    unsigned char **old_regstart;
    unsigned char **old_regend;
    register_info_type *reg_info;
    unsigned char **best_regstart;
    unsigned char **best_regend;
  };

typedef struct re_pattern_buffer regex_t;

/* Structure to store register contents data in.

   Pass the address of such a structure as an argument to re_match, etc.,
   if you want this information back.

   For i from 1 to RE_NREGS - 1, start[i] records the starting index in
   the string of where the ith subexpression matched, and end[i] records
   one after the ending index.  start[0] and end[0] are analogous, for
   the entire pattern.  */

struct re_registers
  {
    int allocated;
    int num_regs;
    int *beg;
    int *end;
  };

/* Type for byte offsets within the string.  POSIX mandates this.  */
typedef size_t regoff_t;

/* POSIX specification for registers.  Aside from the different names than
   `re_registers', POSIX uses an array of structures, instead of a
   structure of arrays.  */
typedef struct
{
  regoff_t rm_so;  /* Byte offset from string's start to substring's start.  */
  regoff_t rm_eo;  /* Byte offset from string's start to substring's end.  */
} regmatch_t;

#ifdef __STDC__

extern char *re_compile_pattern (const char *, int, struct re_pattern_buffer *);
void re_free_pattern (struct re_pattern_buffer *);
/* Is this really advertised?  */
extern int re_adjust_startpos (struct re_pattern_buffer *, const char*, int, int, int);
extern void re_compile_fastmap (struct re_pattern_buffer *);
extern int re_search (struct re_pattern_buffer *, const char*, int, int, int,
		      struct re_registers *);
extern int re_match (struct re_pattern_buffer *, const char *, int, int,
		     struct re_registers *);
extern void re_set_casetable (const char *table);
extern void re_copy_registers (struct re_registers*, struct re_registers*);
extern void re_free_registers (struct re_registers*);

#ifndef RUBY
/* 4.2 bsd compatibility.  */
extern char *re_comp (const char *);
extern int re_exec (const char *);
#endif

#else /* !__STDC__ */

extern char *re_compile_pattern ();
void re_free_regexp ();
/* Is this really advertised? */
extern int re_adjust_startpos ();
extern void re_compile_fastmap ();
extern int re_search ();
extern int re_match ();
extern void re_set_casetable ();
extern void re_copy_registers ();
extern void re_free_registers ();

#endif /* __STDC__ */

#endif /* !REGEX_H */
@


1.17
log
@* io.c (rb_io_mode_flags): both 'r+b' and 'rb+' should be allowed.

* io.c (rb_io_mode_modenum): ditto.

* gc.c (rb_memerror): rename from mem_error, and exported.

* gc.c (Init_GC): pre-allocate NoMemoryError instance.

* object.c (convert_type): error message changed from "failed to
  convert" to "cannot convert", since it does not try to convert
  if an object does not respond to the converting method.

* eval.c (block_pass): convert Method to Proc using
  rb_check_convert_type().

* object.c (rb_check_convert_type): always convert T_DATA

* eval.c (rb_thread_cleanup): should not terminate main_thread by
  Fatal error.

* regex.c (is_in_list): need to not exclude NUL and NEWLINE.

* re.c (rb_reg_expr_str): wrong backslash escapement.

* re.c (rb_reg_expr_str): do not escape embedded space
  characters.

* marshal.c (w_object): T_DATA process patch from Joel VanderWerf
  <vjoel@@PATH.Berkeley.EDU>.  This is temporary hack; it remains
  undocumented, and it will be removed when marshaling is
  re-designed.

* marshal.c (r_object): ditto.

* numeric.c (num_step): Integer#step is moved to Numeric#step;
  Fixnum#step is merged into this method.

* numeric.c (int_dotimes): Fixnum#times is merged.

* numeric.c (int_upto): Fixnum#upto is merged.

* numeric.c (int_downto): Fixnum#downto is merged.
@
text
@a187 1

@


1.16
log
@* eval.c (rb_thread_cleanup): current thread may be THREAD_STOPPED,
  for example when terminated from signal handler.

* regex.c (re_compile_pattern): remove /p support.

* regex.h: ditto.

* parse.y (parse_regx): ditto.
@
text
@d26 2
a27 2
#ifndef __REGEXP_LIBRARY
#define __REGEXP_LIBRARY
d225 1
a225 1
#endif /* !__REGEXP_LIBRARY */
@


1.15
log
@* process.c (rb_f_system): abandon vfork.

* io.c (pipe_open): ditto.

* defines.h: sparc linux needs different FLUSH_REGISTER_WINDOWS

* regex.c (re_search): abandon stclass optimization.

* bignum.c (rb_cstr2inum): deny "0_".

* bignum.c (rb_cstr2inum): allow "0\n" and so on.

* error.c (rb_invalid_str): utility function to show inspect()'ed
  string.

* bignum.c (rb_cstr2inum): prints invalid strings in inspect()'ed
  format.

* object.c (rb_Float): ditto.

* object.c (rb_convert_type): no longer use rb_rescue().

* re.c (rb_reg_search): initialize taint status of match object.
@
text
@a75 2
/* works line Perl's /s; it's called POSIX for wrong reason */
#define RE_OPTION_POSIXLINE  (RE_OPTION_MULTILINE|RE_OPTION_SINGLELINE)
@


1.14
log
@* It is confusing to put the GPL license terms in the file COPYING;
  Rename the files COPYING and COPYING.LIB to GPL and LGPL, respectively.

* While I am here, update the LGPL with the "Lesser" one.

* Move the "copying" sections of the files README and README.jp to
  COPYING and COPYING.jp, respectively.
@
text
@a134 1
    char *stclass;      /* Pointer to character class list at top */
@


1.13
log
@matz
@
text
@d19 1
a19 1
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
@


1.13.2.1
log
@* It is confusing to put the GPL license terms in the file COPYING;
  Rename the files COPYING and COPYING.LIB to GPL and LGPL, respectively.

* While I am here, update the LGPL with the "Lesser" one.

* Move the "copying" sections of the files README and README.jp to
  COPYING and COPYING.jp, respectively.
@
text
@d19 1
a19 1
   License along with the GNU C Library; see the file LGPL.  If not,
@


1.13.2.2
log
@forgot to commit everything bug ChangeLog
@
text
@d135 1
@


1.13.4.1
log
@m17n fix
@
text
@a24 1
/* M17n modify by matz@@zetabits.com */
a28 2
#include "m17n.h"

d38 1
d40 1
a40 1
# define re_set_default_encoding ruby_re_set_default_encoding
d108 2
a109 2
#define ismbchar(c) (m17n_mbclen(enc,(c))>1)
#define mbclen(c)   m17n_mbclen(enc,(c))
a125 1
    m17n_encoding *encoding;
d194 2
a195 2
extern char *re_compile_pattern (const char*, int, struct re_pattern_buffer*);
void re_free_pattern (struct re_pattern_buffer*);
d197 7
a203 7
extern int re_adjust_startpos (struct re_pattern_buffer*, const char*, int, int, int);
extern void re_compile_fastmap (struct re_pattern_buffer*);
extern int re_search (struct re_pattern_buffer*, const char*, int, int, int,
		      struct re_registers*);
extern int re_match (struct re_pattern_buffer*, const char*, int, int,
		     struct re_registers*);
extern void re_set_default_encoding (m17n_encoding* enc);
d209 2
a210 2
extern char *re_comp (const char*);
extern int re_exec (const char*);
d222 1
a222 1
extern void re_set_default_encoding ();
@


1.13.4.2
log
@several minor fixes.
@
text
@d87 7
@


1.12
log
@2000-06-08
@
text
@a191 4
#ifdef NeXT
#define re_match rre_match
#endif

@


1.11
log
@2000-05-30
@
text
@d93 1
a93 1
#if defined IMPORT
@


1.10
log
@2000-05-25
@
text
@d93 8
a100 1
extern const unsigned char *re_mbctab;
@


1.9
log
@2000-05-24
@
text
@d79 1
a79 1
#define RE_OPTION_LONGEST    (RE_OPTION_POSIXLINE<<1)
@


1.8
log
@/p is back for transit
@
text
@a71 2
/* newline will be included for ., ^ and $ ignore newline */
#define RE_OPTION_POSIXLINE  (RE_OPTION_EXTENDED<<1)
d73 5
a77 1
#define RE_OPTION_MULTILINE  (RE_OPTION_POSIXLINE<<1)
d79 1
a79 1
#define RE_OPTION_LONGEST    (RE_OPTION_MULTILINE<<1)
@


1.7
log
@2000-05-18
@
text
@d72 2
d75 1
a75 1
#define RE_OPTION_MULTILINE  (RE_OPTION_EXTENDED<<1)
@


1.6
log
@thread problems
@
text
@a71 2
/* newline will be included for ., ^, $ does not handle newline - obsolete */
#define RE_OPTION_POSIXLINE  (RE_OPTION_EXTENDED<<1)
d73 1
a73 1
#define RE_OPTION_MULTILINE  (RE_OPTION_POSIXLINE<<1)
d75 1
a75 1
#define RE_OPTION_LONGEST    (RE_OPTION_POSIXLINE<<1)
@


1.5
log
@19991214
@
text
@d72 1
a72 1
/* newline will be included for . and invert charclass matches */
d74 2
@


1.4
log
@19991206
@
text
@d31 1
d190 1
d211 1
@


1.3
log
@1.4.1 to be
@
text
@d80 1
@


1.3.2.1
log
@2000-06-05
@
text
@d87 1
a87 8
#if defined IMPORT
extern __declspec(dllimport)
#elif defined EXPORT
extern __declspec(dllexport)
#else
extern
#endif
const unsigned char *re_mbctab;
@


1.3.2.2
log
@2000-06-09
@
text
@d87 1
a87 1
#if defined IMPORT || defined USEIMPORTLIB
@


1.3.2.3
log
@matz
@
text
@d186 4
@


1.2
log
@1.4.0
@
text
@d1 3
a3 1
/* Definitions for data structures callers pass the regex library.
d5 2
a6 1
   Copyright (C) 1985, 1989-90 Free Software Foundation, Inc.
d8 4
a11 4
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.
d13 1
a13 1
   This program is distributed in the hope that it will be useful,
d15 2
a16 2
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
d18 4
a21 3
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
/* modifis for Ruby by matz@@caelum.co.jp */
d25 16
d49 1
a56 58
/* This defines the various regexp syntaxes.  */
extern long re_syntax_options;


/* The following bits are used in the re_syntax_options variable to choose among
   alternative regexp syntaxes.  */

/* If this bit is set, plain parentheses serve as grouping, and backslash
     parentheses are needed for literal searching.
   If not set, backslash-parentheses are grouping, and plain parentheses
     are for literal searching.  */
#define RE_NO_BK_PARENS	1L

/* If this bit is set, plain | serves as the `or'-operator, and \| is a 
     literal.
   If not set, \| serves as the `or'-operator, and | is a literal.  */
#define RE_NO_BK_VBAR (1L << 1)

/* If this bit is not set, plain + or ? serves as an operator, and \+, \? are 
     literals.
   If set, \+, \? are operators and plain +, ? are literals.  */
#define RE_BK_PLUS_QM (1L << 2)

/* If this bit is set, | binds tighter than ^ or $.
   If not set, the contrary.  */
#define RE_TIGHT_VBAR (1L << 3)

/* If this bit is set, then treat newline as an OR operator.
   If not set, treat it as a normal character.  */
#define RE_NEWLINE_OR (1L << 4)

/* If this bit is set, then special characters may act as normal
   characters in some contexts. Specifically, this applies to:
	^ -- only special at the beginning, or after ( or |;
	$ -- only special at the end, or before ) or |;
	*, +, ? -- only special when not after the beginning, (, or |.
   If this bit is not set, special characters (such as *, ^, and $)
   always have their special meaning regardless of the surrounding
   context.  */
#define RE_CONTEXT_INDEP_OPS (1L << 5)

/* If this bit is not set, then \ before anything inside [ and ] is taken as 
     a real \.
   If set, then such a \ escapes the following character.  This is a
     special case for awk.  */
#define RE_AWK_CLASS_HACK (1L << 6)

/* If this bit is set, then \{ and \} or { and } serve as interval operators.
   If not set, then \{ and \} and { and } are treated as literals.  */
#define RE_INTERVALS (1L << 7)

/* If this bit is not set, then \{ and \} serve as interval operators and 
     { and } are literals.
   If set, then { and } serve as interval operators and \{ and \} are 
     literals.  */
#define RE_NO_BK_CURLY_BRACES (1L << 8)
#define RE_NO_BK_BRACES RE_NO_BK_CURLY_BRACES

d63 13
a75 66
/* If this bit is set, then the dot re doesn't match a null byte.
   If not set, it does.  */
#define RE_DOT_NOT_NULL (1L << 10)

/* If this bit is set, then [^...] doesn't match a newline.
   If not set, it does.  */
#define RE_HAT_NOT_NEWLINE (1L << 11)

/* If this bit is set, back references are recognized.
   If not set, they aren't.  */
#define RE_NO_BK_REFS (1L << 12)

/* If this bit is set, back references must refer to a preceding
   subexpression.  If not set, a back reference to a nonexistent
   subexpression is treated as literal characters.  */
#define RE_NO_EMPTY_BK_REF (1L << 13)

/* If this bit is set, bracket expressions can't be empty.  
   If it is set, they can be empty.  */
#define RE_NO_EMPTY_BRACKETS (1L << 14)

/* If this bit is set, then *, +, ? and { cannot be first in an re or
   immediately after a |, or a (.  Furthermore, a | cannot be first or
   last in an re, or immediately follow another | or a (.  Also, a ^
   cannot appear in a nonleading position and a $ cannot appear in a
   nontrailing position (outside of bracket expressions, that is).  */
#define RE_CONTEXTUAL_INVALID_OPS (1L << 15)

/* If this bit is set, then +, ? and | aren't recognized as operators.
   If it's not, they are.  */
#define RE_LIMITED_OPS (1L << 16)

/* If this bit is set, then an ending range point has to collate higher
     or equal to the starting range point.
   If it's not set, then when the ending range point collates higher
     than the starting range point, the range is just considered empty.  */
#define RE_NO_EMPTY_RANGES (1L << 17)

/* If this bit is set, then a hyphen (-) can't be an ending range point.
   If it isn't, then it can.  */
#define RE_NO_HYPHEN_RANGE_END (1L << 18)

/* If this bit is not set, then \ inside a bracket expression is literal.
   If set, then such a \ quotes the following character.  */
#define RE_BACKSLASH_ESCAPE_IN_LISTS (1L << 19)

/* Define combinations of bits for the standard possibilities.  */
#define RE_SYNTAX_POSIX_AWK (RE_NO_BK_PARENS | RE_NO_BK_VBAR \
			| RE_CONTEXT_INDEP_OPS)
#define RE_SYNTAX_AWK (RE_NO_BK_PARENS | RE_NO_BK_VBAR | RE_AWK_CLASS_HACK)
#define RE_SYNTAX_EGREP (RE_NO_BK_PARENS | RE_NO_BK_VBAR \
			| RE_CONTEXT_INDEP_OPS | RE_NEWLINE_OR)
#define RE_SYNTAX_GREP (RE_BK_PLUS_QM | RE_NEWLINE_OR)
#define RE_SYNTAX_EMACS 0
#define RE_SYNTAX_POSIX_BASIC (RE_INTERVALS | RE_BK_PLUS_QM 		\
			| RE_CHAR_CLASSES | RE_DOT_NOT_NULL 		\
                        | RE_HAT_NOT_NEWLINE | RE_NO_EMPTY_BK_REF 	\
                        | RE_NO_EMPTY_BRACKETS | RE_LIMITED_OPS		\
                        | RE_NO_EMPTY_RANGES | RE_NO_HYPHEN_RANGE_END)	
                        
#define RE_SYNTAX_POSIX_EXTENDED (RE_INTERVALS | RE_NO_BK_CURLY_BRACES	   \
			| RE_NO_BK_VBAR | RE_NO_BK_PARENS 		   \
                        | RE_HAT_NOT_NEWLINE | RE_CHAR_CLASSES 		   \
                        | RE_NO_EMPTY_BRACKETS | RE_CONTEXTUAL_INVALID_OPS \
                        | RE_NO_BK_REFS | RE_NO_EMPTY_RANGES 		   \
                        | RE_NO_HYPHEN_RANGE_END)
d78 8
a85 6
#define RE_MBCTYPE_EUC (1L << 20)
#define RE_MBCTYPE_SJIS (1L << 21)
#define RE_MBCTYPE_MASK (RE_MBCTYPE_EUC | RE_MBCTYPE_SJIS)

#ifdef EUC
#define DEFAULT_MBCTYPE RE_MBCTYPE_EUC
d87 1
a87 5
#ifdef SJIS
#define DEFAULT_MBCTYPE RE_MBCTYPE_SJIS
#else
#define DEFAULT_MBCTYPE 0
#endif
d91 13
a103 8
#define ismbchar(c) \
  (re_syntax_options & RE_MBCTYPE_EUC		\
   ? ((unsigned char) (c) >= 0x80)		\
   : (re_syntax_options & RE_MBCTYPE_SJIS		\
      ? ((   0x80 <= (unsigned char) (c)	\
	  && (unsigned char) (c) <= 0x9f)	\
	 || (0xe0 <= (unsigned char) (c)))	\
      : 0))
d110 2
a111 2
    long allocated;	/* Size of space that `buffer' points to. */
    long used;		/* Length of portion of buffer actually occupied  */
d115 5
a119 6
    char *translate;	/* Translate table to apply to all characters before 
		           comparing, or zero for no translation.
			   The translation is applied to a pattern when it is 
                           compiled and to data when it is matched.  */

	
d131 9
d142 1
a142 5

/* search.c (search_buffer) needs this one value.  It is defined both in
   regex.c and here.  */
#define RE_EXACTN_VALUE 1

d156 2
a157 2
    unsigned allocated;
    unsigned num_regs;
d162 11
d181 2
a182 1
extern char *re_compile_pattern (char *, size_t, struct re_pattern_buffer *);
d185 1
a185 1
extern int re_search (struct re_pattern_buffer *, char*, int, int, int,
d187 1
a187 1
extern int re_match (struct re_pattern_buffer *, char *, int, int,
d189 1
a189 1
extern long re_set_syntax (long syntax);
d191 1
d195 2
a196 2
extern char *re_comp (char *);
extern int re_exec (char *);
d202 1
d207 1
a207 1
extern long re_set_syntax();
a211 5


#ifdef SYNTAX_TABLE
extern char *re_syntax_table;
#endif
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@a32 1
#define RE_REG_MAX ((1<<BYTEWIDTH)-1)
d58 5
a209 2
    char *must;	        /* Pointer to exact pattern which strings should have
			   to be matched.  */
d211 1
@


1.1.1.3
log
@ruby 1.3 cycle
@
text
@a24 2
#include <stddef.h>

d41 53
d100 66
a165 6
#define RE_OPTION_EXTENDED   (1L<<0)
#define RE_OPTION_IGNORECASE (1L<<1)
#define RE_MAY_IGNORECASE    (1L<<2)
#define RE_OPTIMIZE_ANCHOR   (1L<<4)
#define RE_OPTIMIZE_EXACTN   (1L<<5)
#define RE_OPTIMIZE_NO_BM    (1L<<6)
d168 3
a170 4
#define MBCTYPE_ASCII 0
#define MBCTYPE_EUC 1
#define MBCTYPE_SJIS 2
#define MBCTYPE_UTF8 3
d172 5
a176 3
#ifdef __STDC__
extern const unsigned char *re_mbctab;
void re_mbcinit (int);
d178 2
a179 2
extern unsigned char *re_mbctab;
void re_mbcinit ();
d183 8
a190 2
#define ismbchar(c) re_mbctab[(unsigned char)(c)]
#define mbclen(c)   (re_mbctab[(unsigned char)(c)]+1)
d197 2
a198 2
    size_t allocated;	/* Size of space that `buffer' points to. */
    size_t used;		/* Length of portion of buffer actually occupied  */
d202 4
d208 1
a208 3
    int *must_skip;     /* Pointer to exact pattern skip table for bm_search */
    char *stclass;      /* Pointer to character class list at top */
    long options;	/* Flags for options such as extended_pattern. */
d222 5
a226 1
typedef struct re_pattern_buffer regex_t;
d240 2
a241 2
    size_t allocated;
    size_t num_regs;
a245 11
/* Type for byte offsets within the string.  POSIX mandates this.  */
typedef size_t regoff_t;

/* POSIX specification for registers.  Aside from the different names than
   `re_registers', POSIX uses an array of structures, instead of a
   structure of arrays.  */
typedef struct
{
  regoff_t rm_so;  /* Byte offset from string's start to substring's start.  */
  regoff_t rm_eo;  /* Byte offset from string's start to substring's end.  */
} regmatch_t;
a254 1
void re_free_pattern (struct re_pattern_buffer *);
d257 1
a257 1
extern int re_search (struct re_pattern_buffer *, char*, size_t, size_t, size_t,
d259 1
a259 1
extern int re_match (struct re_pattern_buffer *, char *, size_t, size_t,
d261 1
a261 1
extern void re_set_casetable (char *table);
a262 1
extern void re_free_registers (struct re_registers*);
a272 1
void re_free_regexp ();
d277 1
a277 1
extern void re_set_casetable ();
d282 5
@


1.1.1.3.2.1
log
@990126
@
text
@d79 2
a80 2
    int allocated;	/* Size of space that `buffer' points to. */
    int used;		/* Length of portion of buffer actually occupied  */
d116 2
a117 2
    int allocated;
    int num_regs;
d141 1
a141 1
extern char *re_compile_pattern (char *, int, struct re_pattern_buffer *);
d145 1
a145 1
extern int re_search (struct re_pattern_buffer *, char*, int, int, int,
d147 1
a147 1
extern int re_match (struct re_pattern_buffer *, char *, int, int,
@


1.1.1.3.2.2
log
@990212
@
text
@d20 1
a20 1
/* modified for Ruby by matz@@netlab.co.jp */
a23 13

/* symbol mangling for ruby */
#ifdef RUBY
# define re_compile_fastmap rb_re_compile_fastmap
# define re_compile_pattern rb_re_compile_pattern
# define re_copy_registers rb_re_copy_registers
# define re_free_pattern rb_re_free_pattern
# define re_free_registers rb_re_free_registers
# define re_match rb_re_match
# define re_mbcinit rb_re_mbcinit
# define re_search rb_re_search
# define re_set_casetable rb_re_set_casetable
#endif
@


1.1.1.3.2.3
log
@990224
@
text
@d27 9
a35 9
# define re_compile_fastmap ruby_re_compile_fastmap
# define re_compile_pattern ruby_re_compile_pattern
# define re_copy_registers ruby_re_copy_registers
# define re_free_pattern ruby_re_free_pattern
# define re_free_registers ruby_re_free_registers
# define re_match ruby_re_match
# define re_mbcinit ruby_re_mbcinit
# define re_search ruby_re_search
# define re_set_casetable ruby_re_set_casetable
@


1.1.1.3.2.4
log
@990324
@
text
@d62 1
a62 1
/* match will be done case insensetively */
d64 4
a67 9
/* perl-style extended pattern available */
#define RE_OPTION_EXTENDED   (RE_OPTION_IGNORECASE<<1)
/* newline will be included for . and invert charclass matches */
#define RE_OPTION_POSIX      (RE_OPTION_EXTENDED<<1)

#define RE_MAY_IGNORECASE    (RE_OPTION_POSIX<<1)
#define RE_OPTIMIZE_ANCHOR   (RE_MAY_IGNORECASE<<1)
#define RE_OPTIMIZE_EXACTN   (RE_OPTIMIZE_ANCHOR<<1)
#define RE_OPTIMIZE_NO_BM    (RE_OPTIMIZE_ANCHOR<<1)
d154 1
a154 1
extern char *re_compile_pattern (const char *, int, struct re_pattern_buffer *);
d158 1
a158 1
extern int re_search (struct re_pattern_buffer *, const char*, int, int, int,
d160 1
a160 1
extern int re_match (struct re_pattern_buffer *, const char *, int, int,
d162 1
a162 1
extern void re_set_casetable (const char *table);
d168 2
a169 2
extern char *re_comp (const char *);
extern int re_exec (const char *);
@


1.1.1.3.2.5
log
@to open CVS
@
text
@d63 1
a63 1
#define RE_OPTION_IGNORECASE (1L)
@


1.1.1.3.2.6
log
@small fixes
@
text
@d67 1
a67 1
#define RE_OPTION_POSIXLINE  (RE_OPTION_EXTENDED<<1)
d69 1
a69 1
#define RE_MAY_IGNORECASE    (RE_OPTION_POSIXLINE<<1)
d72 1
a72 1
#define RE_OPTIMIZE_NO_BM    (RE_OPTIMIZE_EXACTN<<1)
@


1.1.1.3.2.7
log
@regexp,range,squeeze
@
text
@a67 2
/* search for longest match, in accord with POSIX regexp */
#define RE_OPTION_POSIXMATCH (RE_OPTION_POSIXLINE<<1)
d69 1
a69 1
#define RE_MAY_IGNORECASE    (RE_OPTION_POSIXMATCH<<1)
@


1.1.1.3.2.8
log
@.*/.+/.?
@
text
@d69 1
a69 1
#define RE_OPTION_LONGEST    (RE_OPTION_POSIXLINE<<1)
d71 1
a71 1
#define RE_MAY_IGNORECASE    (RE_OPTION_LONGEST<<1)
@


1.1.1.3.2.9
log
@rb_exec_end_proc, etc.
@
text
@d82 1
a83 1
#if defined(__STDC__)
@


1.1.1.3.2.10
log
@thread bugs
@
text
@d86 1
@


1.1.1.3.2.11
log
@990715
@
text
@a35 1
# define register_info_type ruby_register_info_type
a92 11
/* Structure used in re_match() */

typedef union
{
  unsigned char *word;
  struct {
    unsigned is_active : 1;
    unsigned matched_something : 1;
  } bits;
} register_info_type;

a118 9

    /* stack & working area for re_match() */
    unsigned char **regstart;
    unsigned char **regend;
    unsigned char **old_regstart;
    unsigned char **old_regend;
    register_info_type *reg_info;
    unsigned char **best_regstart;
    unsigned char **best_regend;
@


1.1.1.2.2.1
log
@shugo's method etc.
@
text
@d185 3
a187 4
   ? (   0xa1 <= (unsigned char) (c)		\
      && (unsigned char) (c) <= 0xfe)		\
   : (re_syntax_options & RE_MBCTYPE_SJIS	\
      ? ((   0x81 <= (unsigned char) (c)	\
d189 1
a189 14
	||  ((0xe0 <= (unsigned char) (c))	\
	  && (unsigned char) (c) <= 0xef))	\
      : 0))

#undef ismbchar2
#define ismbchar2(c) \
  (re_syntax_options & RE_MBCTYPE_EUC		\
   ? (   0xa1 <= (unsigned char) (c)		\
      && (unsigned char) (c) <= 0xfe)		\
   : (re_syntax_options & RE_MBCTYPE_SJIS	\
      ? ((   0x40 <= (unsigned char) (c)	\
	  && (unsigned char) (c) <= 0x7e)	\
	||  ((0x80 <= (unsigned char) (c))	\
	  && (unsigned char) (c) <= 0xfc))	\
@


1.1.1.2.2.2
log
@1.1b9_00
@
text
@d168 3
a170 3
#define MBCTYPE_ASCII 0
#define MBCTYPE_EUC 1
#define MBCTYPE_SJIS 2
d172 9
a180 2
extern const unsigned char *mbctab;
extern int current_mbctype;
d182 11
a192 1
void mbcinit (int);
d194 11
a204 2
#undef ismbchar
#define ismbchar(c) mbctab[(unsigned char)(c)]
@


1.1.1.2.2.3
log
@1.1b9_05_pre1
@
text
@a174 1
#ifdef __STDC__
a175 3
#else
void mbcinit ();
#endif
@


1.1.1.2.2.4
log
@ruby 1.1b9_20
@
text
@d172 1
a175 1
extern const unsigned char *mbctab;
a177 1
extern unsigned char *mbctab;
@


1.1.1.2.2.5
log
@*** empty log message ***
@
text
@a166 3
#define RE_OPTION_IGNORECASE (1L<<0)
#define RE_OPTION_EXTENDED   (1L<<1)

d195 4
a201 1
    long options;	/* Flags for options such as extended_pattern. */
d216 5
a254 1
extern void re_set_casetable(char *table);
a255 1
extern void re_free_registers (struct re_registers*);
a270 1
extern void re_set_casetable();
@


1.1.1.2.2.6
log
@1.1b9_23
@
text
@d167 2
a168 3
#define RE_OPTION_EXTENDED   (1L<<0)
#define RE_OPTION_IGNORECASE (1L<<1)
#define RE_MAY_IGNORECASE (1L<<2)
@


1.1.1.2.2.7
log
@regex
@
text
@d169 1
a169 3
#define RE_MAY_IGNORECASE    (1L<<2)
#define RE_OPTIMIZE_ANCHOR   (1L<<4)
#define RE_OPTIMIZE_CCLASS   (1L<<5)
@


1.1.1.2.2.8
log
@bm_search
@
text
@d171 1
a171 3
#define RE_OPTIMIZE_EXACTN   (1L<<5)
#define RE_OPTIMIZE_CCLASS   (1L<<6)
#define RE_OPTIMIZE_NO_BM    (1L<<7)
@


1.1.1.2.2.9
log
@1.1c4
@
text
@d184 1
a184 1
void re_mbcinit (int);
d187 1
a187 1
void re_mbcinit ();
d205 1
a205 1
    int *must_skip;    /* Pointer to exact pattern skip table for bm_search */
a247 1
void re_free_pattern (struct re_pattern_buffer *);
d255 1
a255 1
extern void re_set_casetable (char *table);
a267 1
void re_free_regexp ();
d272 2
a273 2
extern long re_set_syntax ();
extern void re_set_casetable ();
@


1.1.1.2.2.9.2.1
log
@join 1.1c6
@
text
@d172 2
a173 1
#define RE_OPTIMIZE_NO_BM    (1L<<6)
d205 1
a205 2
    int *must_skip;     /* Pointer to exact pattern skip table for bm_search */
    char *stclass;      /* Pointer to character class list at top */
@


1.1.1.2.2.10
log
@1.1c6
@
text
@d172 2
a173 1
#define RE_OPTIMIZE_NO_BM    (1L<<6)
d205 1
a205 2
    int *must_skip;     /* Pointer to exact pattern skip table for bm_search */
    char *stclass;      /* Pointer to character class list at top */
@
