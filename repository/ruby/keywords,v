head	1.6;
access;
symbols
	v1_6_7:1.3.2.1
	v1_6_6:1.3.2.1
	v1_6_5:1.3.2.1
	v1_6_4:1.3
	v1_7_1:1.3
	v1_6_4_preview4:1.3
	v1_6_4_preview3:1.3
	v1_6_4_preview2:1.3
	v1_6_4_preview1:1.3
	v1_6_3:1.3
	ruby_m17n:1.3.0.4
	ruby_1_6:1.3.0.2
	v1_6_2:1.3
	v1_6_1:1.3
	v1_6_0:1.3
	v1_4_6:1.1.1.2
	v1_4_5:1.1.1.2
	v1_4_4:1.1.1.2
	ruby_1_4_3:1.1.1.2
	ruby1_4_3:1.1.1.2
	v1_4_3:1.1.1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.1.1.2
	ruby_1_4:1.1.1.2.0.4
	v1_4_2:1.1.1.2
	v1_4_1:1.1.1.2
	v1_4_0:1.1.1.2
	v1_3_7:1.1.1.2
	v1_3_6_repack:1.1.1.2
	v1_3_6:1.1.1.2
	v1_3_5:1.1.1.2
	v1_2_6repack:1.1.1.1.2.1
	v1_3_4_990625:1.1.1.2
	v1_3_4_990624:1.1.1.2
	v1_2_6:1.1.1.1.2.1
	v1_3_4_990611:1.1.1.2
	v1_3_4_990531:1.1.1.2
	v1_3_3_990518:1.1.1.2
	v1_3_3_990513:1.1.1.2
	v1_3_3_990507:1.1.1.2
	v1_2_5:1.1.1.1.2.1
	v1_2_4:1.1.1.1.2.1
	v1_3_1_990225:1.1.1.2
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.2.1
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.2.1
	v1_2_1repack:1.1.1.1.2.1
	v1_2_1:1.1.1.1.2.1
	v1_2_stable:1.1.1.1.2.1
	v1_1d1:1.1.1.1.2.1
	v1_1d0:1.1.1.1.2.1
	v1_1c9_1:1.1.1.1.2.1
	v1_1c9:1.1.1.1.2.1
	v1_1c8:1.1.1.1.2.1
	v1_1c7:1.1.1.1.2.1
	v1_1c6:1.1.1.1.2.1
	v1_1d-start:1.1.1.1.2.1
	v1_1c5:1.1.1.1.2.1
	v1_1dev:1.1.1.1.2.1.0.2
	v1_1c4:1.1.1.1.2.1
	v1_1c3:1.1.1.1.2.1
	v1_1c2:1.1.1.1.2.1
	v1_1c1:1.1.1.1.2.1
	v1_1c0:1.1.1.1.2.1
	v1_1b9_31:1.1.1.1.2.1
	v1_1b9_30:1.1.1.1.2.1
	v1_1b9_28:1.1.1.1.2.1
	v1_1b9_27:1.1.1.1.2.1
	v1_1b9_26:1.1.1.1.2.1
	r1_1b9_25:1.1.1.1.2.1
	r1_1b9_24:1.1.1.1.2.1
	v1_1b9_23:1.1.1.1.2.1
	v1_1b9_22:1.1.1.1.2.1
	v1_1b9_20:1.1.1.1.2.1
	v1_1b9_18:1.1.1.1.2.1
	v1_1b9_16:1.1.1.1.2.1
	v1_1b9_15:1.1.1.1.2.1
	v1_1b9_13:1.1.1.1.2.1
	v1_1b9_12:1.1.1.1.2.1
	v1_1b9_11:1.1.1.1.2.1
	v1_1b9_08:1.1.1.1.2.1
	v1_1b9_07:1.1.1.1.2.1
	r1_1b9:1.1.1.1.2.1
	v1_1b8:1.1.1.1.2.1
	v1_1b7:1.1.1.1.2.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.2
	v1_1:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2002.09.28.11.08.59;	author nobu;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.20.04.29.56;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.02.08.46.21;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.30.04.24.01;	author matz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.11.10.06.47.08;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.19.10;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.19.10;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.24;	author matz;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	98.02.02.04.49.12;	author matz;	state Exp;
branches;
next	;

1.3.2.1
date	2001.06.29.08.32.52;	author matz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* keywords: add braces around initializers.
@
text
@struct kwtable {char *name; int id[2]; enum lex_state state;};
%%
__LINE__, {k__LINE__, k__LINE__}, EXPR_END
__FILE__, {k__FILE__, k__FILE__}, EXPR_END
BEGIN, {klBEGIN, klBEGIN}, EXPR_END
END, {klEND, klEND}, EXPR_END
alias, {kALIAS, kALIAS}, EXPR_FNAME
and, {kAND, kAND}, EXPR_BEG
begin, {kBEGIN, kBEGIN}, EXPR_BEG
break, {kBREAK, kBREAK}, EXPR_MID
case, {kCASE, kCASE}, EXPR_BEG
class, {kCLASS, kCLASS}, EXPR_CLASS
def, {kDEF, kDEF}, EXPR_FNAME
defined?, {kDEFINED, kDEFINED}, EXPR_ARG
do, {kDO, kDO}, EXPR_BEG
else, {kELSE, kELSE}, EXPR_BEG
elsif, {kELSIF, kELSIF}, EXPR_BEG
end, {kEND, kEND}, EXPR_END
ensure, {kENSURE, kENSURE}, EXPR_BEG
false, {kFALSE, kFALSE}, EXPR_END
for, {kFOR, kFOR}, EXPR_BEG
if, {kIF, kIF_MOD}, EXPR_BEG
in, {kIN, kIN}, EXPR_BEG
module, {kMODULE, kMODULE}, EXPR_BEG
next, {kNEXT, kNEXT}, EXPR_MID
nil, {kNIL, kNIL}, EXPR_END
not, {kNOT, kNOT}, EXPR_BEG
or, {kOR, kOR}, EXPR_BEG
redo, {kREDO, kREDO}, EXPR_END
rescue, {kRESCUE, kRESCUE_MOD}, EXPR_MID
retry, {kRETRY, kRETRY}, EXPR_END
return, {kRETURN, kRETURN}, EXPR_MID
self, {kSELF, kSELF}, EXPR_END
super, {kSUPER, kSUPER}, EXPR_ARG
then, {kTHEN, kTHEN}, EXPR_BEG
true, {kTRUE, kTRUE}, EXPR_END
undef, {kUNDEF, kUNDEF}, EXPR_FNAME
unless, {kUNLESS, kUNLESS_MOD}, EXPR_BEG
until, {kUNTIL, kUNTIL_MOD}, EXPR_BEG
when, {kWHEN, kWHEN}, EXPR_BEG
while, {kWHILE, kWHILE_MOD}, EXPR_BEG
yield, {kYIELD, kYIELD}, EXPR_ARG
@


1.5
log
@* range.c (range_step): 'iter' here should be an array.

* marshal.c (w_object): should retrieve __member__ data from
  non-singleton class.

* variable.c (rb_cvar_get): class variable override check added.

* variable.c (rb_cvar_set): ditto

* variable.c (rb_cvar_declare): ditto.

* parse.y (parse_regx): handle backslash escaping of delimiter here.
@
text
@d3 40
a42 40
__LINE__, k__LINE__, k__LINE__, EXPR_END
__FILE__, k__FILE__, k__FILE__, EXPR_END
BEGIN, klBEGIN, klBEGIN, EXPR_END
END, klEND, klEND, EXPR_END
alias, kALIAS, kALIAS, EXPR_FNAME
and, kAND, kAND, EXPR_BEG
begin, kBEGIN, kBEGIN, EXPR_BEG
break, kBREAK, kBREAK, EXPR_MID
case, kCASE, kCASE, EXPR_BEG
class, kCLASS, kCLASS, EXPR_CLASS
def, kDEF, kDEF, EXPR_FNAME
defined?, kDEFINED, kDEFINED, EXPR_ARG
do, kDO, kDO, EXPR_BEG
else, kELSE, kELSE, EXPR_BEG
elsif, kELSIF, kELSIF, EXPR_BEG
end, kEND, kEND, EXPR_END
ensure, kENSURE, kENSURE, EXPR_BEG
false, kFALSE, kFALSE, EXPR_END
for, kFOR, kFOR, EXPR_BEG
if, kIF, kIF_MOD, EXPR_BEG
in, kIN, kIN, EXPR_BEG
module, kMODULE, kMODULE, EXPR_BEG
next, kNEXT, kNEXT, EXPR_MID
nil, kNIL, kNIL, EXPR_END
not, kNOT, kNOT, EXPR_BEG
or, kOR, kOR, EXPR_BEG
redo, kREDO, kREDO, EXPR_END
rescue, kRESCUE, kRESCUE_MOD, EXPR_MID
retry, kRETRY, kRETRY, EXPR_END
return, kRETURN, kRETURN, EXPR_MID
self, kSELF, kSELF, EXPR_END
super, kSUPER, kSUPER, EXPR_ARG
then, kTHEN, kTHEN, EXPR_BEG
true, kTRUE, kTRUE, EXPR_END
undef, kUNDEF, kUNDEF, EXPR_FNAME
unless, kUNLESS, kUNLESS_MOD, EXPR_BEG
until, kUNTIL, kUNTIL_MOD, EXPR_BEG
when, kWHEN, kWHEN, EXPR_BEG
while, kWHILE, kWHILE_MOD, EXPR_BEG
yield, kYIELD, kYIELD, EXPR_ARG
@


1.4
log
@* error.c (exc_exception): clone the receiver exception instead of
  creating brand new exception object of the receiver.

* eval.c (rb_eval_string_wrap): extend new ruby_top_self, not
  original self.

* eval.c (rb_eval_cmd): respect ruby_wrapper if set.

* eval.c (eval): do not update ruby_class unless scope is not
  provided.

* eval.c (eval): preserve wrapper information.

* eval.c (proc_invoke): ditto.

* eval.c (block_pass): ditto.

* parse.y (void_expr): too much warnings for void context
  (e.g. foo[1] that can be mere Proc call).

* error.c (rb_name_error): new function to raise NameError with
  name attribute set.

* eval.c (rb_f_missing): set name and args in the exception
  object. [new]

* error.c (name_name): NameError#name - new method.

* error.c (nometh_args): NoMethodError#args - new method.

* lex.c (rb_reserved_word): lex_state after tRESCUE should be
  EXPR_MID.

* gc.c (add_heap): allocation size of the heap unit is doubled for
  each allocation.

* dir.c (isdelim): space, tab, and newline are no longer
  delimiters for glob patterns.

* eval.c (svalue_to_avalue): new conversion scheme between single
  value and array values.

* eval.c (avalue_to_svalue): ditto.

* eval.c (rb_eval): REXPAND now uses avalue_to_svalue(), return
  and yield too.

* eval.c (rb_yield_0): use avalue_to_svalue().

* eval.c (proc_invoke): Proc#call gives avaules, whereas
  Proc#yield gives mvalues.

* eval.c (bmcall): convert given value (svalue) to avalue.
@
text
@d10 1
a10 1
break, kBREAK, kBREAK, EXPR_END
d25 1
a25 1
next, kNEXT, kNEXT, EXPR_END
@


1.3
log
@2000-05-30
@
text
@d30 1
a30 1
rescue, kRESCUE, kRESCUE_MOD, EXPR_END
@


1.3.2.1
log
@* lex.c (rb_reserved_word): lex_state after tRESCUE should be
  EXPR_MID.

* gc.c (add_heap): allocation size of the heap unit is doubled for
  each allocation.
@
text
@d30 1
a30 1
rescue, kRESCUE, kRESCUE_MOD, EXPR_MID
@


1.2
log
@19991110
@
text
@d14 1
a14 1
defined?, kDEFINED, kDEFINED, EXPR_END
d30 1
a30 1
rescue, kRESCUE, kRESCUE_MOD, EXPR_MID
d34 1
a34 1
super, kSUPER, kSUPER, EXPR_END
d42 1
a42 1
yield, kYIELD, kYIELD, EXPR_END
@


1.1
log
@Initial revision
@
text
@d3 2
d30 1
a30 1
rescue, kRESCUE, kRESCUE, EXPR_MID
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@a2 2
__LINE__, k__LINE__, k__LINE__, EXPR_END
__FILE__, k__FILE__, k__FILE__, EXPR_END
@


1.1.1.1.2.1
log
@__FILE__,__LINE__
@
text
@a2 2
__LINE__, k__LINE__, k__LINE__, EXPR_END
__FILE__, k__FILE__, k__FILE__, EXPR_END
@
