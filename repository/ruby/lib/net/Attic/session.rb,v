head	1.10;
access;
symbols
	v1_6_3:1.10
	ruby_1_6:1.10.0.2
	v1_4_4:1.1.2.3
	V1-1-3:1.7
	V1-1-1:1.5
	ruby_1_4_3:1.1.2.1
	ruby1_4_3:1.1.2.1
	v1_4_3:1.1.2.1
	v1_5_0:1.3
	ruby_1_4_3_pre1:1.1.2.1
	ruby_1_4:1.1.0.2;
locks; strict;
comment	@# @;


1.10
date	2000.02.21.15.27.49;	author aamine;	state dead;
branches;
next	1.9;

1.9
date	2000.01.21.12.52.24;	author aamine;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.05.07.55.36;	author aamine;	state Exp;
branches;
next	1.7;

1.7
date	99.12.29.11.14.04;	author aamine;	state Exp;
branches;
next	1.6;

1.6
date	99.12.22.13.49.13;	author aamine;	state Exp;
branches;
next	1.5;

1.5
date	99.12.20.20.48.49;	author aamine;	state Exp;
branches;
next	1.4;

1.4
date	99.12.17.15.00.13;	author aamine;	state Exp;
branches;
next	1.3;

1.3
date	99.10.18.09.03.01;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.10.13.07.28.09;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	99.09.22.07.32.33;	author matz;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	99.10.13.07.29.15;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2000.01.16.08.15.50;	author aamine;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2000.01.21.12.53.38;	author aamine;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2000.03.26.16.35.04;	author aamine;	state dead;
branches;
next	;


desc
@@


1.10
log
@Version 1.1.5

o  session.rb -> protocol.rb
@
text
@=begin

= net/session.rb

written by Minero Aoki <aamine@@dp.u-netsurf.ne.jp>

This library is distributed under the terms of the Ruby license.
You can freely distribute/modify this library.

=end


require 'socket'


module Net

  Version = '1.1.4'

=begin

== Net::Protocol

the abstruct class for Internet protocol

=== Super Class

Object

=== Constants

: Version
  The version of Session class. It is a string like "1.1.4".


=== Class Methods

: new( address = 'localhost', port = nil )
  This method Creates a new Session object.

: start( address = 'localhost', port = nil, *args )
: start( address = 'localhost', port = nil, *args ){|session| .... }
  This method creates a new Session object and start session.
  If you call this method with block, Session object give itself
  to block and finish session when block returns.

: Proxy( address, port )
  This method creates a proxy class of its protocol.
  Arguments are address/port of proxy host.


=== Methods

: address
  the address of connecting server (FQDN).

: port
  connecting port number

: start( *args )
  This method start protocol. If you call this method when the protocol
  is already started, this only returns false without doing anything.

  '*args' are specified in subclasses.

: finish
  This method ends protocol. If you call this method before protocol starts,
  it only return false without doing anything.

: active?
  true if session have been started

=end

  class Protocol

    class << self

      def start( address = 'localhost', port = nil, *args )
        instance = new( address, port )

        if iterator? then
          instance.start( *args ) { yield instance }
        else
          instance.start *args
          instance
        end
      end

      def Proxy( p_addr, p_port )
        klass = Class.new( self )
        klass.module_eval %-

          def initialize( addr, port )
            @@proxyaddr = '#{p_addr}'
            @@proxyport = '#{p_port}'
            super @@proxyaddr, @@proxyport
            @@address = addr
            @@port    = port
          end

          def connect( addr, port )
            super @@proxyaddr, @@proxyport
          end
          private :connect
            
          attr :proxyaddr
          attr :proxyport
        -
        def klass.proxy?
          true
        end

        klass
      end

      def proxy?
        false
      end
            

      private

      def protocol_param( name, val )
        module_eval %-
          def self.#{name.id2name}
            #{val}
          end
        -
      end
        
    end


    #
    # sub-class requirements
    #
    # protocol_param command_type
    # protocol_param port
    #
    # private method do_start  (optional)
    # private method do_finish (optional)
    #

    protocol_param :port,         'nil'
    protocol_param :command_type, 'nil'
    protocol_param :socket_type,  '::Net::ProtocolSocket'


    def initialize( addr = nil, port = nil )
      @@address = addr || 'localhost'
      @@port    = port || self.type.port

      @@active  = false
      @@pipe    = nil

      @@command = nil
      @@socket  = nil
    end


    attr :address
    attr :port

    attr :command
    attr :socket


    def start( *args )
      return false if active?
      @@active = true

      begin
        connect @@address, @@port
        do_start *args
        yield if iterator?
      ensure
        finish if iterator?
      end
    end

    def finish
      if @@command then
        do_finish
        disconnect
      end

      if @@socket and not @@socket.closed? then
        @@socket.close
        @@socket = nil
      end

      if active? then
        @@active = false

        return true
      else
        return false
      end
    end

    def active?
      @@active
    end

    def set_pipe( arg )   # un-documented
      @@pipe = arg
    end


    private


    def do_start
    end

    def do_finish
    end


    def connect( addr, port )
      @@socket  = self.type.socket_type.open( addr, port, @@pipe )
      @@command = self.type.command_type.new( @@socket )
    end

    def disconnect
      @@command.quit
      @@command = nil
      @@socket  = nil
    end

  end

  Session = Protocol


=begin

== Net::Command

=== Super Class

Object

=== Class Methods

: new( socket )
  This method create new Command object. 'socket' must be ProtocolSocket.
  This method is abstract class.


=== Methods

: quit
  This method dispatch command which ends the protocol.

=end

  class Command

    def initialize( sock )
      @@socket = sock
      @@error_occured = false
    end

    attr :socket, true
    attr :error_occured

    def quit
      if @@socket and not @@socket.closed? then
        begin
          do_quit
        ensure
          @@socket.close unless @@socket.closed?
          @@socket = nil
        end
        @@error_occured = false
      end
    end

    private

    def check_reply( *oks )
      reply_must( get_reply, *oks )
    end

    def reply_must( rep, *oks )
      oks.each do |i|
        if i === rep then
          return rep
        end
      end

      @@error_occured = true
      rep.error! @@socket.sending
    end

    def getok( line, ok = SuccessCode )
      @@socket.writeline line
      check_reply ok
    end
    
  end


  class ProtocolError        < StandardError   ; end
  class   ProtoSyntaxError   <   ProtocolError ; end
  class   ProtoFatalError    <   ProtocolError ; end
  class   ProtoUnknownError  <   ProtocolError ; end
  class   ProtoServerError   <   ProtocolError ; end
  class   ProtoAuthError     <   ProtocolError ; end
  class   ProtoCommandError  <   ProtocolError ; end
  class   ProtoRetryError    <   ProtocolError ; end

  class ReplyCode

    def initialize( cod, mes )
      @@code = cod
      @@msg  = mes
    end

    attr :code
    attr :msg

    def error!( sending )
      mes = <<MES

status %s
writing string is:
%s

error message from server is:
%s
MES
      raise self.type::Error,
        sprintf( mes, @@code, Net.quote(sending), Net.quote(@@msg) )
    end

  end

  class SuccessCode < ReplyCode
    Error = ProtoUnknownError
  end

  class ContinueCode < SuccessCode
    Error = ProtoUnknownError
  end

  class ErrorCode < ReplyCode
    Error = ProtocolError
  end

  class SyntaxErrorCode < ErrorCode
    Error = ProtoSyntaxError
  end

  class FatalErrorCode < ErrorCode
    Error = ProtoFatalError
  end

  class ServerBusyCode < ErrorCode
    Error = ProtoServerError
  end

  class RetryCode < ReplyCode
    Error = ProtoRetryError
  end

  class UnknownCode < ReplyCode
    Error = ProtoUnknownError
  end


=begin

== Net::ProtocolSocket

=== Super Class

Object

=== Class Methods

: new( address = 'localhost', port = nil )
  This create new ProtocolSocket object, and connect to server.


=== Methods

: close
  This method closes socket.

: address, addr
  a FQDN address of server

: ip_address, ipaddr
  an IP address of server

: port
  connecting port number.

: closed?
  true if ProtocolSokcet have been closed already


: read( length )
  This method read 'length' bytes and return the string.

: readuntil( target )
  This method read until find 'target'. Returns read string.

: readline
  read until "\r\n" and returns it without "\r\n".

: read_pendstr
  This method read until "\r\n.\r\n".
  At the same time, delete period at line head and final line ("\r\n.\r\n").

: read_pendlist
: read_pendlist{|line| .... }
  This method read until "\r\n.\r\n". This method resembles to 'read_pendstr',
  but 'read_pendlist' don't check period at line head, and returns array which
  each element is one line.

  When this method was called with block, evaluate it for each reading a line.


: write( src )
  This method send 'src'. ProtocolSocket read strings from 'src' by 'each'
  iterator. This method returns written bytes.

: writebin( src )
  This method send 'src'. ProtocolSokcet read string from 'src' by 'each'
  iterator. This method returns written bytes.

: writeline( str )
  This method writes 'str'. There has not to be bare "\r" or "\n" in 'str'.

: write_pendstr( src )
  This method writes 'src' as a mail.
  ProtocolSocket reads strings from 'src' by 'each' iterator.
  This returns written bytes.

=end

  class ProtocolSocket

    def initialize( addr, port, pipe = nil )
      @@addr = addr
      @@port = port
      @@pipe = pipe

      @@closed  = true
      @@ipaddr  = ''
      @@sending = ''
      @@buffer  = ''

      @@socket = TCPsocket.new( addr, port )
      @@closed = false
      @@ipaddr = @@socket.addr[3]
    end

    attr :pipe, true

    class << self
      alias open new
    end

    def reopen
      unless closed? then
        @@socket.close
        @@buffer = ''
      end
      @@socket = TCPsocket.new( @@addr, @@port )
    end


    attr :socket, true

    def close
      @@socket.close
      @@closed = true
    end

    def closed?
      @@closed
    end

    def address
      @@addr.dup
    end
    alias addr address

    attr :port

    def ip_address
      @@ipaddr.dup
    end
    alias ipaddr ip_address

    attr :sending


    CRLF    = "\r\n"
    D_CRLF  = ".\r\n"
    TERMEXP = /\n|\r\n|\r/o


    def read( len, ret = '' )
      @@pipe << "reading #{len} bytes...\n" if pre = @@pipe ; @@pipe = nil

      rsize = 0
      while rsize + @@buffer.size < len do
        rsize += writeinto( ret, @@buffer.size )
        fill_rbuf
      end
      writeinto( ret, len - rsize )

      @@pipe << "read #{len} bytes\n" if @@pipe = pre
      ret
    end


    def read_all( ret = '' )
      @@pipe << "reading all...\n" if pre = @@pipe; @@pipe = nil

      rsize = 0
      begin
        while true do
          rsize += writeinto( ret, @@buffer.size )
          fill_rbuf
        end
      rescue EOFError
        ;
      end

      @@pipe << "read #{rsize} bytes\n" if @@pipe = pre
      ret
    end


    def readuntil( target )
      until idx = @@buffer.index( target ) do
        fill_rbuf
      end

      ret = ''
      writeinto( ret, idx + target.size )
      ret
    end

        
    def readline
      ret = readuntil( CRLF )
      ret.chop!
      ret
    end


    def read_pendstr( dest = '' )
      @@pipe << "reading text...\n" if pre = @@pipe ; @@pipe = nil

      rsize = 0

      while (str = readuntil( CRLF )) != D_CRLF do
        rsize += str.size
        str.gsub!( /\A\./o, '' )
        dest << str
      end

      @@pipe << "read #{rsize} bytes\n" if @@pipe = pre
      dest
    end


    def read_pendlist
      @@pipe << "reading list...\n" if pre = @@pipe ; @@pipe = nil

      arr = []
      str = nil
      call = iterator?

      while (str = readuntil( CRLF )) != D_CRLF do
        str.chop!
        arr.push str
        yield str if iterator?
      end

      @@pipe << "read #{arr.size} lines\n" if @@pipe = pre
      arr
    end


    private


    READ_BLOCK = 1024 * 8

    def fill_rbuf
      @@buffer << @@socket.sysread( READ_BLOCK )
    end

    def writeinto( ret, len )
      bsi = @@buffer.size
      ret << @@buffer[ 0, len ]
      @@buffer = @@buffer[ len, bsi - len ]

      @@pipe << %{read  "#{Net.quote ret}"\n} if @@pipe
      len
    end


    public


    def write( src )
      do_write_beg
      each_crlf_line( src ) do |line|
        do_write_do line
      end
      do_write_fin
    end


    def writebin( src )
      do_write_beg
      src.each do |bin|
        do_write_do bin
      end
      do_write_fin
    end


    def writeline( str )
      do_write_beg
      do_write_do str
      do_write_do CRLF
      do_write_fin
    end


    def write_pendstr( src )
      @@pipe << "writing text from #{src.type}" if pre = @@pipe ; @@pipe = nil

      do_write_beg
      each_crlf_line( src ) do |line|
        do_write_do '.' if line[0] == ?.
        do_write_do line
      end
      do_write_do D_CRLF
      wsize = do_write_fin

      @@pipe << "wrote #{wsize} bytes text" if @@pipe = pre
      wsize
    end


    private


    def each_crlf_line( src )
      buf = ''
      beg = 0
      pos = s = bin = nil

      src.each do |bin|
        buf << bin

        beg = 0
        while pos = buf.index( TERMEXP, beg ) do
          s = $&.size
          break if pos + s == buf.size - 1 and buf[-1] == ?\r

          yield buf[ beg, pos - beg ] << CRLF
          beg = pos + s
        end
        buf = buf[ beg, buf.size - beg ] if beg != 0
      end

      buf << "\n" unless /\n|\r/o === buf[-1,1]

      beg = 0
      while pos = buf.index( TERMEXP, beg ) do
        yield buf[ beg, pos - beg ] << CRLF
        beg = pos + $&.size
      end
    end


    def do_write_beg
      @@writtensize = 0
      @@sending = ''
    end

    def do_write_do( arg )
      if @@pipe or @@sending.size < 128 then
        @@sending << Net.quote( arg )
      else
        @@sending << '...' unless @@sending[-1] == ?.
      end

      s = @@socket.write( arg )
      @@writtensize += s
      s
    end

    def do_write_fin
      if @@pipe then
        @@pipe << 'write "'
        @@pipe << @@sending
        @@pipe << "\"\n"
      end

      @@socket.flush
      @@writtensize
    end

  end


  def Net.quote( str )
    str = str.gsub( "\n", '\\n' )
    str.gsub!( "\r", '\\r' )
    str.gsub!( "\t", '\\t' )
    str
  end

end   # module Net
@


1.9
log
@Version 1.1.4

o  (HTTP) allow no content-length data
@
text
@@


1.8
log
@o  remove RD white lines
@
text
@d3 1
a3 1
= net/session.rb version 1.1.3
d18 1
d33 1
a33 1
  The version of Session class. It is a string like "1.1.3".
a76 2
    Version = '1.1.3'

d472 1
a472 1
        flush_rbuf
a512 1

d514 1
a514 2
        rsize += @@buffer.size
        ret << fetch_rbuf( @@buffer.size )
d517 1
a517 1
      ret << fetch_rbuf( len - rsize )
d524 18
d547 3
a549 1
      fetch_rbuf( idx + target.size )
d603 1
a603 1
    def fetch_rbuf( len )
d605 1
a605 1
      ret = @@buffer[ 0, len ]
d609 1
a609 5
      ret
    end

    def flush_rbuf
      @@buffer = ''
@


1.7
log
@Net version 1.1.3

o  http.rb rd
o  Session -> Protocol
@
text
@a31 1

a37 1

a41 1

a46 1

a53 1

a56 1

a59 1

a65 1

a69 1

a248 1

a255 1

a385 1

a391 1

a394 1

a397 1

a400 1

a403 1

a407 1

a410 1

a413 1

a416 1

a421 1

a429 1

a433 1

a437 1

a440 1

@


1.6
log
@Version 1.1.2

o  proxy, version 1
o  use fullpath shvar
@
text
@d3 1
a3 1
= net/session.rb version 1.1.2
d7 2
a8 2
This library is distributed under the terms of Ruby style license.
You can freely distribute/modify this file.
d21 1
a21 1
== Net::Session
d23 1
a23 1
the abstruct class for Internet protocol session
d33 1
a33 1
  The version of Session class. It is a string like "1.1.2".
d40 1
a40 1
  This method Create a new Session object.
d45 1
a45 1
  This method create a new Session object and start session.
d49 5
d67 1
a67 1
  This method start session. If you call this method when the session
d74 1
a74 1
  This method finish session. If you call this method before session starts,
d83 1
a83 1
  class Session
d85 1
a85 1
    Version = '1.1.2'
d90 1
a90 1
        session = new( address, port )
d93 1
a93 1
          session.start( *args ) { yield session }
d95 2
a96 2
          session.start *args
          session
d112 2
a113 5
          def connect
            tmpa, tmpp      = @@address, @@port
            @@address, @@port = @@proxyaddr, @@proxyport
            super
            @@address, @@port = tmpa, tmpp
d134 1
a134 1
      def session_setvar( name, val )
d148 2
a149 2
    # session_setvar command_type
    # session_setvar port
d155 3
a157 3
    session_setvar :port,         'nil'
    session_setvar :command_type, 'nil'
    session_setvar :socket_type,  'Net::ProtocolSocket'
d160 2
a161 2
    def initialize( addr = 'localhost', port = nil )
      @@address = addr
d167 1
a167 1
      @@proto   = nil
d175 1
d184 1
a184 1
        connect
d193 1
a193 1
      if @@proto then
d231 3
a233 3
    def connect
      @@socket = self.type.socket_type.open( @@address, @@port, @@pipe )
      @@proto  = self.type.command_type.new( @@socket )
d237 3
a239 3
      @@proto.quit
      @@proto  = nil
      @@socket = nil
d244 2
d267 1
a267 1
  This method finishes protocol.
d308 5
@


1.5
log
@Version 1.1.1

o  HTTP chunk data
@
text
@d3 1
a3 1
= net/session.rb version 1.1.1
d23 1
a23 1
the abstruct class for Internet session
d33 1
a33 1
  The version of Session class. It is a string like "1.1.1".
d80 1
a80 1
    Version = '1.1.1'
d95 35
d146 2
a147 2
    # class method command_type
    # class method port
a148 1
    # private method proto_initialize
d155 1
a155 1
    session_setvar :socket_type,  'ProtocolSocket'
d270 1
d274 1
d284 1
d291 4
a294 1
      rep = get_reply
d301 1
d315 1
d367 4
d667 1
a667 1
      pos = nil
d669 2
a670 2
      src.each do |b|
        buf << b
d673 6
a678 6
        while (pos = buf.index(TERMEXP, beg)) and (pos < buf.size - 2) do
          pos += $&.size
          tmp = buf[ beg, pos - beg ]
          tmp.chop!
          yield tmp << CRLF
          beg = pos
d687 2
a688 5
        pos += $&.size
        tmp = buf[ beg, pos - beg ]
        tmp.chop!
        yield tmp << CRLF
        beg = pos
@


1.4
log
@Version 1.1.0
o  http.rb
o  support class swap
o  Net.quote
@
text
@d3 1
a3 1
= net/session.rb version 1.1.0
d33 1
a33 1
  The version of Session class. It is a string like "1.1.0".
d80 1
a80 1
    Version = '1.1.0'
@


1.3
log
@19991018
@
text
@d3 1
a3 1
= Net module version 1.0.3 reference manual
d5 1
a5 1
session.rb written by Minero Aoki <aamine@@dp.u-netsurf.ne.jp>
d8 1
a8 1
You can freely distribute/modify/copy this file.
d16 1
a16 10
class String

  def doquote
    str = self.gsub( "\n", '\\n' )
    str.gsub!( "\r", '\\r' )
    str.gsub!( "\t", '\\t' )
    return str
  end

end
d33 1
a33 10
  The version of Session class. It is a string like "1.0.3".

=end


module Net

  class Session

    Version = '1.0.3'
a34 1
=begin
a48 25
=end

    def initialize( addr = 'localhost', port = nil )
      proto_initialize
      @@address = addr
      @@port    = port if port

      @@active  = false
      @@pipe    = nil
    end

    class << self
      def start( address = 'localhost', port = nil, *args )
        inst = new( address, port )
        ret = inst.start( *args )

        if iterator? then
          ret = yield( inst )
          inst.finish
        end
        return ret
      end
    end

=begin
a59 12
=end

    attr :address
    attr :port

    attr :socket

    attr :proto_type
    attr :proto, true

=begin

d78 64
d146 6
a151 4
      if Class === args[0] then
        c = args.shift
      else
        c = ProtocolSocket
a152 5
      @@socket = c.open( @@address, @@port, @@pipe )
      @@pipe = nil

      @@proto = @@proto_type.new( @@socket )
      do_start( *args )
a155 2
      @@active = false

d158 10
a167 1
        @@proto = nil
d175 3
a177 1
    def active?() @@active end
d179 1
a179 1
    def set_pipe( arg )
d183 22
a235 1
      check_reply( SuccessCode )
d286 1
a286 2
      err, tag = Errors[ self.type ]
      mes = sprintf( <<MES, tag, @@code, sending.doquote, @@msg.doquote )
d288 1
a288 1
%s: status %s
d295 2
a296 1
      raise err, mes
d301 23
a323 7
  class SuccessCode     < ReplyCode ; end
  class ContinueCode    < SuccessCode ; end
  class ErrorCode       < ReplyCode ; end
  class SyntaxErrorCode < ErrorCode ; end
  class FatalErrorCode  < ErrorCode ; end
  class ServerBusyCode  < ErrorCode ; end
  class UnknownCode     < ReplyCode ; end
d325 2
a326 10
  class ReplyCode
    Errors = {
      SuccessCode     => [ ProtoUnknownError, 'unknown error' ],
      ContinueCode    => [ ProtoUnknownError, 'unknown error' ],
      ErrorCode       => [ ProtocolError, 'protocol error' ],
      SyntaxErrorCode => [ ProtoSyntaxError, 'syntax error' ],
      FatalErrorCode  => [ ProtoFatalError, 'fatal error' ],
      ServerBusyCode  => [ ProtoServerError, 'probably server busy' ],
      UnknownCode     => [ ProtoUnknownError, 'unknown error' ]
    }
a343 25
=end

  class ProtocolSocket

    def initialize( addr, port, pipe = nil )
      @@address = addr
      @@port    = port
      @@pipe    = pipe

      @@ipaddr  = ''
      @@closed  = false
      @@sending = ''
      @@buffer  = ''

      @@socket = TCPsocket.new( addr, port )
      @@ipaddr = @@socket.addr[3]
    end

    attr :pipe, true

    class << self
      alias open new
    end

=begin
d351 1
a351 1
: addr
d355 1
a355 1
: ipaddr
a366 24
=end

    attr :socket, true

    def close
      @@socket.close
      @@closed = true
    end

    def closed?() @@closed end

    def addr() @@address.dup end
    def port() @@port end
    def ipaddr() @@ipaddr.dup end

    attr :sending


    CRLF    = "\r\n"
    D_CRLF  = ".\r\n"
    TERMEXP = /\n|\r\n|\r/o


=begin
d394 21
d417 63
d481 2
d492 2
a493 1
      return ret
d502 1
a502 1
      return fetch_rbuf( idx + target.size )
d509 1
a509 1
      return ret
d525 1
a525 1
      return dest
d543 1
a543 1
      return arr
d561 2
a562 2
      @@pipe << %{read  "#{debugstr ret}"\n} if @@pipe
      return ret
d565 3
a568 23
=begin

: write( src )

  This method send 'src'. ProtocolSocket read strings from 'src' by 'each'
  iterator. This method returns written bytes.

: writebin( src )

  This method send 'src'. ProtocolSokcet read string from 'src' by 'each'
  iterator. This method returns written bytes.

: writeline( str )

  This method writes 'str'. There has not to be bare "\r" or "\n" in 'str'.

: write_pendstr( src )

  This method writes 'src' as a mail.
  ProtocolSocket reads strings from 'src' by 'each' iterator.
  This returns written bytes.

=end
d578 1
a578 1
      return do_write_fin
d587 1
a587 1
      return do_write_fin
d595 1
a595 1
      return do_write_fin
d611 1
a611 1
      return wsize
a650 2
      @@wtmp = 'write "' if @@pipe

d656 2
a657 4
      @@wtmp << debugstr( arg ) if @@pipe

      if @@sending.size < 128 then
        @@sending << arg
d664 1
a664 1
      return s
d669 3
a671 3
        @@wtmp << "\n"
        @@pipe << @@wtmp
        @@wtmp = nil
d675 1
a675 1
      return @@writtensize
d678 1
a679 9
    def debugstr( str )
      ret = ''
      while str and tmp = str[ 0, 50 ] do
        str = str[ 50, str.size - 50 ]
        tmp = tmp.inspect
        ret << tmp[ 1, tmp.size - 2 ]
      end
      ret
    end
d681 5
d688 1
a688 1
end
@


1.2
log
@maillib-1.0.2
@
text
@d3 1
a3 1
= Net module version 1.0.2 reference manual
d42 1
a42 1
  The version of Session class. It is a string like "1.0.2".
d51 1
a51 1
    Version = '1.0.2'
d74 1
d76 1
d138 2
a139 3
      if ProtocolSocket === args[0] then
        @@socket = args.shift
        @@socket.pipe = @@pipe
d141 1
a141 1
        @@socket = ProtocolSocket.open( @@address, @@port, @@pipe )
d143 1
@


1.1
log
@maillib-1.0.1
@
text
@d1 11
a11 5
#
# session.rb  version 1.0.1
#
#   author: Minero Aoki <aamine@@dp.u-netsurf.ne.jp>
#
d28 18
d49 11
a59 2
  DEBUG = $DEBUG
  # DEBUG = false
d61 2
d64 3
a66 1
  class Session
d68 1
a68 1
    Version = '1.0.1'
d90 13
d112 20
d134 1
d138 1
d140 1
a140 1
        @@socket = ProtocolSocket.open( @@address, @@port )
d142 2
a145 2

      @@active = true
d149 2
d163 4
d170 23
d285 15
d303 1
a303 1
    def initialize( addr, port )
d306 1
d315 1
d317 1
a317 2
      @@dout = Net::DEBUG
    end
d323 25
d370 30
d431 1
a431 1
      $stderr.puts "reading pendstr" if pre = @@dout ; @@dout = false
d441 1
a441 1
      $stderr.puts "read pendstr #{rsize} bytes" if @@dout = pre
d447 2
d459 1
d478 1
a478 5
      if @@dout then
        $stderr.print 'read  "'
        debugout ret
        $stderr.print "\"\n"
      end
d483 23
a505 1
    ### write
d537 1
a537 2
      $stderr.puts "writing pendstr from #{src.type}" if pre = @@dout
      @@dout = false
d547 1
a547 1
      $stderr.puts "wrote pendstr #{wsize} bytes" if @@dout = pre
d577 1
a577 1
      while pos = buf.index(TERMEXP, beg) do
d588 1
a588 1
      $stderr.print 'write "' if @@dout
d595 1
a595 1
      debugout arg if @@dout
d602 1
d609 5
a613 1
      $stderr.puts if @@dout
d620 4
a623 3
    def debugout( ret )
      while ret and tmp = ret[ 0, 50 ] do
        ret = ret[ 50, ret.size - 50 ]
d625 1
a625 1
        $stderr.print tmp[ 1, tmp.size - 2 ]
d627 1
@


1.1.2.1
log
@maillib-1.0.2
@
text
@d1 5
a5 11
=begin

= Net module version 1.0.2 reference manual

session.rb written by Minero Aoki <aamine@@dp.u-netsurf.ne.jp>

This library is distributed under the terms of Ruby style license.
You can freely distribute/modify/copy this file.

=end

a21 1
=begin
d23 1
a23 15
== Net::Session

the abstruct class for Internet session

=== Super Class

Object

=== Constants

: Version

  The version of Session class. It is a string like "1.0.2".

=end
d25 2
a27 1
module Net
d31 1
a31 18
    Version = '1.0.2'

=begin

=== Class Methods

: new( address = 'localhost', port = nil )

  This method Create a new Session object.

: start( address = 'localhost', port = nil, *args )
: start( address = 'localhost', port = nil, *args ){|session| .... }

  This method create a new Session object and start session.
  If you call this method with block, Session object give itself
  to block and finish session when block returns.

=end
a52 13
=begin

=== Methods

: address

  the address of connecting server (FQDN).

: port

  connecting port number

=end
a61 20
=begin

: start( *args )

  This method start session. If you call this method when the session
  is already started, this only returns false without doing anything.

  '*args' are specified in subclasses.

: finish

  This method finish session. If you call this method before session starts,
  it only return false without doing anything.

: active?

  true if session have been started

=end

a63 1
      @@active = true
a66 1
        @@socket.pipe = @@pipe
d68 1
a68 1
        @@socket = ProtocolSocket.open( @@address, @@port, @@pipe )
a69 2
      @@pipe = nil

d72 2
a76 2
      @@active = false

a88 4
    def set_pipe( arg )
      @@pipe = arg
    end

a91 23
=begin

== Net::Command

=== Super Class

Object

=== Class Methods

: new( socket )

  This method create new Command object. 'socket' must be ProtocolSocket.
  This method is abstract class.


=== Methods

: quit

  This method finishes protocol.

=end
a183 15
=begin

== Net::ProtocolSocket

=== Super Class

Object

=== Class Methods

: new( address = 'localhost', port = nil )

  This create new ProtocolSocket object, and connect to server.

=end
d187 1
a187 1
    def initialize( addr, port, pipe = nil )
a189 1
      @@pipe    = pipe
d198 2
a201 2
    attr :pipe, true

a205 25
=begin

=== Methods

: close

  This method closes socket.

: addr

  a FQDN address of server

: ipaddr

  an IP address of server

: port

  connecting port number.

: closed?

  true if ProtocolSokcet have been closed already

=end
a227 30
=begin

: read( length )

  This method read 'length' bytes and return the string.

: readuntil( target )

  This method read until find 'target'. Returns read string.

: readline

  read until "\r\n" and returns it without "\r\n".

: read_pendstr

  This method read until "\r\n.\r\n".
  At the same time, delete period at line head and final line ("\r\n.\r\n").

: read_pendlist
: read_pendlist{|line| .... }

  This method read until "\r\n.\r\n". This method resembles to 'read_pendstr',
  but 'read_pendlist' don't check period at line head, and returns array which
  each element is one line.

  When this method was called with block, evaluate it for each reading a line.

=end

d259 1
a259 1
      @@pipe << "reading text...\n" if pre = @@pipe ; @@pipe = nil
d269 1
a269 1
      @@pipe << "read #{rsize} bytes\n" if @@pipe = pre
a274 2
      @@pipe << "reading list...\n" if pre = @@pipe ; @@pipe = nil

a284 1
      @@pipe << "read #{arr.size} lines\n" if @@pipe = pre
d303 5
a307 1
      @@pipe << %{read  "#{debugstr ret}"\n} if @@pipe
d312 1
a312 23
=begin

: write( src )

  This method send 'src'. ProtocolSocket read strings from 'src' by 'each'
  iterator. This method returns written bytes.

: writebin( src )

  This method send 'src'. ProtocolSokcet read string from 'src' by 'each'
  iterator. This method returns written bytes.

: writeline( str )

  This method writes 'str'. There has not to be bare "\r" or "\n" in 'str'.

: write_pendstr( src )

  This method writes 'src' as a mail.
  ProtocolSocket reads strings from 'src' by 'each' iterator.
  This returns written bytes.

=end
d344 2
a345 1
      @@pipe << "writing text from #{src.type}" if pre = @@pipe ; @@pipe = nil
d355 1
a355 1
      @@pipe << "wrote #{wsize} bytes text" if @@pipe = pre
d385 1
a385 1
      while pos = buf.index( TERMEXP, beg ) do
d396 1
a396 1
      @@wtmp = 'write "' if @@pipe
d403 1
a403 1
      @@wtmp << debugstr( arg ) if @@pipe
a409 1

d416 1
a416 5
      if @@pipe then
        @@wtmp << "\n"
        @@pipe << @@wtmp
        @@wtmp = nil
      end
d423 3
a425 4
    def debugstr( str )
      ret = ''
      while str and tmp = str[ 0, 50 ] do
        str = str[ 50, str.size - 50 ]
d427 1
a427 1
        ret << tmp[ 1, tmp.size - 2 ]
a428 1
      ret
@


1.1.2.2
log
@net/ version 1.1.3 for ruby 1.4
@
text
@d3 1
a3 1
= net/session.rb version 1.1.3
d5 1
a5 1
written by Minero Aoki <aamine@@dp.u-netsurf.ne.jp>
d7 2
a8 2
This library is distributed under the terms of the Ruby license.
You can freely distribute/modify this library.
d16 10
a25 1
module Net
d30 1
a30 1
== Net::Protocol
d32 1
a32 1
the abstruct class for Internet protocol
a40 1
  The version of Session class. It is a string like "1.1.3".
d42 1
d44 1
a44 1
=== Class Methods
a45 2
: new( address = 'localhost', port = nil )
  This method Creates a new Session object.
d47 1
a47 5
: start( address = 'localhost', port = nil, *args )
: start( address = 'localhost', port = nil, *args ){|session| .... }
  This method creates a new Session object and start session.
  If you call this method with block, Session object give itself
  to block and finish session when block returns.
d49 1
a49 3
: Proxy( address, port )
  This method creates a proxy class of its protocol.
  Arguments are address/port of proxy host.
d51 1
d53 1
a53 1
=== Methods
d55 1
a55 2
: address
  the address of connecting server (FQDN).
d57 1
a57 2
: port
  connecting port number
d59 1
a59 3
: start( *args )
  This method start protocol. If you call this method when the protocol
  is already started, this only returns false without doing anything.
d61 2
a62 1
  '*args' are specified in subclasses.
d64 3
a66 6
: finish
  This method ends protocol. If you call this method before protocol starts,
  it only return false without doing anything.

: active?
  true if session have been started
d70 6
a75 3
  class Protocol

    Version = '1.1.3'
a77 1

d79 2
a80 1
        instance = new( address, port )
d83 2
a84 4
          instance.start( *args ) { yield instance }
        else
          instance.start *args
          instance
d86 1
d88 5
d94 7
a100 23
      def Proxy( p_addr, p_port )
        klass = Class.new( self )
        klass.module_eval %-

          def initialize( addr, port )
            @@proxyaddr = '#{p_addr}'
            @@proxyport = '#{p_port}'
            super @@proxyaddr, @@proxyport
            @@address = addr
            @@port    = port
          end

          def connect( addr, port )
            super @@proxyaddr, @@proxyport
          end
          private :connect
            
          attr :proxyaddr
          attr :proxyport
        -
        def klass.proxy?
          true
        end
d102 1
a102 2
        klass
      end
d104 2
a105 4
      def proxy?
        false
      end
            
d107 1
a107 1
      private
d109 2
a110 9
      def protocol_param( name, val )
        module_eval %-
          def self.#{name.id2name}
            #{val}
          end
        -
      end
        
    end
d112 1
d114 1
a114 18
    #
    # sub-class requirements
    #
    # protocol_param command_type
    # protocol_param port
    #
    # private method do_start  (optional)
    # private method do_finish (optional)
    #

    protocol_param :port,         'nil'
    protocol_param :command_type, 'nil'
    protocol_param :socket_type,  '::Net::ProtocolSocket'


    def initialize( addr = nil, port = nil )
      @@address = addr || 'localhost'
      @@port    = port || self.type.port
d116 2
a117 2
      @@active  = false
      @@pipe    = nil
d119 1
a119 3
      @@command = nil
      @@socket  = nil
    end
d121 1
d123 4
a126 2
    attr :address
    attr :port
d128 1
a128 2
    attr :command
    attr :socket
d130 1
d136 5
a140 6
      begin
        connect @@address, @@port
        do_start *args
        yield if iterator?
      ensure
        finish if iterator?
d142 4
d149 3
a151 1
      if @@command then
d153 1
a153 10
        disconnect
      end

      if @@socket and not @@socket.closed? then
        @@socket.close
        @@socket = nil
      end

      if active? then
        @@active = false
d161 1
a161 3
    def active?
      @@active
    end
d163 1
a163 1
    def set_pipe( arg )   # un-documented
a166 22

    private


    def do_start
    end

    def do_finish
    end


    def connect( addr, port )
      @@socket  = self.type.socket_type.open( addr, port, @@pipe )
      @@command = self.type.command_type.new( @@socket )
    end

    def disconnect
      @@command.quit
      @@command = nil
      @@socket  = nil
    end

a168 2
  Session = Protocol

d181 1
d189 2
a190 1
  This method dispatch command which ends the protocol.
d198 1
a198 1
      @@error_occured = false
a201 1
    attr :error_occured
a210 1
        @@error_occured = false
d217 1
a217 4
      reply_must( get_reply, *oks )
    end

    def reply_must( rep, *oks )
a223 1
      @@error_occured = true
a225 5

    def getok( line, ok = SuccessCode )
      @@socket.writeline line
      check_reply ok
    end
a236 1
  class   ProtoRetryError    <   ProtocolError ; end
d249 2
a250 1
      mes = <<MES
d252 1
a252 1
status %s
d259 1
a259 2
      raise self.type::Error,
        sprintf( mes, @@code, Net.quote(sending), Net.quote(@@msg) )
d264 7
a270 3
  class SuccessCode < ReplyCode
    Error = ProtoUnknownError
  end
d272 10
a281 26
  class ContinueCode < SuccessCode
    Error = ProtoUnknownError
  end

  class ErrorCode < ReplyCode
    Error = ProtocolError
  end

  class SyntaxErrorCode < ErrorCode
    Error = ProtoSyntaxError
  end

  class FatalErrorCode < ErrorCode
    Error = ProtoFatalError
  end

  class ServerBusyCode < ErrorCode
    Error = ProtoServerError
  end

  class RetryCode < ReplyCode
    Error = ProtoRetryError
  end

  class UnknownCode < ReplyCode
    Error = ProtoUnknownError
d296 1
d299 25
d328 1
d331 2
a332 1
: address, addr
d335 2
a336 1
: ip_address, ipaddr
d340 1
d344 1
d347 24
d373 1
d377 1
d381 1
d385 1
d391 1
a397 17

: write( src )
  This method send 'src'. ProtocolSocket read strings from 'src' by 'each'
  iterator. This method returns written bytes.

: writebin( src )
  This method send 'src'. ProtocolSokcet read string from 'src' by 'each'
  iterator. This method returns written bytes.

: writeline( str )
  This method writes 'str'. There has not to be bare "\r" or "\n" in 'str'.

: write_pendstr( src )
  This method writes 'src' as a mail.
  ProtocolSocket reads strings from 'src' by 'each' iterator.
  This returns written bytes.

a399 63
  class ProtocolSocket

    def initialize( addr, port, pipe = nil )
      @@addr = addr
      @@port = port
      @@pipe = pipe

      @@closed  = true
      @@ipaddr  = ''
      @@sending = ''
      @@buffer  = ''

      @@socket = TCPsocket.new( addr, port )
      @@closed = false
      @@ipaddr = @@socket.addr[3]
    end

    attr :pipe, true

    class << self
      alias open new
    end

    def reopen
      unless closed? then
        @@socket.close
        flush_rbuf
      end
      @@socket = TCPsocket.new( @@addr, @@port )
    end


    attr :socket, true

    def close
      @@socket.close
      @@closed = true
    end

    def closed?
      @@closed
    end

    def address
      @@addr.dup
    end
    alias addr address

    attr :port

    def ip_address
      @@ipaddr.dup
    end
    alias ipaddr ip_address

    attr :sending


    CRLF    = "\r\n"
    D_CRLF  = ".\r\n"
    TERMEXP = /\n|\r\n|\r/o


a400 2
      @@pipe << "reading #{len} bytes...\n" if pre = @@pipe ; @@pipe = nil

d410 1
a410 2
      @@pipe << "read #{len} bytes\n" if @@pipe = pre
      ret
d419 1
a419 1
      fetch_rbuf( idx + target.size )
d426 1
a426 1
      ret
d442 1
a442 1
      dest
d460 1
a460 1
      arr
d478 2
a479 2
      @@pipe << %{read  "#{Net.quote ret}"\n} if @@pipe
      ret
a481 3
    def flush_rbuf
      @@buffer = ''
    end
d483 23
d515 1
a515 1
      do_write_fin
d524 1
a524 1
      do_write_fin
d532 1
a532 1
      do_write_fin
d548 1
a548 1
      wsize
d558 1
a558 1
      pos = s = bin = nil
d560 2
a561 2
      src.each do |bin|
        buf << bin
d564 6
a569 6
        while pos = buf.index( TERMEXP, beg ) do
          s = $&.size
          break if pos + s == buf.size - 1 and buf[-1] == ?\r

          yield buf[ beg, pos - beg ] << CRLF
          beg = pos + s
d578 5
a582 2
        yield buf[ beg, pos - beg ] << CRLF
        beg = pos + $&.size
d588 2
d595 4
a598 2
      if @@pipe or @@sending.size < 128 then
        @@sending << Net.quote( arg )
d605 1
a605 1
      s
d610 3
a612 3
        @@pipe << 'write "'
        @@pipe << @@sending
        @@pipe << "\"\n"
d616 1
a616 1
      @@writtensize
a618 1
  end
d620 9
a629 5
  def Net.quote( str )
    str = str.gsub( "\n", '\\n' )
    str.gsub!( "\r", '\\r' )
    str.gsub!( "\t", '\\t' )
    str
d632 1
a632 1
end   # module Net
@


1.1.2.3
log
@Version 1.1.4

o (HTTP) allow no content-length message
@
text
@d3 1
a3 1
= net/session.rb
a17 1
  Version = '1.1.4'
d32 1
a32 1
  The version of Session class. It is a string like "1.1.4".
d76 2
d473 1
a473 1
        @@buffer = ''
d514 1
d516 2
a517 1
        rsize += writeinto( ret, @@buffer.size )
d520 1
a520 1
      writeinto( ret, len - rsize )
a526 18
    def read_all( ret = '' )
      @@pipe << "reading all...\n" if pre = @@pipe; @@pipe = nil

      rsize = 0
      begin
        while true do
          rsize += writeinto( ret, @@buffer.size )
          fill_rbuf
        end
      rescue EOFError
        ;
      end

      @@pipe << "read #{rsize} bytes\n" if @@pipe = pre
      ret
    end


d532 1
a532 3
      ret = ''
      writeinto( ret, idx + target.size )
      ret
d586 1
a586 1
    def writeinto( ret, len )
d588 1
a588 1
      ret << @@buffer[ 0, len ]
d592 5
a596 1
      len
@


1.1.2.4
log
@protocol.rb smtp.rb pop.rb http.rb for ruby 1.4 branch
@
text
@@


