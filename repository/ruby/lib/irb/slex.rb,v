head	1.4;
access;
symbols
	irb_0_9:1.4
	v1_6_7:1.1.2.2
	v1_6_6:1.1.2.2
	v1_6_5:1.1.2.2
	v1_6_4:1.1.2.2
	v1_7_1:1.3
	v1_6_4_preview4:1.1.2.2
	v1_6_4_preview3:1.1.2.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1
	v1_6_4_preview2:1.1
	v1_6_4_preview1:1.1
	v1_6_3:1.1
	ruby_m17n:1.1.0.4
	ruby_1_6:1.1.0.2
	v1_6_2:1.1
	v1_6_1:1.1
	v1_6_0:1.1;
locks; strict;
comment	@# @;


1.4
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.08.55.54;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.30.17.54.55;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.12.09.07.55;	author matz;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.03.08.56.49;	author knu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* irb 0.9
@
text
@#
#   irb/slex.rb - symple lex analizer
#   	$Release Version: 0.9$
#   	$Revision: 1.16 $
#   	$Date: 2002/06/13 05:18:32 $
#   	by Keiju ISHITSUKA(keiju@@ishituska.com)
#
# --
#
#   
#

require "e2mmap"

class SLex
  @@RCS_ID='-$Id: slex.rb,v 1.16 2002/06/13 05:18:32 keiju Exp keiju $-'

  extend Exception2MessageMapper
  def_exception :ErrNodeNothing, "node nothing"
  def_exception :ErrNodeAlreadyExists, "node already exists"

  class << self
    attr_accessor :debug_level
    def debug?
      debug_level > 0
    end
  end
  @@debug_level = 0

  def initialize
    @@head = Node.new("")
  end
  
  def def_rule(token, preproc = nil, postproc = nil)
    #      print node.inspect, "\n" if SLex.debug?
    postproc = proc if iterator?
    node = create(token, preproc, postproc)
  end
  
  def def_rules(*tokens)
    if iterator?
      p = proc
    end
    for token in tokens
      def_rule(token, nil, p)
    end
  end
  
  def preporc(token, proc)
    node = search(token)
    node.preproc=proc
  end
  
  def postproc(token)
    node = search(token, proc)
    node.postproc=proc
  end
  
  def search(token)
    @@head.search(token.split(//))
  end

  def create(token, preproc = nil, postproc = nil)
    @@head.create_subnode(token.split(//), preproc, postproc)
  end
  
  def match(token)
    case token
    when Array
    when String
      return match(token.split(//))
    else
      return @@head.match_io(token)
    end
    ret = @@head.match(token)
    printf "match end: %s:%s", ret, token.inspect if SLex.debug?
    ret
  end
  
  def inspect
    format("<SLex: @@head = %s>", @@head.inspect)
  end

  #----------------------------------------------------------------------
  #
  #   class Node - 
  #
  #----------------------------------------------------------------------
  class Node
    # if postproc is nil, this node is an abstract node.
    # if postproc is non-nil, this node is a real node.
    def initialize(preproc = nil, postproc = nil)
      @@Tree = {}
      @@preproc = preproc
      @@postproc = postproc
    end

    attr_accessor :preproc
    attr_accessor :postproc
    
    def search(chrs, opt = nil)
      return self if chrs.empty?
      ch = chrs.shift
      if node = @@Tree[ch]
	node.search(chrs, opt)
      else
	if opt
	  chrs.unshift ch
	  self.create_subnode(chrs)
	else
	  SLex.fail ErrNodeNothing
	end
      end
    end
    
    def create_subnode(chrs, preproc = nil, postproc = nil)
      if chrs.empty?
	if @@postproc
	  p node
	  SLex.fail ErrNodeAlreadyExists
	else
	  print "Warn: change abstruct node to real node\n" if SLex.debug?
	  @@preproc = preproc
	  @@postproc = postproc
	end
	return self
      end
      
      ch = chrs.shift
      if node = @@Tree[ch]
	if chrs.empty?
	  if node.postproc
	    p node
	    p self
	    p ch
	    p chrs
	    SLex.fail ErrNodeAlreadyExists
	  else
	    print "Warn: change abstruct node to real node\n" if SLex.debug?
	    node.preproc = preproc
	    node.postproc = postproc
	  end
	else
	  node.create_subnode(chrs, preproc, postproc)
	end
      else
	if chrs.empty?
	  node = Node.new(preproc, postproc)
	else
	  node = Node.new
	  node.create_subnode(chrs, preproc, postproc)
	end
	@@Tree[ch] = node
      end
      node
    end

    #
    # chrs: String
    #       character array
    #       io must have getc()/ungetc(); and ungetc() must be
    #       able to be called arbitrary number of times. 
    #
    def match(chrs, op = "")
      print "match>: ", chrs, "op:", op, "\n" if SLex.debug?
      if chrs.empty?
	if @@preproc.nil? || @@preproc.call(op, chrs)
	  printf "op1: %s\n", op if SLex.debug?
	  @@postproc.call(op, chrs)
	else
	  nil
	end
      else
	ch = chrs.shift
	if node = @@Tree[ch]
	  if ret = node.match(chrs, op+ch)
	    return ret
	  else
	    chrs.unshift ch
	    if @@postproc and @@preproc.nil? || @@preproc.call(op, chrs)
	      printf "op2: %s\n", op.inspect if SLex.debug?
	      ret = @@postproc.call(op, chrs)
	      return ret
	    else
	      return nil
	    end
	  end
	else
	  chrs.unshift ch
	  if @@postproc and @@preproc.nil? || @@preproc.call(op, chrs)
	    printf "op3: %s\n", op if SLex.debug?
	    @@postproc.call(op, chrs)
	    return ""
	  else
	    return nil
	  end
	end
      end
    end

    def match_io(io, op = "")
      if op == ""
	ch = io.getc
	if ch == nil
	  return nil
	end
      else
	ch = io.getc_of_rests
      end
      if ch.nil?
	if @@preproc.nil? || @@preproc.call(op, io)
	  printf "op1: %s\n", op if SLex.debug?
	  @@postproc.call(op, io)
	else
	  nil
	end
      else
	if node = @@Tree[ch]
	  if ret = node.match_io(io, op+ch)
	    ret
	  else
	    io.ungetc ch
	    if @@postproc and @@preproc.nil? || @@preproc.call(op, io)
	      printf "op2: %s\n", op.inspect if SLex.debug?
	      @@postproc.call(op, io)
	    else
	      nil
	    end
	  end
	else
	  io.ungetc ch
	  if @@postproc and @@preproc.nil? || @@preproc.call(op, io)
	    printf "op3: %s\n", op if SLex.debug?
	    @@postproc.call(op, io)
	  else
	    nil
	  end
	end
      end
    end
  end
end

if $0 == __FILE__
  #    Tracer.on
  case $1
  when "1"
    tr = SLex.new
    print "0: ", tr.inspect, "\n"
    tr.def_rule("=") {print "=\n"}
    print "1: ", tr.inspect, "\n"
    tr.def_rule("==") {print "==\n"}
    print "2: ", tr.inspect, "\n"
    
    print "case 1:\n"
    print tr.match("="), "\n"
    print "case 2:\n"
    print tr.match("=="), "\n"
    print "case 3:\n"
    print tr.match("=>"), "\n"
    
  when "2"
    tr = SLex.new
    print "0: ", tr.inspect, "\n"
    tr.def_rule("=") {print "=\n"}
    print "1: ", tr.inspect, "\n"
    tr.def_rule("==", proc{false}) {print "==\n"}
    print "2: ", tr.inspect, "\n"
    
    print "case 1:\n"
    print tr.match("="), "\n"
    print "case 2:\n"
    print tr.match("=="), "\n"
    print "case 3:\n"
    print tr.match("=>"), "\n"
  end
  exit
end
@


1.3
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.3$
#   	$Revision: 1.2 $
#   	$Date: 2001/04/30 17:54:55 $
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.2 2001/04/30 17:54:55 knu Exp $-'
d71 1
a71 2
      token = token.split(//)
      match(token.split(//))
@


1.2
log
@Merge from irb 0.7.3.
@
text
@d4 2
a5 2
#   	$Revision: 1.1 $
#   	$Date: 2000/05/12 09:07:55 $
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.1 2000/05/12 09:07:55 matz Exp $-'
d91 2
a92 3
    # if postproc no exist, this node is abstract node.
    # if postproc isn't nil, this node is real node.
    # (JP: postprocがなければ抽象ノード, nilじゃなければ具象ノード)
d161 3
a163 5
    #       character array (JP: 一文字づつのArray)
    #       io It must have getc()/ungetc(), and ungetc() can be
    #          called any number of times. 
    #          (JP:だ世誓し, getc/ungetcが備わっていなければならない.
    #           さらに, ungetcは複数回可能でなくてはならない.)
@


1.1
log
@2000-05-12
@
text
@d2 5
a6 5
#   irb-slex.rb - symple lex analizer
#   	$Release Version: 0.6$
#   	$Revision: 1.5 $
#   	$Date: 1999/03/05 05:19:05 $
#   	by Keiju ISHITSUKA(Nippon Rational Inc.)
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.5 1999/03/05 05:19:05 keiju Exp keiju $-'
d23 1
a23 1
    attr :debug_level, TRUE
d93 1
d100 2
a101 2
    attr :preproc, TRUE
    attr :postproc, TRUE
d162 1
a162 1
    #       character array
d165 2
d271 1
a271 1
    tr.def_rule("==", proc{FALSE}) {print "==\n"}
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d2 5
a6 5
#   irb/slex.rb - symple lex analizer
#   	$Release Version: 0.7.3$
#   	$Revision: 1.1 $
#   	$Date: 2000/05/12 09:07:55 $
#   	by Keiju ISHITSUKA(keiju@@ishituska.com)
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.1 2000/05/12 09:07:55 matz Exp $-'
d23 1
a23 1
    attr_accessor :debug_level
a92 1
    # (JP: postprocがなければ抽象ノード, nilじゃなければ具象ノード)
d99 2
a100 2
    attr_accessor :preproc
    attr_accessor :postproc
d161 1
a161 1
    #       character array (JP: 一文字づつのArray)
a163 2
    #          (JP:だ世誓し, getc/ungetcが備わっていなければならない.
    #           さらに, ungetcは複数回可能でなくてはならない.)
d268 1
a268 1
    tr.def_rule("==", proc{false}) {print "==\n"}
@


1.1.2.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.1 $
#   	$Date: 2001/04/30 18:39:35 $
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.1.2.1 2001/04/30 18:39:35 knu Exp $-'
d91 3
a93 2
    # if postproc is nil, this node is an abstract node.
    # if postproc is non-nil, this node is a real node.
d162 5
a166 3
    #       character array
    #       io must have getc()/ungetc(); and ungetc() must be
    #       able to be called arbitrary number of times. 
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@d2 5
a6 5
#   irb/slex.rb - symple lex analizer
#   	$Release Version: 0.7.3$
#   	$Revision: 1.9 $
#   	$Date: 2001/04/16 06:06:20 $
#   	by Keiju ISHITSUKA(keiju@@ishituska.com)
d16 1
a16 1
  @@RCS_ID='-$Id: slex.rb,v 1.9 2001/04/16 06:06:20 keiju Exp keiju $-'
d23 1
a23 1
    attr_accessor :debug_level
a92 1
    # (JP: postprocがなければ抽象ノード, nilじゃなければ具象ノード)
d99 2
a100 2
    attr_accessor :preproc
    attr_accessor :postproc
d161 1
a161 1
    #       character array (JP: 一文字づつのArray)
a163 2
    #          (JP:だ世誓し, getc/ungetcが備わっていなければならない.
    #           さらに, ungetcは複数回可能でなくてはならない.)
d268 1
a268 1
    tr.def_rule("==", proc{false}) {print "==\n"}
@
