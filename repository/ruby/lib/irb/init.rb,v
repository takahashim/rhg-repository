head	1.4;
access;
symbols
	irb_0_9:1.3
	v1_6_7:1.1.2.2
	v1_6_6:1.1.2.2
	v1_6_5:1.1.2.2
	v1_6_4:1.1.2.2
	v1_7_1:1.2
	v1_6_4_preview4:1.1.2.2
	v1_6_4_preview3:1.1.2.2
	ruby_1_6:1.1.0.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.02.16.45.35;	author nobu;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.03.08.55.53;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.03.08.56.49;	author knu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use Object#class instead of deprecated Object#type.
@
text
@#
#   irb/init.rb - irb initialize module
#   	$Release Version: 0.9$
#   	$Revision: 1.3 $
#   	$Date: 2002/07/09 11:17:16 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#
# --
#
#   
#

module IRB

  # initialize config
  def IRB.initialize(ap_path)
    IRB.init_config(ap_path)
    IRB.init_error
    IRB.parse_opts
    IRB.run_config
    IRB.load_modules

    unless @@CONF[:PROMPT][@@CONF[:PROMPT_MODE]]
      IRB.fail(UndefinedPromptMode, @@CONF[:PROMPT_MODE]) 
    end
  end

  # @@CONF default setting
  def IRB.init_config(ap_path)
    # class instance variables
    @@TRACER_INITIALIZED = false

    # default configurations
    unless ap_path and @@CONF[:AP_NAME]
      ap_path = File.join(File.dirname(File.dirname(__FILE__)), "irb.rb")
    end
    @@CONF[:AP_NAME] = File::basename(ap_path, ".rb")

    @@CONF[:IRB_NAME] = "irb"
    @@CONF[:IRB_LIB_PATH] = File.dirname(__FILE__)

    @@CONF[:RC] = true
    @@CONF[:LOAD_MODULES] = []
    @@CONF[:IRB_RC] = nil

    @@CONF[:MATH_MODE] = false
    @@CONF[:USE_READLINE] = false unless defined?(ReadlineInputMethod)
    @@CONF[:INSPECT_MODE] = nil
    @@CONF[:USE_TRACER] = false
    @@CONF[:USE_LOADER] = false
    @@CONF[:IGNORE_SIGINT] = true
    @@CONF[:IGNORE_EOF] = false
    @@CONF[:ECHO] = nil
    @@CONF[:VERBOSE] = nil

    @@CONF[:EVAL_HISTORY] = nil

    @@CONF[:BACK_TRACE_LIMIT] = 16

    @@CONF[:PROMPT] = {
      :NULL => {
	:PROMPT_I => nil,
	:PROMPT_S => nil,
	:PROMPT_C => nil,
	:RETURN => "%s\n"
      },
      :DEFAULT => {
	:PROMPT_I => "%N(%m):%03n:%i> ",
	:PROMPT_S => "%N(%m):%03n:%i%l ",
	:PROMPT_C => "%N(%m):%03n:%i* ",
	:RETURN => "%s\n"
      },
      :SIMPLE => {
	:PROMPT_I => ">> ",
	:PROMPT_S => nil,
	:PROMPT_C => "?> ",
	:RETURN => "=> %s\n"
      },
      :INF_RUBY => {
	:PROMPT_I => "%N(%m):%03n:%i> ",
	:PROMPT_S => nil,
	:PROMPT_C => nil,
	:RETURN => "%s\n",
	:AUTO_INDENT => true
      },
      :XMP => {
	:PROMPT_I => nil,
	:PROMPT_S => nil,
	:PROMPT_C => nil,
	:RETURN => "    ==>%s\n"
      }
    }

    @@CONF[:PROMPT_MODE] = :DEFAULT
    @@CONF[:AUTO_INDENT] = false

    @@CONF[:CONTEXT_MODE] = 3 # use binding in function on TOPLEVEL_BINDING
    @@CONF[:SINGLE_IRB] = false

#    @@CONF[:LC_MESSAGES] = "en"
    @@CONF[:LC_MESSAGES] = Locale.new
    
    @@CONF[:DEBUG_LEVEL] = 1
  end

  def IRB.init_error
    @@CONF[:LC_MESSAGES].load("irb/error.rb")
  end

  # option analyzing
  def IRB.parse_opts
    while opt = ARGV.shift
      case opt
      when "-f"
	@@CONF[:RC] = false
      when "-m"
	@@CONF[:MATH_MODE] = true
      when "-d"
	$DEBUG = true
      when "-r"
	opt = ARGV.shift
	@@CONF[:LOAD_MODULES].push opt if opt
      when /^-K(.)/
	$KCODE = $1
      when "--inspect"
	@@CONF[:INSPECT_MODE] = true
      when "--noinspect"
	@@CONF[:INSPECT_MODE] = false
      when "--readline"
	@@CONF[:USE_READLINE] = true
      when "--noreadline"
	@@CONF[:USE_READLINE] = false
      when "--echo"
	@@CONF[:ECHO] = true
      when "--noecho"
	@@CONF[:ECHO] = false
      when "--verbose"
	@@CONF[:VERBOSE] = true
      when "--noverbose"
	@@CONF[:VERBOSE] = false
      when "--prompt-mode", "--prompt"
	prompt_mode = ARGV.shift.upcase.tr("-", "_").intern
	@@CONF[:PROMPT_MODE] = prompt_mode
      when "--noprompt"
	@@CONF[:PROMPT_MODE] = :NULL
      when "--inf-ruby-mode"
	@@CONF[:PROMPT_MODE] = :INF_RUBY
      when "--sample-book-mode", "--simple-prompt"
	@@CONF[:PROMPT_MODE] = :SIMPLE
      when "--tracer"
	@@CONF[:USE_TRACER] = true
      when "--back-trace-limit"
	@@CONF[:BACK_TRACE_LIMIT] = ARGV.shift.to_i
      when "--context-mode"
	@@CONF[:CONTEXT_MODE] = ARGV.shift.to_i
      when "--single-irb"
	@@CONF[:SINGLE_IRB] = true
      when "--irb_debug"
	@@CONF[:DEBUG_LEVEL] = ARGV.shift.to_i
      when "-v", "--version"
	print IRB.version, "\n"
	exit 0
      when "-h", "--help"
	require "irb/help"
	IRB.print_usage
	exit 0
      when /^-/
	IRB.fail UnrecognizedSwitch, opt
      else
	@@CONF[:SCRIPT] = opt
	$0 = opt
	break
      end
    end
  end

  # running config
  def IRB.run_config
    if @@CONF[:RC]
      rcs = []
      rcs.push File.expand_path("~/.irbrc") if ENV.key?("HOME")
      rcs.push ".irbrc"
      rcs.push "irb.rc"
      rcs.push "_irbrc"
      rcs.push "$irbrc"
      catch(:EXIT) do
	for rc in rcs
	  begin
	    load rc
	    throw :EXIT
	  rescue LoadError, Errno::ENOENT
	  rescue
	    print "load error: #{rc}\n"
	    print $!.class, ": ", $!, "\n"
	    for err in $@@[0, $@@.size - 2]
	      print "\t", err, "\n"
	    end
	    throw :EXIT
	  end
	end
      end
    end
  end

  # loading modules
  def IRB.load_modules
    for m in @@CONF[:LOAD_MODULES]
      begin
	require m
      rescue
	print $@@[0], ":", $!.class, ": ", $!, "\n"
      end
    end
  end

end
@


1.3
log
@* irb 0.9
@
text
@d4 2
a5 2
#   	$Revision: 1.11 $
#   	$Date: 2002/07/03 10:41:40 $
d194 1
a194 1
	    print $!.type, ": ", $!, "\n"
d211 1
a211 1
	print $@@[0], ":", $!.type, ": ", $!, "\n"
@


1.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.3$
#   	$Revision: 1.1 $
#   	$Date: 2001/04/30 17:38:22 $
d19 1
d21 5
a31 1
    @@MATHN_INITIALIZED = false
d53 4
a103 1
    @@CONF[:VERBOSE] = true
a114 1
	opt = ARGV.shift
d123 2
d133 8
a140 1

a142 2
	IRB.fail(UndefinedPromptMode,
		 prompt_mode.id2name) unless @@CONF[:PROMPT][prompt_mode]
a149 1

a169 1
	@@CONF[:USE_READLINE] = false
a215 28
  # initialize tracing function
  def IRB.initialize_tracer
    unless @@TRACER_INITIALIZED
      require("tracer")
      Tracer.verbose = false
      Tracer.add_filter {
	|event, file, line, id, binding|
	File::dirname(file) != @@CONF[:IRB_LIB_PATH]
      }
      @@TRACER_INITIALIZED = true
    end
  end

  # initialize mathn function
  def IRB.initialize_mathn
    unless @@MATHN_INITIALIZED
      require "mathn"
    @@MATHN_INITIALIZED = true
    end
  end

  # initialize loader function
  def IRB.initialize_loader
    unless @@LOADER_INITIALIZED
      require "irb/loader"
      @@LOADER_INITIALIZED = true
    end
  end
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#   	$Revision: 1.3 $
#   	$Date: 2001/04/16 06:05:07 $
a15 1
  # (JP: config$B$N=i4|2=(B)
a28 1
    # (JP: $B%G%U%)%k%H%3%s%U%#%.%e%l!<%7%g%s(B)
a102 1
  # (JP: $B%*%W%7%g%s2r@@O(B)
a204 1
  # (JP: $B%H%l!<%5=i4|@@_Dj(B)
a217 1
  # (JP: mathn$B=i4|@@_Dj(B)
a225 1
  # (JP: loader$B=i4|@@_Dj(B)
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 17:38:22 $
@


1.1.2.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.1 $
#   	$Date: 2001/04/30 18:39:35 $
d16 1
d30 1
d105 1
d208 1
d222 1
d231 1
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@@
