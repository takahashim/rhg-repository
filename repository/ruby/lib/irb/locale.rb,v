head	1.4;
access;
symbols
	irb_0_9:1.4
	v1_6_7:1.1.2.3
	v1_6_6:1.1.2.3
	v1_6_5:1.1.2.3
	v1_6_4:1.1.2.1
	v1_7_1:1.1
	v1_6_4_preview4:1.1.2.1
	v1_6_4_preview3:1.1.2.1
	ruby_1_6:1.1.0.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.27.15.35.04;	author keiju;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.22.14.16.25;	author keiju;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.06.22.14.11.26;	author keiju;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.06.27.15.46.05;	author keiju;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* irb 0.9
@
text
@#
#   irb/locale.rb - internationalization module
#   	$Release Version: 0.9$
#   	$Revision: 1.12 $
#   	$Date: 2002/06/11 07:51:41 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#
# --
#
#   
#

autoload :Tempfile, "tempfile"
autoload :Kconv, "kconv"

module IRB
  class Locale
    @@RCS_ID='-$Id: locale.rb,v 1.12 2002/06/11 07:51:41 keiju Exp keiju $-'

    JPDefaultLocale = "ja"
    LOCALE_DIR = "/lc/"

    def initialize(locale = nil)
      @@lang = locale || ENV["IRB_LANG"] || ENV["LC_MESSAGES"] || ENV["LC_ALL"] || ENV["LANG"]
      @@lang = "C" unless @@lang
    end

    attr_reader :lang

    def String(mes)
      mes = super(mes)
      case @@lang
      when /^ja/
	@@@@LC2KCONV = {
	  #      "ja" => Kconv::JIS,
	  #      "ja_JP" => Kconv::JIS,
	  "ja_JP.ujis" => Kconv::EUC,
	  "ja_JP.euc" => Kconv::EUC,
	  "ja_JP.eucJP" => Kconv::EUC,
	  "ja_JP.sjis" => Kconv::SJIS,
	  "ja_JP.SJIS" => Kconv::SJIS,
	  } unless defined? @@@@LC2KCONV
	
	mes = Kconv::kconv(mes, @@@@LC2KCONV[@@lang])
      else
	mes
      end
      mes
    end

    def format(*opts)
      String(super(*opts))
    end

    def gets(*rs)
      String(super(*rs))
    end

    def readline(*rs)
      String(super(*rs))
    end

    def print(*opts)
      ary = opts.collect{|opt| String(opt)}
      super(*ary)
    end

    def printf(*opts)
      s = format(*opts)
      print s
    end

    def puts(*opts)
      ary = opts.collect{|opt| String(opts)}
      super(*ary)
    end

    def require(file, priv = nil)
      rex = Regexp.new("lc/#{Regexp.quote(file)}\.(so|o|sl|rb)?")
      return false if $".find{|f| f =~ rex}

      case file
      when /\.rb$/
	begin
	  load(file, priv)
	  $".push file
	  return true
	rescue LoadError
	end
      when /\.(so|o|sl)$/
	return super
      end

      begin
	load(f = file + ".rb")
	$".push f  #"
	return true
      rescue LoadError
	return ruby_require(file)
      end
    end

    alias toplevel_load load
    
    def load(file, priv=nil)
      dir = File.dirname(file)
      dir = "" if dir == "."
      base = File.basename(file)

      if /^ja(_JP)?$/ =~ @@lang
 	back, @@lang = @@lang, "C"
      end
      begin
	if dir[0] == ?/ #/
	  lc_path = search_file(dir, base)
	  return real_load(lc_path, priv) if lc_path
	end
	
	for path in $:
	  lc_path = search_file(path + "/" + dir, base)
	  return real_load(lc_path, priv) if lc_path
	end
      ensure
	@@lang = back if back
      end
      raise LoadError, "No such file to load -- #{file}"
    end 

    def real_load(path, priv)
      tmp_base = path.tr("./:", "___")
      lc_file = Tempfile.new(tmp_base)
      File.foreach(path) do |line|
	line = self.String(line)
	lc_file.print(line)
      end
      lc_file.close
      toplevel_load lc_file.path, priv
      lc_file.close(true)
    end
    private :real_load

    def find(file , paths = $:)
      dir = File.dirname(file)
      dir = "" if dir == "."
      base = File.basename(file)
      if dir[0] == ?/ #/
	  return lc_path = search_file(dir, base)
      else
	for path in $:
	  if lc_path = search_file(path + "/" + dir, base)
	    return lc_path
	  end
	end
      end
      nil
    end

    def search_file(path, file)
      if File.exists?(p1 = path + lc_path(file, "C"))
	if File.exists?(p2 = path + lc_path(file))
	  return p2
	else
	end
	return p1
      else
      end
      nil
    end
    private :search_file

    def lc_path(file = "", lc = @@lang)
      case lc
      when "C"
	LOCALE_DIR + file
      when /^ja/
	LOCALE_DIR + "ja/" + file
      else
	LOCALE_DIR + @@lang + "/" + file
      end
    end
    private :lc_path
  end
end




@


1.3
log
@

* lib/matrix.rb: resolve 'ruby -w' warnings.
* lib/irb/locale.rb: resolve 'ruby -w' warnings.
* lib/irb/multi-irb.rb: resolve 'ruby -w' warnings.
* lib/irb/ruby-lex.rb: fix problem for "\\M-\\..." and "\\C-\\..."
  and resolve 'ruby -w' warnings.
* lib/irb/ruby-token.rb: fix typo
* lib/shell/command-processor.rb: resolve 'ruby -w' warnings.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.4$
#   	$Revision: 1.2 $
#   	$Date: 2001/06/22 14:16:25 $
d18 1
a18 1
    @@RCS_ID='-$Id: locale.rb,v 1.2 2001/06/22 14:16:25 keiju Exp $-'
d138 1
@


1.2
log
@* lib/irb/locale.rb: fix for require "kconv" problem
@
text
@d4 2
a5 2
#   	$Revision: 1.6 $
#   	$Date: 2001/06/22 13:46:52 $
d18 1
a18 1
    @@RCS_ID='-$Id: locale.rb,v 1.6 2001/06/22 13:46:52 keiju Exp keiju $-'
d65 1
a65 1
      super *ary
d75 1
a75 1
      super *ary
@


1.1
log
@Initial revision
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.3$
#   	$Revision: 1.4 $
#   	$Date: 2001/04/16 06:06:25 $
d13 2
a14 1
require "kconv"
d18 1
a18 1
    @@RCS_ID='-$Id: locale.rb,v 1.4 2001/04/16 06:06:25 keiju Exp keiju $-'
a22 10
    LC2KCONV = {
#      "ja" => Kconv::JIS,
#      "ja_JP" => Kconv::JIS,
      "ja_JP.ujis" => Kconv::EUC,
      "ja_JP.euc" => Kconv::EUC,
      "ja_JP.eucJP" => Kconv::EUC,
      "ja_JP.sjis" => Kconv::SJIS,
      "ja_JP.SJIS" => Kconv::SJIS,
    }

d34 11
a44 1
	mes = Kconv::kconv(mes, LC2KCONV[@@lang])
a76 2

    autoload :Tempfile, "tempfile"
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 17:38:22 $
d17 1
a17 1
    @@RCS_ID='-$Id: locale.rb,v 1.1.1.1 2001/04/30 17:38:22 knu Exp $-'
@


1.1.2.2
log
@
* lib/irb/locale.rb: fix for require "kconv" problem
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.4$
#   	$Revision: 1.6 $
#   	$Date: 2001/06/22 13:46:52 $
d13 1
a13 2
autoload :Tempfile, "tempfile"
autoload :Kconv, "kconv"
d17 1
a17 1
    @@RCS_ID='-$Id: locale.rb,v 1.6 2001/06/22 13:46:52 keiju Exp keiju $-'
d22 10
d43 1
a43 11
	@@@@LC2KCONV = {
	  #      "ja" => Kconv::JIS,
	  #      "ja_JP" => Kconv::JIS,
	  "ja_JP.ujis" => Kconv::EUC,
	  "ja_JP.euc" => Kconv::EUC,
	  "ja_JP.eucJP" => Kconv::EUC,
	  "ja_JP.sjis" => Kconv::SJIS,
	  "ja_JP.SJIS" => Kconv::SJIS,
	  } unless defined? @@@@LC2KCONV
	
	mes = Kconv::kconv(mes, @@@@LC2KCONV[@@lang])
d76 2
@


1.1.2.3
log
@
* lib/matrix.rb: resolve 'ruby -w' warnings.
* lib/irb/locale.rb: resolve 'ruby -w' warnings.
* lib/irb/multi-irb.rb: resolve 'ruby -w' warnings.
* lib/irb/ruby-lex.rb: fix problem for "\\M-\\..." and "\\C-\\..."
  and resolve 'ruby -w' warnings.
* lib/irb/ruby-token.rb: fix typo
* lib/shell/command-processor.rb: resolve 'ruby -w' warnings.
@
text
@d4 2
a5 2
#   	$Revision: 1.3 $
#   	$Date: 2001/06/27 15:35:04 $
d18 1
a18 1
    @@RCS_ID='-$Id: locale.rb,v 1.3 2001/06/27 15:35:04 keiju Exp $-'
d65 1
a65 1
      super(*ary)
d75 1
a75 1
      super(*ary)
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@@
