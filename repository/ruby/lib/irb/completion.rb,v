head	1.4;
access;
symbols
	irb_0_9:1.3
	v1_6_7:1.1.2.1
	v1_6_6:1.1.2.1
	v1_6_5:1.1.2.1
	v1_6_4:1.1.2.1
	v1_7_1:1.2
	v1_6_4_preview4:1.1.2.1
	v1_6_4_preview3:1.1.2.1
	v0_7_1:1.1.1.1
	KEIJU:1.1.1
	v1_6_4_preview2:1.1
	v1_6_4_preview1:1.1
	v1_6_3:1.1
	ruby_m17n:1.1.0.4
	ruby_1_6:1.1.0.2
	v1_6_2:1.1
	v1_6_1:1.1
	v1_6_0:1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.02.16.45.35;	author nobu;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.30.18.25.04;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.12.09.07.53;	author matz;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.18.17.39;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use Object#class instead of deprecated Object#type.
@
text
@#
#   irb/completor.rb - 
#   	$Release Version: 0.9$
#   	$Revision: 1.3 $
#   	$Date: 2002/07/09 11:17:16 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#       From Original Idea of shugo@@ruby-lang.org
#

require "readline"

module IRB
  module InputCompletor

    @@RCS_ID='-$Id: completion.rb,v 1.3 2002/07/09 11:17:16 keiju Exp $-'

    ReservedWords = [
      "BEGIN", "END",
      "alias", "and", 
      "begin", "break", 
      "case", "class",
      "def", "defined", "do",
      "else", "elsif", "end", "ensure",
      "false", "for", 
      "if", "in", 
      "module", 
      "next", "nil", "not",
      "or", 
      "redo", "rescue", "retry", "return",
      "self", "super",
      "then", "true",
      "undef", "unless", "until",
      "when", "while",
      "yield",
    ]
      
    CompletionProc = proc { |input|
      bind = IRB.conf[:MAIN_CONTEXT].workspace.binding
      
#      puts "input: #{input}"

      case input
      when /^(\/[^\/]*\/)\.([^.]*)$/
	# Regexp
	receiver = $1
	message = Regexp.quote($2)

	candidates = Regexp.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\]]*\])\.([^.]*)$/
	# Array
	receiver = $1
	message = Regexp.quote($2)

	candidates = Array.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\}]*\})\.([^.]*)$/
	# Proc or Hash
	receiver = $1
	message = Regexp.quote($2)

	candidates = Proc.instance_methods(true) | Hash.instance_methods(true)
	select_message(receiver, message, candidates)
	
      when /^(:[^:.]*)$/
 	# Symbol
	if Symbol.respond_to?(:all_symbols)
	  sym = $1
	  candidates = Symbol.all_symbols.collect{|s| ":" + s.id2name}
	  candidates.grep(/^#{sym}/)
	else
	  []
	end

      when /^::([A-Z][^:\.\(]*)$/
	# Absolute Constant or class methods
	receiver = $1
	candidates = Object.constants
	candidates.grep(/^#{receiver}/).collect{|e| "::" + e}

      when /^(((::)?[A-Z][^:.\(]*)+)::?([^:.]*)$/
	# Constant or class methods
	receiver = $1
	message = Regexp.quote($4)
	begin
	  candidates = eval("#{receiver}.constants | #{receiver}.methods", bind)
	rescue Exception
	  candidates = []
	end
	candidates.grep(/^#{message}/).collect{|e| receiver + "::" + e}

      when /^(:[^:.]+)\.([^.]*)$/
	# Symbol
	receiver = $1
	message = Regexp.quote($2)

	candidates = Symbol.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([0-9_]+(\.[0-9_]+)?(e[0-9]+)?)\.([^.]*)$/
	# Numeric
	receiver = $1
	message = Regexp.quote($4)

	begin
	  candidates = eval(receiver, bind).methods
	rescue Exception
	  candidates
	end
	select_message(receiver, message, candidates)

      when /^(\$[^.]*)$/
	candidates = global_variables.grep Regexp.new(Regexp.quote($1))

#      when /^(\$?(\.?[^.]+)+)\.([^.]*)$/
      when /^((\.?[^.]+)+)\.([^.]*)$/
	# variable
	receiver = $1
	message = Regexp.quote($3)

	gv = eval "global_variables", bind
	lv = eval "local_variables", bind
	cv = eval "type.constants", bind
	
	if (gv | lv | cv).include?(receiver)
	  # foo.func and foo is local var.
	  candidates = eval("#{receiver}.methods", bind)
	elsif /^[A-Z]/ =~ receiver and /\./ !~ receiver
	  # Foo::Bar.func
	  begin
	    candidates = eval("#{receiver}.methods", bind)
	  rescue Exception
	    candidates = []
	  end
	else
	  # func1.func2
	  candidates = []
	  ObjectSpace.each_object(Module){|m|
	    next if m.name != "IRB::Context" and 
	      /^(IRB|SLex|RubyLex|RubyToken)/ =~ m.name
	    candidates.concat m.instance_methods
	  }
	  candidates.sort!
	  candidates.uniq!
	end
	select_message(receiver, message, candidates)

      when /^\.([^.]*)$/
	# unknown(maybe String)

	receiver = ""
	message = Regexp.quote($1)

	candidates = String.instance_methods(true)
	select_message(receiver, message, candidates)

      else
	candidates = eval("methods | private_methods | local_variables | self.class.constants", bind)
			  
	(candidates|ReservedWords).grep(/^#{Regexp.quote(input)}/)
      end
    }

    Operators = ["%", "&", "*", "**", "+",  "-",  "/",
      "<", "<<", "<=", "<=>", "==", "===", "=~", ">", ">=", ">>",
      "[]", "[]=", "^",]

    def self.select_message(receiver, message, candidates)
      candidates.grep(/^#{message}/).collect do |e|
	case e
	when /^[a-zA-Z_]/
	  receiver + "." + e
	when /^[0-9]/
	when *Operators
	  #receiver + " " + e
	end
      end
    end
  end
end

if Readline.respond_to?("basic_word_break_characters=")
  Readline.basic_word_break_characters= "\t\n\"\\'`><=;|&{("
end
Readline.completion_append_character = nil
Readline.completion_proc = IRB::InputCompletor::CompletionProc
@


1.3
log
@* irb 0.9
@
text
@d4 2
a5 2
#   	$Revision: 1.6 $
#   	$Date: 2002/07/09 10:26:58 $
d15 1
a15 1
    @@RCS_ID='-$Id: completion.rb,v 1.6 2002/07/09 10:26:58 keiju Exp keiju $-'
d160 1
a160 1
	candidates = eval("methods | private_methods | local_variables | type.constants", bind)
@


1.2
log
@Merge from irb-tools 0.7.1.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.1$
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 18:17:39 $
d15 1
a15 1
    @@RCS_ID='-$Id: completion.rb,v 1.1.1.1 2001/04/30 18:17:39 knu Exp $-'
d39 3
d67 1
a67 1
      when /^(:[^:]*)$/
d71 1
a71 1
	  candidates = Symbol.all_symbols.collect{|s| s.id2name}
d94 1
a94 1
      when /^(:[^.]+)\.([^.]*)$/
d114 3
d141 2
a142 1
	    next if /^(IRB|SLex|RubyLex|RubyToken)/ =~ m.name
d184 4
@


1.1
log
@2000-05-12
@
text
@d1 8
d13 4
a16 1
  module InputCompletion
d34 1
a34 1
      "yield"
d38 1
d40 10
a49 1
      when /^([^.]+)\.([^.]*)$/
d51 19
a69 4
	message = $2
	if eval("(local_variables|#{receiver}.type.constants).include?('#{receiver}')", 
	    IRB.conf[:MAIN_CONTEXT].bind)
	  candidates = eval("#{receiver}.methods", IRB.conf[:MAIN_CONTEXT].bind)
d71 16
d89 63
a151 1
	candidates.grep(/^#{Regexp.quote(message)}/).collect{|e| receiver + "." + e}
d153 2
a154 2
	candidates = eval("methods | private_methods | local_variables | type.constants", 
			  IRB.conf[:MAIN_CONTEXT].bind)
d158 16
d177 1
a177 1
Readline.completion_proc = IRB::InputCompletion::CompletionProc
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@a0 8
#
#   irb/completor.rb - 
#   	$Release Version: 0.7.1$
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 18:17:39 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#       From Original Idea of shugo@@ruby-lang.org
#
d5 1
a5 4
  module InputCompletor

    @@RCS_ID='-$Id: completion.rb,v 1.1.1.1 2001/04/30 18:17:39 knu Exp $-'

d23 1
a23 1
      "yield",
a26 1
      bind = IRB.conf[:MAIN_CONTEXT].workspace.binding
d28 1
a28 10
      when /^(\/[^\/]*\/)\.([^.]*)$/
	# Regexp
	receiver = $1
	message = Regexp.quote($2)

	candidates = Regexp.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\]]*\])\.([^.]*)$/
	# Array
d30 4
a33 19
	message = Regexp.quote($2)

	candidates = Array.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\}]*\})\.([^.]*)$/
	# Proc or Hash
	receiver = $1
	message = Regexp.quote($2)

	candidates = Proc.instance_methods(true) | Hash.instance_methods(true)
	select_message(receiver, message, candidates)
	
      when /^(:[^:]*)$/
 	# Symbol
	if Symbol.respond_to?(:all_symbols)
	  sym = $1
	  candidates = Symbol.all_symbols.collect{|s| s.id2name}
	  candidates.grep(/^#{sym}/)
a34 16
	  []
	end

      when /^::([A-Z][^:\.\(]*)$/
	# Absolute Constant or class methods
	receiver = $1
	candidates = Object.constants
	candidates.grep(/^#{receiver}/).collect{|e| "::" + e}

      when /^(((::)?[A-Z][^:.\(]*)+)::?([^:.]*)$/
	# Constant or class methods
	receiver = $1
	message = Regexp.quote($4)
	begin
	  candidates = eval("#{receiver}.constants | #{receiver}.methods", bind)
	rescue Exception
d37 1
a37 63
	candidates.grep(/^#{message}/).collect{|e| receiver + "::" + e}

      when /^(:[^.]+)\.([^.]*)$/
	# Symbol
	receiver = $1
	message = Regexp.quote($2)

	candidates = Symbol.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([0-9_]+(\.[0-9_]+)?(e[0-9]+)?)\.([^.]*)$/
	# Numeric
	receiver = $1
	message = Regexp.quote($4)

	begin
	  candidates = eval(receiver, bind).methods
	rescue Exception
	  candidates
	end
	select_message(receiver, message, candidates)

#      when /^(\$?(\.?[^.]+)+)\.([^.]*)$/
      when /^((\.?[^.]+)+)\.([^.]*)$/
	# variable
	receiver = $1
	message = Regexp.quote($3)

	gv = eval "global_variables", bind
	lv = eval "local_variables", bind
	cv = eval "type.constants", bind
	
	if (gv | lv | cv).include?(receiver)
	  # foo.func and foo is local var.
	  candidates = eval("#{receiver}.methods", bind)
	elsif /^[A-Z]/ =~ receiver and /\./ !~ receiver
	  # Foo::Bar.func
	  begin
	    candidates = eval("#{receiver}.methods", bind)
	  rescue Exception
	    candidates = []
	  end
	else
	  # func1.func2
	  candidates = []
	  ObjectSpace.each_object(Module){|m|
	    next if /^(IRB|SLex|RubyLex|RubyToken)/ =~ m.name
	    candidates.concat m.instance_methods
	  }
	  candidates.sort!
	  candidates.uniq!
	end
	select_message(receiver, message, candidates)

      when /^\.([^.]*)$/
	# unknown(maybe String)

	receiver = ""
	message = Regexp.quote($1)

	candidates = String.instance_methods(true)
	select_message(receiver, message, candidates)

d39 2
a40 2
	candidates = eval("methods | private_methods | local_variables | type.constants", bind)
			  
a43 16

    Operators = ["%", "&", "*", "**", "+",  "-",  "/",
      "<", "<<", "<=", "<=>", "==", "===", "=~", ">", ">=", ">>",
      "[]", "[]=", "^",]

    def self.select_message(receiver, message, candidates)
      candidates.grep(/^#{message}/).collect do |e|
	case e
	when /^[a-zA-Z_]/
	  receiver + "." + e
	when /^[0-9]/
	when *Operators
	  #receiver + " " + e
	end
      end
    end
d47 1
a47 1
Readline.completion_proc = IRB::InputCompletor::CompletionProc
@


1.1.1.1
log
@This is the virgin import of irb-tools 0.7.1.
@
text
@a0 8
#
#   irb/completor.rb - 
#   	$Release Version: 0.7.1$
#   	$Revision: 1.3 $
#   	$Date: 2001/04/24 07:48:17 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#       From Original Idea of shugo@@ruby-lang.org
#
d5 1
a5 4
  module InputCompletor

    @@RCS_ID='-$Id: completion.rb,v 1.3 2001/04/24 07:48:17 keiju Exp keiju $-'

d23 1
a23 1
      "yield",
a26 1
      bind = IRB.conf[:MAIN_CONTEXT].workspace.binding
d28 1
a28 10
      when /^(\/[^\/]*\/)\.([^.]*)$/
	# Regexp
	receiver = $1
	message = Regexp.quote($2)

	candidates = Regexp.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\]]*\])\.([^.]*)$/
	# Array
d30 4
a33 19
	message = Regexp.quote($2)

	candidates = Array.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([^\}]*\})\.([^.]*)$/
	# Proc or Hash
	receiver = $1
	message = Regexp.quote($2)

	candidates = Proc.instance_methods(true) | Hash.instance_methods(true)
	select_message(receiver, message, candidates)
	
      when /^(:[^:]*)$/
 	# Symbol
	if Symbol.respond_to?(:all_symbols)
	  sym = $1
	  candidates = Symbol.all_symbols.collect{|s| s.id2name}
	  candidates.grep(/^#{sym}/)
a34 16
	  []
	end

      when /^::([A-Z][^:\.\(]*)$/
	# Absolute Constant or class methods
	receiver = $1
	candidates = Object.constants
	candidates.grep(/^#{receiver}/).collect{|e| "::" + e}

      when /^(((::)?[A-Z][^:.\(]*)+)::?([^:.]*)$/
	# Constant or class methods
	receiver = $1
	message = Regexp.quote($4)
	begin
	  candidates = eval("#{receiver}.constants | #{receiver}.methods", bind)
	rescue Exception
d37 1
a37 63
	candidates.grep(/^#{message}/).collect{|e| receiver + "::" + e}

      when /^(:[^.]+)\.([^.]*)$/
	# Symbol
	receiver = $1
	message = Regexp.quote($2)

	candidates = Symbol.instance_methods(true)
	select_message(receiver, message, candidates)

      when /^([0-9_]+(\.[0-9_]+)?(e[0-9]+)?)\.([^.]*)$/
	# Numeric
	receiver = $1
	message = Regexp.quote($4)

	begin
	  candidates = eval(receiver, bind).methods
	rescue Exception
	  candidates
	end
	select_message(receiver, message, candidates)

#      when /^(\$?(\.?[^.]+)+)\.([^.]*)$/
      when /^((\.?[^.]+)+)\.([^.]*)$/
	# variable
	receiver = $1
	message = Regexp.quote($3)

	gv = eval "global_variables", bind
	lv = eval "local_variables", bind
	cv = eval "type.constants", bind
	
	if (gv | lv | cv).include?(receiver)
	  # foo.func and foo is local var.
	  candidates = eval("#{receiver}.methods", bind)
	elsif /^[A-Z]/ =~ receiver and /\./ !~ receiver
	  # Foo::Bar.func
	  begin
	    candidates = eval("#{receiver}.methods", bind)
	  rescue Exception
	    candidates = []
	  end
	else
	  # func1.func2
	  candidates = []
	  ObjectSpace.each_object(Module){|m|
	    next if /^(IRB|SLex|RubyLex|RubyToken)/ =~ m.name
	    candidates.concat m.instance_methods
	  }
	  candidates.sort!
	  candidates.uniq!
	end
	select_message(receiver, message, candidates)

      when /^\.([^.]*)$/
	# unknown(maybe String)

	receiver = ""
	message = Regexp.quote($1)

	candidates = String.instance_methods(true)
	select_message(receiver, message, candidates)

d39 2
a40 2
	candidates = eval("methods | private_methods | local_variables | type.constants", bind)
			  
a43 16

    Operators = ["%", "&", "*", "**", "+",  "-",  "/",
      "<", "<<", "<=", "<=>", "==", "===", "=~", ">", ">=", ">>",
      "[]", "[]=", "^",]

    def self.select_message(receiver, message, candidates)
      candidates.grep(/^#{message}/).collect do |e|
	case e
	when /^[a-zA-Z_]/
	  receiver + "." + e
	when /^[0-9]/
	when *Operators
	  #receiver + " " + e
	end
      end
    end
d47 1
a47 1
Readline.completion_proc = IRB::InputCompletor::CompletionProc
@
