head	1.4;
access;
symbols
	irb_0_9:1.3
	v1_6_7:1.1.2.2
	v1_6_6:1.1.2.2
	v1_6_5:1.1.2.2
	v1_6_4:1.1.2.2
	v1_7_1:1.2
	v1_6_4_preview4:1.1.2.2
	v1_6_4_preview3:1.1.2.2
	ruby_1_6:1.1.0.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.02.16.45.35;	author nobu;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.03.08.55.53;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.03.08.56.49;	author knu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use Object#class instead of deprecated Object#type.
@
text
@#
#   irb/context.rb - irb context
#   	$Release Version: 0.9$
#   	$Revision: 1.3 $
#   	$Date: 2002/07/09 11:17:16 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#
# --
#
#   
#
require "irb/workspace"

module IRB
  class Context
    #
    # Arguments:
    #   input_method: nil -- stdin or readline
    #		      String -- File
    #		      other -- using this as InputMethod
    #
    def initialize(irb, workspace = nil, input_method = nil)
      @@irb = irb
      if workspace
	@@workspace = workspace
      else
	@@workspace = WorkSpace.new
      end
      @@thread = Thread.current if defined? Thread
#      @@irb_level = 0

      # copy of default configuration
      @@ap_name = IRB.conf[:AP_NAME]
      @@rc = IRB.conf[:RC]
      @@load_modules = IRB.conf[:LOAD_MODULES]

      @@use_readline = IRB.conf[:USE_READLINE]
      @@inspect_mode = IRB.conf[:INSPECT_MODE]

      self.math_mode = IRB.conf[:MATH_MODE] if IRB.conf[:MATH_MODE]
      self.use_tracer = IRB.conf[:USE_TRACER] if IRB.conf[:USE_TRASER]
      self.use_loader = IRB.conf[:USE_LOADER] if IRB.conf[:USE_LOADER]
      self.eval_history = IRB.conf[:EVAL_HISTORY] if IRB.conf[:EVEL_HISTORY]

      @@ignore_sigint = IRB.conf[:IGNORE_SIGINT]
      @@ignore_eof = IRB.conf[:IGNORE_EOF]

      @@back_trace_limit = IRB.conf[:BACK_TRACE_LIMIT]
      
      self.prompt_mode = IRB.conf[:PROMPT_MODE]

      if IRB.conf[:SINGLE_IRB] or !defined?(JobManager)
	@@irb_name = IRB.conf[:IRB_NAME]
      else
	@@irb_name = "irb#"+IRB.JobManager.n_jobs.to_s
      end
      @@irb_path = "(" + @@irb_name + ")"

      case input_method
      when nil
	if (use_readline.nil? && IRB.conf[:PROMPT_MODE] != :INF_RUBY && STDIN.tty? ||
	     use_readline?)
	  @@io = ReadlineInputMethod.new
	else
	  @@io = StdioInputMethod.new
	end
      when String
	@@io = FileInputMethod.new(input_method)
	@@irb_name = File.basename(input_method)
	@@irb_path = input_method
      else
	@@io = input_method
      end

      @@verbose = IRB.conf[:VERBOSE] 
      @@echo = IRB.conf[:ECHO]
      if @@echo.nil?
	@@echo = true
      end
      @@debug_level = IRB.conf[:DEBUG_LEVEL]
    end

    def main
      @@workspace.main
    end

    attr_reader :workspace_home
    attr_accessor :workspace
    attr_reader :thread
    attr_accessor :io
    
    attr_accessor :irb
    attr_accessor :ap_name
    attr_accessor :rc
    attr_accessor :load_modules
    attr_accessor :irb_name
    attr_accessor :irb_path

    attr_accessor :use_readline
    attr_reader :inspect_mode

    attr_reader :prompt_mode
    attr_accessor :prompt_i
    attr_accessor :prompt_s
    attr_accessor :prompt_c
    attr_accessor :auto_indent_mode
    attr_accessor :return_format

    attr_accessor :ignore_sigint
    attr_accessor :ignore_eof
    attr_accessor :echo
    attr_accessor :verbose
    attr_reader :debug_level

    attr_accessor :back_trace_limit

    alias use_readline? use_readline
    alias rc? rc
    alias ignore_sigint? ignore_sigint
    alias ignore_eof? ignore_eof
    alias echo? echo

    def verbose?
      if @@verbose.nil?
	if defined?(ReadlineInputMethod) && @@io.kind_of?(ReadlineInputMethod) 
	  false
	elsif !STDIN.tty? or @@io.kind_of?(FileInputMethod)
	  true
	else
	  false
	end
      end
    end

    def prompting?
      verbose? || (STDIN.tty? && @@io.kind_of?(StdioInputMethod) ||
		(defined?(ReadlineInputMethod) && @@io.kind_of?(ReadlineInputMethod)))
    end

    attr_reader :last_value

    def set_last_value(value)
      @@last_value = value
    end

    attr_reader :irb_name

    def prompt_mode=(mode)
      @@prompt_mode = mode
      pconf = IRB.conf[:PROMPT][mode]
      @@prompt_i = pconf[:PROMPT_I]
      @@prompt_s = pconf[:PROMPT_S]
      @@prompt_c = pconf[:PROMPT_C]
      @@return_format = pconf[:RETURN]
      if ai = pconf.include?(:AUTO_INDENT)
	@@auto_indent_mode = ai
      else
	@@auto_indent_mode = IRB.conf[:AUTO_INDENT]
      end
    end
    
    def inspect?
      @@inspect_mode.nil? or @@inspect_mode
    end

    def file_input?
      @@io.class == FileInputMethod
    end

    def inspect_mode=(opt)
      if opt
	@@inspect_mode = opt
      else
	@@inspect_mode = !@@inspect_mode
      end
      print "Switch to#{unless @@inspect_mode; ' non';end} inspect mode.\n" if verbose?
      @@inspect_mode
    end

    def use_readline=(opt)
      @@use_readline = opt
      print "use readline module\n" if @@use_readline
    end

    def debug_level=(value)
      @@debug_level = value
      RubyLex.debug_level = value
      SLex.debug_level = value
    end

    def debug?
      @@debug_level > 0
    end

    def evaluate(line, line_no)
      @@line_no = line_no
      set_last_value(@@workspace.evaluate(self, line, irb_path, line_no))
#      @@workspace.evaluate("_ = IRB.conf[:MAIN_CONTEXT]._")
#      @@_ = @@workspace.evaluate(line, irb_path, line_no)
    end

    alias __exit__ exit
    def exit(ret = 0)
      IRB.irb_exit(@@irb, ret)
    end

    NOPRINTING_IVARS = ["@@last_value"]
    NO_INSPECTING_IVARS = ["@@irb", "@@io"]
    IDNAME_IVARS = ["@@prompt_mode"]

    alias __inspect__ inspect
    def inspect
      array = []
      for ivar in instance_variables.sort{|e1, e2| e1 <=> e2}
	name = ivar.sub(/^@@(.*)$/){$1}
	val = instance_eval(ivar)
	case ivar
	when *NOPRINTING_IVARS
	  array.push format("conf.%s=%s", name, "...")
	when *NO_INSPECTING_IVARS
	  array.push format("conf.%s=%s", name, val.to_s)
	when *IDNAME_IVARS
	  array.push format("conf.%s=:%s", name, val.id2name)
	else
	  array.push format("conf.%s=%s", name, val.inspect)
	end
      end
      array.join("\n")
    end
    alias __to_s__ to_s
    alias to_s inspect
  end
end
@


1.3
log
@* irb 0.9
@
text
@d4 2
a5 2
#   	$Revision: 1.12 $
#   	$Date: 2002/07/03 10:42:36 $
d167 1
a167 1
      @@io.type == FileInputMethod
@


1.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.3$
#   	$Revision: 1.1 $
#   	$Date: 2001/04/30 17:38:22 $
d12 2
d27 1
a27 1
	@@workspace = WorkSpace.new unless workspace
d30 1
a30 1
      @@irb_level = 0
a36 1
      self.math_mode = IRB.conf[:MATH_MODE]
a38 2
      self.use_tracer = IRB.conf[:USE_TRACER]
#      @@use_loader = IRB.conf[:USE_LOADER]
d40 5
a44 2
      self.prompt_mode = IRB.conf[:PROMPT_MODE]
  
d50 1
a50 4
      debug_level = IRB.conf[:DEBUG_LEVEL]
      @@verbose = IRB.conf[:VERBOSE]

      @@tracer_initialized = false
d61 1
a61 1
	if (use_readline.nil? && IRB.conf[:PROMPT_MODE] != :INF_RUBY ||
d74 7
d87 1
a91 2
    attr_reader :_
    
a98 1
    attr_accessor :math_mode
a100 5
    attr_reader :use_tracer
#    attr :use_loader

    attr_reader :debug_level
    attr_accessor :verbose
d111 3
a116 2
#    alias use_loader? use_loader
    alias use_tracer? use_tracer
a118 2
    alias math? math_mode
    alias verbose? verbose
d121 13
d135 3
a137 3
    def _=(value)
      @@_ = value
      @@workspace.evaluate "_ = IRB.conf[:MAIN_CONTEXT]._"
d140 4
a143 8
    def irb_name
      if @@irb_level == 0
	@@irb_name 
      elsif @@irb_name =~ /#[0-9]*$/
	@@irb_name + "." + @@irb_level.to_s
      else
	@@irb_name + "#0." + @@irb_level.to_s
      end
d146 2
d163 1
a163 1
      @@inspect_mode.nil? && !@@math_mode or @@inspect_mode
a169 29
    def use_tracer=(opt)
      if opt
	IRB.initialize_tracer
	unless @@tracer_initialized
	  Tracer.set_get_line_procs(@@irb_path) {
	    |line_no|
	    @@io.line(line_no)
	  }
	  @@tracer_initialized = true
	end
      elsif !opt && @@use_tracer
	Tracer.off
      end
      @@use_tracer=opt
    end

    def use_loader
      IRB.conf[:USE_LOADER]
    end

    def use_loader=(opt)
      IRB.conf[:USE_LOADER] = opt
      if opt
	IRB.initialize_loader
      end
      print "Switch to load/require#{unless use_loader; ' non';end} trace mode.\n" if verbose?
      opt
    end

a179 14
    def math_mode=(opt)
      if @@math_mode == true && opt == false
	IRB.fail CantRetuenNormalMode
	return
      end

      @@math_mode = opt
      if math_mode
	IRB.initialize_mathn
	main.instance_eval("include Math")
	print "start math mode\n" if verbose?
      end
    end

d195 5
a199 21
    def change_binding(*_main)
      back = @@workspace
      @@workspace = WorkSpace.new(*_main)
      unless _main.empty?
	begin
	  main.extend ExtendCommand
	rescue
	  print "can't change binding to: ", main.inspect, "\n"
	  @@workspace = back
	  return nil
	end
      end
      @@irb_level += 1
      begin
	catch(:SU_EXIT) do
	  @@irb.eval_input
	end
      ensure
	@@irb_level -= 1
 	@@workspace = back
      end
a200 2
    alias change_workspace change_binding

d204 1
a204 5
      if @@irb_level == 0
	IRB.irb_exit(@@irb, ret)
      else
	throw :SU_EXIT, ret
      end
d207 1
a207 1
    NOPRINTING_IVARS = ["@@_"]
d219 1
a219 1
	  next
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#   	$Revision: 1.3 $
#   	$Date: 2001/04/16 06:05:16 $
a30 1
      # (JP: デフォルトコンフィギュレーションのコピー)
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 17:38:22 $
@


1.1.2.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.1 $
#   	$Date: 2001/04/30 18:39:35 $
d31 1
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@@
