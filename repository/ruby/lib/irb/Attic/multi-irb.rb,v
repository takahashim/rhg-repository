head	1.6;
access;
symbols
	v1_6_7:1.1.2.5
	v1_6_6:1.1.2.5
	v1_6_5:1.1.2.5
	v1_6_4:1.1.2.4
	v1_7_1:1.4
	v1_6_4_preview4:1.1.2.4
	v1_6_4_preview3:1.1.2.4
	v0_7_3:1.1.1.1
	KEIJU:1.1.1
	v1_6_4_preview2:1.1
	v1_6_4_preview1:1.1
	v1_6_3:1.1
	ruby_m17n:1.1.0.4
	ruby_1_6:1.1.0.2
	v1_6_2:1.1
	v1_6_1:1.1
	v1_6_0:1.1;
locks; strict;
comment	@# @;


1.6
date	2002.07.09.11.17.16;	author keiju;	state dead;
branches;
next	1.5;

1.5
date	2001.06.27.15.35.04;	author keiju;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.08.09.28.19;	author keiju;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.08.55.53;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.30.17.54.55;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.12.09.07.53;	author matz;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.03.08.56.49;	author knu;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.05.16.20.44.26;	author keiju;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.05.21.06.31.37;	author keiju;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.06.27.15.46.05;	author keiju;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* irb 0.9
@
text
@#
#   irb/multi-irb.rb - multiple irb module
#   	$Release Version: 0.7.3$
#   	$Revision: 1.5 $
#   	$Date: 2001/06/27 15:35:04 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#
# --
#
#   
#
IRB.fail CanNotGoMultiIrbMode unless defined?(Thread)
require "thread"

module IRB
  # job management class
  class JobManager
    @@RCS_ID='-$Id: multi-irb.rb,v 1.5 2001/06/27 15:35:04 keiju Exp $-'

    def initialize
      # @@jobs = [[thread, irb],...]
      @@jobs = []
      @@current_job = nil
    end

    attr_accessor :current_job

    def n_jobs
      @@jobs.size
    end

    def thread(key)
      th, irb = search(key)
      th
    end

    def irb(key)
      th, irb = search(key)
      irb
    end

    def main_thread
      @@jobs[0][0]
    end

    def main_irb
      @@jobs[0][1]
    end

    def insert(irb)
      @@jobs.push [Thread.current, irb]
    end

    def switch(key)
      th, irb = search(key)
      IRB.fail IrbAlreadyDead unless th.alive?
      IRB.fail IrbSwitchToCurrentThread if th == Thread.current
      @@current_job = irb
      th.run
      Thread.stop
      @@current_job = irb(Thread.current)
    end

    def kill(*keys)
      for key in keys
	th, irb = search(key)
	IRB.fail IrbAlreadyDead unless th.alive?
	th.exit
      end
    end    

    def search(key)
      case key
      when Integer
	@@jobs[key]
      when Irb
	@@jobs.find{|k, v| v.equal?(key)}
      when Thread
	@@jobs.assoc(key)
      else
	assoc = @@jobs.find{|k, v| v.context.main.equal?(key)}
	IRB.fail NoSuchJob, key if assoc.nil?
	assoc
      end
    end

    def delete(key)
      case key
      when Integer
	IRB.fail NoSuchJob, key unless @@jobs[key]
	@@jobs[key] = nil
      else
	catch(:EXISTS) do
	  @@jobs.each_index do
	    |i|
	    if @@jobs[i] and (@@jobs[i][0] == key ||
			     @@jobs[i][1] == key ||
			     @@jobs[i][1].context.main.equal?(key))
	      @@jobs[i] = nil
	      throw :EXISTS
	    end
	  end
	  IRB.fail NoSuchJob, key
	end
      end
      until assoc = @@jobs.pop; end unless @@jobs.empty?
      @@jobs.push assoc
    end

    def inspect
      ary = []
      @@jobs.each_index do
	|i|
	th, irb = @@jobs[i]
	next if th.nil?

	if th.alive?
	  if th.stop?
	    t_status = "stop"
	  else
	    t_status = "running"
	  end
	else
	  t_status = "exited"
	end
	ary.push format("#%d->%s on %s (%s: %s)",
			i, 
			irb.context.irb_name, 
			irb.context.main,
			th,
			t_status)
      end
      ary.join("\n")
    end
  end

  @@JobManager = JobManager.new

  def IRB.JobManager
    @@JobManager
  end

  # invoke multi-irb 
  def IRB.irb(file = nil, *main)
    workspace = WorkSpace.new(*main)
    parent_thread = Thread.current
    Thread.start do
      begin
	irb = Irb.new(workspace, file)
      rescue 
	print "Subirb can't start with context(self): ", workspace.main.inspect, "\n"
	print "return to main irb\n"
	Thread.pass
	Thread.main.wakeup
	Thread.exit
      end
      @@CONF[:IRB_RC].call(irb.context) if @@CONF[:IRB_RC]
      @@JobManager.insert(irb)
      @@JobManager.current_job = irb
      begin
	system_exit = false
	catch(:IRB_EXIT) do
	  irb.eval_input
	end
      rescue SystemExit
	system_exit = true
	raise
	#fail
      ensure
	unless system_exit
	  @@JobManager.delete(irb)
	  if parent_thread.alive?
	    @@JobManager.current_job = @@JobManager.irb(parent_thread)
	    parent_thread.run
	  else
	    @@JobManager.current_job = @@JobManager.main_irb
	    @@JobManager.main_thread.run
	  end
	end
      end
    end
    Thread.stop
    @@JobManager.current_job = @@JobManager.irb(Thread.current)
  end

  class Context
    def _=(value)
      @@_ = value
      @@workspace.evaluate "_ = IRB.JobManager.irb(Thread.current).context._"
    end
  end

  module ExtendCommand
    def irb_context
      IRB.JobManager.irb(Thread.current).context
    end
#    alias conf irb_context
  end

  @@CONF[:SINGLE_IRB_MODE] = false
  @@JobManager.insert(@@CONF[:MAIN_CONTEXT].irb)
  @@JobManager.current_job = @@CONF[:MAIN_CONTEXT].irb

  class Irb
    def signal_handle
      unless @@context.ignore_sigint?
	print "\nabort!!\n" if @@context.verbose?
	exit
      end

      case @@signal_status
      when :IN_INPUT
	print "^C\n"
	IRB.JobManager.thread(self).raise RubyLex::TerminateLineInput
      when :IN_EVAL
	IRB.irb_abort(self)
      when :IN_LOAD
	IRB.irb_abort(self, LoadAbort)
      when :IN_IRB
	# ignore
      else
	# ignore 
      end
    end
  end

  trap("SIGINT") do
    @@JobManager.current_job.signal_handle
    Thread.stop
  end

end
@


1.5
log
@

* lib/matrix.rb: resolve 'ruby -w' warnings.
* lib/irb/locale.rb: resolve 'ruby -w' warnings.
* lib/irb/multi-irb.rb: resolve 'ruby -w' warnings.
* lib/irb/ruby-lex.rb: fix problem for "\\M-\\..." and "\\C-\\..."
  and resolve 'ruby -w' warnings.
* lib/irb/ruby-token.rb: fix typo
* lib/shell/command-processor.rb: resolve 'ruby -w' warnings.
@
text
@d4 2
a5 2
#   	$Revision: 1.4 $
#   	$Date: 2001/05/08 09:28:19 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.4 2001/05/08 09:28:19 keiju Exp $-'
@


1.4
log
@*** empty log message ***
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.2 $
#   	$Date: 2001/05/03 08:56:49 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.1.2.2 2001/05/03 08:56:49 knu Exp $-'
d93 1
a93 1
	catch (:EXISTS) do
@


1.3
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d4 2
a5 2
#   	$Revision: 1.2 $
#   	$Date: 2001/04/30 17:54:55 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.2 2001/04/30 17:54:55 knu Exp $-'
d34 1
a34 1
      irb
d77 1
a77 1
	@@jobs.find{|k, v| v.equal?(irb)}
d159 1
d204 23
d229 1
@


1.2
log
@Merge from irb 0.7.3.
@
text
@d2 1
a2 1
#   irb/multi-irb.rb - multiple irb module(JP: 複数irb対応モジュール)
d4 2
a5 2
#   	$Revision: 1.1 $
#   	$Date: 2000/05/12 09:07:53 $
a16 1
  # (JP: job管理クラス)
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.1 2000/05/12 09:07:53 matz Exp $-'
a143 1
  # (JP: irb起動)
@


1.1
log
@2000-05-12
@
text
@d2 5
a6 5
#   multi-irb.rb - multiple irb module
#   	$Release Version: 0.6$
#   	$Revision: 1.7 $
#   	$Date: 1999/03/05 05:19:19 $
#   	by Keiju ISHITSUKA(Nippon Rational Inc.)
d17 1
d19 1
a19 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.7 1999/03/05 05:19:19 keiju Exp keiju $-'
d27 1
a27 1
    attr :current_job, true
d144 2
a145 1
  # invoke multiple irb 
d147 1
a147 6
    workspace = IRB.workspace_binding(*main)
    if main.empty?
      main = eval("self", workspace)
    else
      main = main[0]
    end
d151 1
a151 1
	irb = Irb.new(main, workspace, file)
d153 1
a153 1
	print "Subirb can't start with context(self): ", main.inspect, "\n"
d190 1
a190 1
      eval "_ = IRB.JobManager.irb(Thread.current).context._", @@bind
d198 1
a198 1
    alias conf irb_context
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d2 5
a6 5
#   irb/multi-irb.rb - multiple irb module(JP: 複数irb対応モジュール)
#   	$Release Version: 0.7.3$
#   	$Revision: 1.1 $
#   	$Date: 2000/05/12 09:07:53 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
a16 1
  # (JP: job管理クラス)
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.1 2000/05/12 09:07:53 matz Exp $-'
d26 1
a26 1
    attr_accessor :current_job
d143 1
a143 2
  # invoke multi-irb 
  # (JP: irb起動)
d145 6
a150 1
    workspace = WorkSpace.new(*main)
d154 1
a154 1
	irb = Irb.new(workspace, file)
d156 1
a156 1
	print "Subirb can't start with context(self): ", workspace.main.inspect, "\n"
d193 1
a193 1
      @@workspace.evaluate "_ = IRB.JobManager.irb(Thread.current).context._"
d201 1
a201 1
#    alias conf irb_context
@


1.1.2.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d2 1
a2 1
#   irb/multi-irb.rb - multiple irb module
d4 2
a5 2
#   	$Revision: 1.1.2.1 $
#   	$Date: 2001/04/30 18:39:35 $
d17 1
d19 1
a19 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.1.2.1 2001/04/30 18:39:35 knu Exp $-'
d145 1
@


1.1.2.3
log
@
resolve ctrl-c problem.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.2 $
#   	$Date: 2001/05/03 08:56:49 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.1.2.2 2001/05/03 08:56:49 knu Exp $-'
d34 1
a34 1
      th
a60 1
      p "X"
d77 1
a77 1
	@@jobs.find{|k, v| v.equal?(key)}
a158 1
      @@JobManager.current_job = irb
a202 23
  class Irb
    def signal_handle
      unless @@context.ignore_sigint?
	print "\nabort!!\n" if @@context.verbose?
	exit
      end

      case @@signal_status
      when :IN_INPUT
	print "^C\n"
	IRB.JobManager.thread(self).raise RubyLex::TerminateLineInput
      when :IN_EVAL
	IRB.irb_abort(self)
      when :IN_LOAD
	IRB.irb_abort(self, LoadAbort)
      when :IN_IRB
	# ignore (JP: 何もしない.)
      else
	# ignore (JP: その他の場合も何もしない.)
      end
    end
  end

a204 1
    Thread.stop
@


1.1.2.4
log
@
	* lib/irb/multi-irb.rb
	  delete japanese messages.
@
text
@d4 2
a5 2
#   	$Revision: 1.4 $
#   	$Date: 2001/05/08 09:28:19 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.4 2001/05/08 09:28:19 keiju Exp $-'
d61 1
d221 1
a221 1
	# ignore
d223 1
a223 1
	# ignore 
@


1.1.2.5
log
@
* lib/matrix.rb: resolve 'ruby -w' warnings.
* lib/irb/locale.rb: resolve 'ruby -w' warnings.
* lib/irb/multi-irb.rb: resolve 'ruby -w' warnings.
* lib/irb/ruby-lex.rb: fix problem for "\\M-\\..." and "\\C-\\..."
  and resolve 'ruby -w' warnings.
* lib/irb/ruby-token.rb: fix typo
* lib/shell/command-processor.rb: resolve 'ruby -w' warnings.
@
text
@d4 2
a5 2
#   	$Revision: 1.5 $
#   	$Date: 2001/06/27 15:35:04 $
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.5 2001/06/27 15:35:04 keiju Exp $-'
d93 1
a93 1
	catch(:EXISTS) do
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@d2 5
a6 5
#   irb/multi-irb.rb - multiple irb module(JP: 複数irb対応モジュール)
#   	$Release Version: 0.7.3$
#   	$Revision: 1.11 $
#   	$Date: 2001/04/16 06:05:56 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
a16 1
  # (JP: job管理クラス)
d18 1
a18 1
    @@RCS_ID='-$Id: multi-irb.rb,v 1.11 2001/04/16 06:05:56 keiju Exp keiju $-'
d26 1
a26 1
    attr_accessor :current_job
d143 1
a143 2
  # invoke multi-irb 
  # (JP: irb起動)
d145 6
a150 1
    workspace = WorkSpace.new(*main)
d154 1
a154 1
	irb = Irb.new(workspace, file)
d156 1
a156 1
	print "Subirb can't start with context(self): ", workspace.main.inspect, "\n"
d193 1
a193 1
      @@workspace.evaluate "_ = IRB.JobManager.irb(Thread.current).context._"
d201 1
a201 1
#    alias conf irb_context
@
