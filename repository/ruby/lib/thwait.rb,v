head	1.5;
access;
symbols
	v1_6_7:1.5
	v1_6_6:1.5
	v1_6_5:1.5
	v1_6_4:1.5
	v1_7_1:1.5
	v1_6_4_preview4:1.5
	v1_6_4_preview3:1.5
	v1_6_4_preview2:1.5
	v1_6_4_preview1:1.5
	v1_6_3:1.5
	ruby_m17n:1.5.0.4
	ruby_1_6:1.5.0.2
	v1_6_2:1.5
	v1_6_1:1.5
	v1_6_0:1.2
	v1_4_6:1.1.1.2
	v1_4_5:1.1.1.2
	v1_4_4:1.1.1.2
	ruby_1_4_3:1.1.1.2
	ruby1_4_3:1.1.1.2
	v1_4_3:1.1.1.2
	v1_5_0:1.1.1.2
	ruby_1_4_3_pre1:1.1.1.2
	ruby_1_4:1.1.1.2.0.4
	v1_4_2:1.1.1.2
	v1_4_1:1.1.1.2
	v1_4_0:1.1.1.2
	v1_3_7:1.1.1.2
	v1_3_6_repack:1.1.1.2
	v1_3_6:1.1.1.2
	v1_3_5:1.1.1.2
	v1_2_6repack:1.1.1.1.4.4
	v1_3_4_990625:1.1.1.2
	v1_3_4_990624:1.1.1.2
	v1_2_6:1.1.1.1.4.4
	v1_3_4_990611:1.1.1.2
	v1_3_4_990531:1.1.1.2
	v1_3_3_990518:1.1.1.2
	v1_3_3_990513:1.1.1.2
	v1_3_3_990507:1.1.1.2
	v1_2_5:1.1.1.1.4.4
	v1_2_4:1.1.1.1.4.4
	v1_3_1_990225:1.1.1.2
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.4.4
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.4.4
	v1_2_1repack:1.1.1.1.4.4
	v1_2_1:1.1.1.1.4.4
	v1_2_stable:1.1.1.1.4.4
	v1_1d1:1.1.1.1.4.4.2.1
	v1_1d0:1.1.1.1.4.4.2.1
	v1_1c9_1:1.1.1.1.4.4
	v1_1c9:1.1.1.1.4.4
	v1_1c8:1.1.1.1.4.4
	v1_1c7:1.1.1.1.4.4
	v1_1c6:1.1.1.1.4.4
	v1_1d-start:1.1.1.1.4.4
	v1_1c5:1.1.1.1.4.4
	v1_1dev:1.1.1.1.4.4.0.2
	v1_1c4:1.1.1.1.4.4
	v1_1c3:1.1.1.1.4.4
	v1_1c2:1.1.1.1.4.3
	v1_1c1:1.1.1.1.4.3
	v1_1c0:1.1.1.1.4.3
	v1_1b9_31:1.1.1.1.4.3
	v1_1b9_30:1.1.1.1.4.3
	v1_1b9_28:1.1.1.1.4.3
	v1_1b9_27:1.1.1.1.4.2
	v1_1b9_26:1.1.1.1.4.2
	r1_1b9_25:1.1.1.1.4.2
	r1_1b9_24:1.1.1.1.4.2
	v1_1b9_23:1.1.1.1.4.2
	v1_1b9_22:1.1.1.1.4.2
	v1_1b9_20:1.1.1.1.4.2
	v1_1b9_18:1.1.1.1.4.2
	v1_1b9_16:1.1.1.1.4.2
	v1_1b9_15:1.1.1.1.4.2
	v1_1b9_13:1.1.1.1.4.2
	v1_1b9_12:1.1.1.1.4.2
	v1_1b9_11:1.1.1.1.4.2
	v1_1b9_08:1.1.1.1.4.2
	v1_1b9_07:1.1.1.1.4.2
	r1_1b9:1.1.1.1.4.2
	v1_1b8:1.1.1.1.4.2
	v1_1b7:1.1.1.1.4.2
	v1_1b6:1.1.1.1.4.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2000.09.25.09.15.08;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.21.06.37.23;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.20.09.16.32;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.28.08.27.00;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.35;	author matz;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	98.01.16.12.36.05;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.02.06.10.03.24;	author matz;	state Exp;
branches;
next	1.1.1.1.4.3;

1.1.1.1.4.3
date	98.06.26.09.44.59;	author matz;	state Exp;
branches;
next	1.1.1.1.4.4;

1.1.1.1.4.4
date	98.08.27.03.55.50;	author matz;	state Exp;
branches
	1.1.1.1.4.4.2.1;
next	;

1.1.1.1.4.4.2.1
date	98.10.06.03.28.26;	author matz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@matz
@
text
@#
#   thwait.rb - thread synchronization class
#   	$Release Version: 0.9 $
#   	$Revision: 1.3 $
#   	$Date: 1998/06/26 03:19:34 $
#   	by Keiju ISHITSUKA(Nihpon Rational Software Co.,Ltd.)
#
# --
#  feature:
#  provides synchronization for multiple threads.
#
#  class methods:
#  * ThreadsWait.all_waits(thread1,...)
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
#  * th = ThreadsWait.new(thread1,...)
#    creates synchronization object, specifying thread(s) to wait.
#  
#  methods:
#  * th.threads
#    list threads to be synchronized
#  * th.empty?
#    is there any thread to be synchronized.
#  * th.finished?
#    is there already terminated thread.
#  * th.join(thread1,...) 
#    wait for specified thread(s).
#  * th.join_nowait(threa1,...)
#    specifies thread(s) to wait.  non-blocking.
#  * th.next_wait
#    waits until any of specified threads is terminated.
#  * th.all_waits
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
#

require "thread.rb"
require "e2mmap.rb"

class ThreadsWait
  RCS_ID='-$Id: thwait.rb,v 1.3 1998/06/26 03:19:34 keiju Exp keiju $-'
  
  Exception2MessageMapper.extend_to(binding)
  def_exception("ErrNoWaitingThread", "No threads for waiting.")
  def_exception("ErrNoFinishedThread", "No finished threads.")
  
  def ThreadsWait.all_waits(*threads)
    tw = ThreadsWait.new(*threads)
    if block_given?
      tw.all_waits do |th|
	yield th
      end
    else
      tw.all_waits
    end
  end
  
  def initialize(*threads)
    @@threads = []
    @@wait_queue = Queue.new
    join_nowait(*threads) unless threads.empty?
  end
  
  # accessing
  #	threads - list threads to be synchronized
  attr :threads
  
  # testing
  #	empty?
  #	finished?

  # is there any thread to be synchronized.
  def empty?
    @@threads.empty?
  end
  
  # is there already terminated thread.
  def finished?
    !@@wait_queue.empty?
  end
  
  # main process:
  #	join
  #	join_nowait
  #	next_wait
  #	all_wait
  
  # adds thread(s) to join,  waits for any of waiting threads to terminate.
  def join(*threads)
    join_nowait(*threads)
    next_wait
  end
  
  # adds thread(s) to join, no wait.
  def join_nowait(*threads)
    threads.flatten!
    @@threads.concat threads
    for th in threads
      Thread.start(th) do |t|
	t.join
	@@wait_queue.push t
      end
    end
  end
  
  # waits for any of waiting threads to terminate
  # if there is no thread to wait, raises ErrNoWaitingThread.
  # if `nonblock' is true, and there is no terminated thread,
  # raises ErrNoFinishedThread.
  def next_wait(nonblock = nil)
    ThreadsWait.fail ErrNoWaitingThread if @@threads.empty?
    begin
      @@threads.delete(th = @@wait_queue.pop(nonblock))
      th
    rescue ThreadError
      ThreadsWait.fail ErrNoFinishedThread
    end
  end
  
  # waits until all of specified threads are terminated.
  # if a block is supplied for the method, evaluates it for
  # each thread termination.
  def all_waits
    until @@threads.empty?
      th = next_wait
      yield th if block_given?
    end
  end
end

ThWait = ThreadsWait
@


1.4
log
@matz - net library bug (by me)
@
text
@d47 1
a47 1
  def_exception("ErrNoFinshedThread", "No finished threads.")
d52 1
a52 2
      tw.all_waits do
	|th|
d98 2
a99 1
    @@threads.concat threads.flatten
d101 3
a103 3
      Thread.start do
	th = th.join
	@@wait_queue.push th
@


1.3
log
@matz - disappointing fixes
@
text
@d99 1
a99 1
    @@threads.concat threads
@


1.2
log
@matz
@
text
@d118 1
a118 1
      ThreadsWait.fail ErrNoFinshedThread
@


1.1
log
@Initial revision
@
text
@d2 5
a6 5
#   thwait.rb - 
#   	$Release Version: $
#   	$Revision: 1.1 $
#   	$Date: 1997/08/18 03:13:14 $
#   	by Keiju ISHITSUKA(Nippon Rational Inc.)
d9 2
d12 25
a36 1
#   
d43 1
a43 1
  RCS_ID='-$Header: /home/keiju/var/src/var.lib/ruby/RCS/thwait.rb,v 1.1 1997/08/18 03:13:14 keiju Exp keiju $-'
d46 2
a47 2
  def_exception("ErrWaitThreadsNothing", "Wait threads nothing.")
  def_exception("FinshedThreadsNothing", "finished thread nothing.")
a48 7
  # class mthods
  #	all_waits
  
  #
  # 指定したスレッドが全て終了するまで待つ. イテレータとして呼ばれると
  # 指定したスレッドが終了するとイテレータを呼び出す.
  #
d50 2
a51 2
    tw = ThreadsWait.new(th1, th2, th3, th4, th5)
    if iterator?
a60 6
  # initialize and terminating:
  #	initialize
  
  #
  # 初期化. 待つスレッドの指定ができる.
  #
d68 1
a68 3
  #	threads
  
  # 待ちスレッドの一覧を返す.
d74 2
a75 4
  #
  
  #
  # 待ちスレッドが存在するかどうかを返す.
d80 1
a80 2
  #
  # すでに終了したスレッドがあるかどうか返す
d91 1
a91 3
  #
  # 待っているスレッドを追加し待ちにはいる.
  #
d97 1
a97 3
  #
  # 待っているスレッドを追加する. 待ちには入らない.
  #
d102 1
a102 1
	th = Thread.join(th)
d108 4
a111 6
  #
  # 次の待ちにはいる.
  # 待つべきスレッドがなければ, 例外ErrWaitThreadsNothing を返す.
  # nonnlockが真の時には, nonblockingで調べる. 存在しなければ, 例外
  # FinishedThreadNothingを返す.
  #
d113 7
a119 5
    Threads.Wait.fail ErrWaitThreadsNothing if @@threads.empty?
    
    th = @@wait_queue.pop(nonblock)
    @@threads.delete th
    th
d122 3
a124 4
  #
  # 全てのスレッドが終了するまで待つ. イテレータとして呼ばれた時は, ス
  # レッドが終了する度に, イテレータを呼び出す.
  #
d128 1
a128 1
      yield th if iterator?
d132 2
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@d2 5
a6 5
#   thwait.rb - thread synchronization class
#   	$Release Version: 0.9 $
#   	$Revision: 1.3 $
#   	$Date: 1998/06/26 03:19:34 $
#   	by Keiju ISHITSUKA(Nihpon Rational Software Co.,Ltd.)
a8 2
#  feature:
#  provides synchronization for multiple threads.
d10 1
a10 25
#  class methods:
#  * ThreadsWait.all_waits(thread1,...)
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
#  * th = ThreadsWait.new(thread1,...)
#    creates synchronization object, specifying thread(s) to wait.
#  
#  methods:
#  * th.threads
#    list threads to be synchronized
#  * th.empty?
#    is there any thread to be synchronized.
#  * th.finished?
#    is there already terminated thread.
#  * th.join(thread1,...) 
#    wait for specified thread(s).
#  * th.join_nowait(threa1,...)
#    specifies thread(s) to wait.  non-blocking.
#  * th.next_wait
#    waits until any of specified threads is terminated.
#  * th.all_waits
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
d17 1
a17 1
  RCS_ID='-$Id: thwait.rb,v 1.3 1998/06/26 03:19:34 keiju Exp keiju $-'
d20 2
a21 2
  def_exception("ErrNoWaitingThread", "No threads for waiting.")
  def_exception("ErrNoFinshedThread", "No finished threads.")
d23 7
d31 1
a31 1
    tw = ThreadsWait.new(*threads)
d42 6
d55 3
a57 1
  #	threads - list threads to be synchronized
d63 4
a66 2

  # is there any thread to be synchronized.
d71 2
a72 1
  # is there already terminated thread.
d83 3
a85 1
  # adds thread(s) to join,  waits for any of waiting threads to terminate.
d91 3
a93 1
  # adds thread(s) to join, no wait.
d98 1
a98 1
	th = th.join
d104 6
a109 4
  # waits for any of waiting threads to terminate
  # if there is no thread to wait, raises ErrNoWaitingThread.
  # if `nonblock' is true, and there is no terminated thread,
  # raises ErrNoFinishedThread.
d111 5
a115 7
    ThreadsWait.fail ErrNoWaitingThread if @@threads.empty?
    begin
      @@threads.delete(th = @@wait_queue.pop(nonblock))
      th
    rescue ThreadError
      ThreadsWait.fail ErrNoFinshedThread
    end
d118 4
a121 3
  # waits until all of specified threads are terminated.
  # if a block is supplied for the method, evaluates it for
  # each thread termination.
a128 2

ThWait = ThreadsWait
@


1.1.1.1.4.1
log
@*** empty log message ***
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 1998/01/16 04:05:50 $
d17 1
a17 1
  RCS_ID='-$Header: /home/cvsroot/ruby/lib/thwait.rb,v 1.1.1.1 1998/01/16 04:05:50 matz Exp $-'
@


1.1.1.1.4.2
log
@-ko for keiju's files
@
text
@d4 2
a5 2
#   	$Revision: 1.1 $
#   	$Date: 1997/08/18 03:13:14 $
d17 1
a17 1
  RCS_ID='-$Header: /home/keiju/var/src/var.lib/ruby/RCS/thwait.rb,v 1.1 1997/08/18 03:13:14 keiju Exp keiju $-'
@


1.1.1.1.4.3
log
@980626
@
text
@d2 5
a6 5
#   thwait.rb - スレッド同期クラス
#   	$Release Version: 0.9 $
#   	$Revision: 1.3 $
#   	$Date: 1998/06/26 03:19:34 $
#   	by Keiju ISHITSUKA(Nihpon Rational Software Co.,Ltd.)
a8 3
#  機能:
#  複数のスレッドを関しそれらのスレッドが終了するまでwaitする機能を提
#  供する. 
d10 1
a10 23
#  クラスメソッド:
#  * ThreadsWait.all_waits(thread1,...)
#    全てのスレッドが終了するまで待つ. イテレータとして呼ばれた時には, 
#    スレッドが終了する度にイテレータを実行する.
#  * th = ThreadsWait.new(thread1,...)
#    同期するスレッドを指定し同期オブジェクトを生成.
#  
#  メソッド:
#  * th.threads
#    同期すべきスレッドの一覧
#  * th.empty?
#    同期すべきスレッドがあるかどうか
#  * th.finished?
#    すでに終了したスレッドがあるかどうか
#  * th.join(thread1,...) 
#    同期するスレッドを指定し, いずれかのスレッドが終了するまで待ちにはいる.
#  * th.join_nowait(threa1,...)
#    同期するスレッドを指定する. 待ちには入らない.
#  * th.next_wait
#    いずれかのスレッドが終了するまで待ちにはいる.
#  * th.all_waits
#    全てのスレッドが終了するまで待つ. イテレータとして呼ばれた時には, 
#    スレッドが終了する度にイテレータを実行する.
d17 1
a17 1
  RCS_ID='-$Id: thwait.rb,v 1.3 1998/06/26 03:19:34 keiju Exp keiju $-'
d20 2
a21 2
  def_exception("ErrNoWaitingThread", "No threads for waiting.")
  def_exception("ErrNoFinshedThread", "No finished threads.")
d28 1
a28 2
  # 指定したスレッドが終了するとその終了したスレッドを引数としてイテレー
  # タを呼び出す. 
d31 1
a31 1
    tw = ThreadsWait.new(*threads)
d84 1
a84 2
  # 待っているスレッドを追加し. いずれかのスレッドが1つ終了するまで待
  # ちにはいる.
d105 2
a106 2
  # いずれかのスレッドが終了するまで待ちにはいる.
  # 待つべきスレッドがなければ, 例外ErrNoWaitingThreadを返す.
d108 1
a108 1
  # ErrNoFinishedThreadを返す.
d111 5
a115 7
    ThreadsWait.fail ErrNoWaitingThread if @@threads.empty?
    begin
      @@threads.delete(th = @@wait_queue.pop(nonblock))
      th
    rescue ThreadError
      ThreadsWait.fail ErrNoFinshedThread
    end
a128 2

ThWait = ThreadsWait
@


1.1.1.1.4.4
log
@1.1c3
@
text
@d2 1
a2 1
#   thwait.rb - thread synchronization class
d9 3
a11 2
#  feature:
#  provides synchronization for multiple threads.
d13 1
a13 1
#  class methods:
d15 2
a16 3
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
d18 1
a18 1
#    creates synchronization object, specifying thread(s) to wait.
d20 1
a20 1
#  methods:
d22 1
a22 1
#    list threads to be synchronized
d24 1
a24 1
#    is there any thread to be synchronized.
d26 1
a26 1
#    is there already terminated thread.
d28 1
a28 1
#    wait for specified thread(s).
d30 1
a30 1
#    specifies thread(s) to wait.  non-blocking.
d32 1
a32 1
#    waits until any of specified threads is terminated.
d34 2
a35 3
#    waits until all of specified threads are terminated.
#    if a block is supplied for the method, evaluates it for
#    each thread termination.
d48 8
d68 6
d81 3
a83 1
  #	threads - list threads to be synchronized
d89 4
a92 2

  # is there any thread to be synchronized.
d97 2
a98 1
  # is there already terminated thread.
d109 4
a112 1
  # adds thread(s) to join,  waits for any of waiting threads to terminate.
d118 3
a120 1
  # adds thread(s) to join, no wait.
d131 6
a136 4
  # waits for any of waiting threads to terminate
  # if there is no thread to wait, raises ErrNoWaitingThread.
  # if `nonblock' is true, and there is no terminated thread,
  # raises ErrNoFinishedThread.
d147 4
a150 3
  # waits until all of specified threads are terminated.
  # if a block is supplied for the method, evaluates it for
  # each thread termination.
@


1.1.1.1.4.4.2.1
log
@join 1.1c6
@
text
@d102 1
a102 1
	th = th.join
@


