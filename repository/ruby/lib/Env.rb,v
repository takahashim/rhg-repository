head	1.4;
access;
symbols
	v1_6_7:1.3.2.2
	v1_6_6:1.3.2.2
	v1_6_5:1.3.2.2
	v1_6_4:1.3.2.2
	v1_7_1:1.4
	v1_6_4_preview4:1.3.2.2
	v1_6_4_preview3:1.3.2.2
	v1_6_4_preview2:1.3.2.2
	v1_6_4_preview1:1.3.2.2
	v1_6_3:1.3.2.2
	ruby_m17n:1.3.0.4
	ruby_1_6:1.3.0.2
	v1_6_2:1.3
	v1_6_1:1.3
	v1_6_0:1.3
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.3
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.3
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.3
	v1_2_4:1.1.2.3
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.3
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.3
	v1_2_1repack:1.1.2.3
	v1_2_1:1.1.2.3
	v1_2_stable:1.1.2.3
	v1_1d1:1.1.2.2.2.1
	v1_1d0:1.1.2.2.2.1
	v1_1c9_1:1.1.2.3
	v1_1c9:1.1.2.3
	v1_1c8:1.1.2.3
	v1_1c7:1.1.2.3
	v1_1c6:1.1.2.2
	v1_1d-start:1.1.2.2
	v1_1c5:1.1.2.2
	v1_1dev:1.1.2.2.0.2
	v1_1c4:1.1.2.2
	v1_1c3:1.1.2.2
	v1_1c2:1.1.2.2
	v1_1c1:1.1.2.2
	v1_1c0:1.1.2.2
	v1_1b9_31:1.1.2.2
	v1_1b9_30:1.1.2.2
	v1_1b9_28:1.1.2.2
	v1_1b9_27:1.1.2.1
	v1_1b9_26:1.1.2.1
	r1_1b9_25:1.1.2.1
	r1_1b9_24:1.1.2.1
	v1_1b9_23:1.1.2.1
	v1_1b9_22:1.1.2.1
	v1_1b9_20:1.1.2.1
	v1_1b9_18:1.1.2.1
	v1_1b9_16:1.1.2.1
	v1_1b9_15:1.1.2.1
	v1_1b9_13:1.1.2.1
	v1_1b9_12:1.1.2.1
	v1_1b9_11:1.1.2.1
	v1_1b9_08:1.1.2.1
	v1_1b9_07:1.1.2.1
	r1_1b9:1.1.2.1
	v1_1b8:1.1.2.1
	v1_1b7:1.1.2.1
	v1_1b6:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2001.02.26.05.29.04;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.23.05.23.12;	author matz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.08.13.05.45.15;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.58.19;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.35;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.01.16.12.58.19;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.06.26.09.44.52;	author matz;	state Exp;
branches
	1.1.2.2.2.1;
next	1.1.2.3;

1.1.2.3
date	98.11.09.09.11.52;	author matz;	state Exp;
branches;
next	;

1.1.2.2.2.1
date	98.11.25.03.31.18;	author matz;	state Exp;
branches;
next	;

1.3.2.1
date	2001.02.26.04.07.50;	author matz;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.02.27.08.04.25;	author matz;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* eval.c (proc_call): should not modify ruby_block->frame.iter
  based on ruby_frame->iter altered by PUSH_ITER().

* eval.c (rb_thread_fd_close): should save current context before
  raising exception.

* io.c (set_stdin): preserve original stdin.

* io.c (set_outfile): preserve original stdout/stderr.
@
text
@# Env.rb -- imports environment variables as global variables, Perlish ;(
# Usage:
#
#  require 'Env'
#  p $USER
#  $USER = "matz"
#  p ENV["USER"]

require 'importenv'

if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end
@


1.3
log
@2000-02-23
@
text
@d9 1
a9 13
for k,v in ENV
  next unless /^[a-zA-Z][_a-zA-Z0-9]*/ =~ k
  eval <<EOS
  $#{k} = %q!#{v}!
  trace_var "$#{k}", proc{|v|
    ENV[%q!#{k}!] = v; 
    $#{k} = %q!#{v}!
    if v == nil
      untrace_var "$#{k}"
    end
  }
EOS
end
@


1.3.2.1
log
@* eval.c (proc_call): should not modify ruby_block->frame.iter
  based on ruby_frame->iter altered by PUSH_ITER().

* eval.c (rb_thread_fd_close): should save current context before
  raising exception.
@
text
@d15 1
a15 1
    $#{k} = v
@


1.3.2.2
log
@* eval.c (ev_const_get): retrieve Object's constant if no current
  class is available (e.g. defining singleton class for Fixnums).

* eval.c (proc_call): ignore block to `call' always, despite of
  being orphan or not.
@
text
@d9 13
a21 1
require 'importenv'
@


1.2
log
@1.4.0
@
text
@d1 1
a1 2
# Env.rb -- imports environment variables as global variables
#
@


1.1
log
@file Env.rb was initially added on branch v1_1r.
@
text
@d1 31
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 31
# Env.rb -- imports environment variables as global variables
#
# Usage:
#
#  require 'Env'
#  p $USER
#  $USER = "matz"
#  p ENV["USER"]

for k,v in ENV
  next unless /^[a-zA-Z][_a-zA-Z0-9]*/ =~ k
  eval <<EOS
  $#{k} = %q!#{v}!
  trace_var "$#{k}", proc{|v|
    ENV[%q!#{k}!] = v; 
    $#{k} = %q!#{v}!
    if v == nil
      untrace_var "$#{k}"
    end
  }
EOS
end

if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end
@


1.1.2.1
log
@*** empty log message ***
@
text
@a0 28
# Env.rb -- imports environment variables as global variables
#
# Usage:
#
#  p $USER
#  $USER = "matz"
#  p ENV["USER"]

for k,v in ENV
  next unless /^[a-zA-Z][_a-zA-Z0-9]*/ =~ k
  eval <<EOS
  $#{k} = %q!#{v}!
  trace_var "$#{k}", proc{|v|
    ENV[%q!#{k}!] = v; 
    $#{k} = %q!#{v}!
    if v == nil
      untrace_var "$#{k}"
    end
  }
EOS
end

p $TERM
$TERM = nil
p $TERM
p ENV["TERM"]
$TERM = "foo"
p ENV["TERM"]
@


1.1.2.2
log
@980626
@
text
@d23 6
a28 8
if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end
@


1.1.2.2.2.1
log
@*** empty log message ***
@
text
@a4 1
#  require 'Env'
@


1.1.2.3
log
@1.1c7
@
text
@a4 1
#  require 'Env'
@


