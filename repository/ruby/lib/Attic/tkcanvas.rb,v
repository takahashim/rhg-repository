head	1.2;
access;
symbols
	v1_6_3:1.2
	ruby_1_6:1.2.0.2
	v1_1d1:1.1.1.1.4.7.2.2
	v1_1d0:1.1.1.1.4.7.2.2
	v1_1c7:1.1.1.1.4.8
	v1_1c6:1.1.1.1.4.8
	v1_1d-start:1.1.1.1.4.7
	v1_1c5:1.1.1.1.4.7
	v1_1dev:1.1.1.1.4.7.0.2
	v1_1c4:1.1.1.1.4.7
	v1_1c3:1.1.1.1.4.7
	v1_1c2:1.1.1.1.4.7
	v1_1c1:1.1.1.1.4.6
	v1_1c0:1.1.1.1.4.5
	v1_1b9_31:1.1.1.1.4.4
	v1_1b9_30:1.1.1.1.4.3
	v1_1b9_28:1.1.1.1.4.1
	v1_1b9_27:1.1.1.1.4.1
	v1_1b9_26:1.1.1.1.4.1
	r1_1b9_25:1.1.1.1.4.1
	r1_1b9_24:1.1.1.1.4.1
	v1_1b9_23:1.1.1.1.4.1
	v1_1b9_22:1.1.1.1.4.1
	v1_1b9_20:1.1.1.1.4.1
	v1_1b9_18:1.1.1.1.4.1
	v1_1b9_16:1.1.1.1.4.1
	v1_1b9_15:1.1.1.1.4.1
	v1_1b9_13:1.1.1.1.4.1
	v1_1b9_12:1.1.1.1.4.1
	v1_1b9_11:1.1.1.1.4.1
	v1_1b9_08:1.1.1.1.4.1
	v1_1b9_07:1.1.1.1.4.1
	r1_1b9:1.1.1.1.4.1
	v1_1b8:1.1.1.1.4.1
	v1_1b7:1.1.1.1.4.1
	v1_1b6:1.1.1.1.4.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.08.13.06.09.53;	author matz;	state dead;
branches;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	;

1.1.1.1.4.1
date	98.01.16.12.36.06;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.07.03.07.06.45;	author matz;	state Exp;
branches;
next	1.1.1.1.4.3;

1.1.1.1.4.3
date	98.07.09.08.40.40;	author matz;	state Exp;
branches;
next	1.1.1.1.4.4;

1.1.1.1.4.4
date	98.07.15.06.13.03;	author matz;	state Exp;
branches;
next	1.1.1.1.4.5;

1.1.1.1.4.5
date	98.07.17.05.12.45;	author matz;	state Exp;
branches;
next	1.1.1.1.4.6;

1.1.1.1.4.6
date	98.07.21.09.18.02;	author matz;	state Exp;
branches;
next	1.1.1.1.4.7;

1.1.1.1.4.7
date	98.07.29.09.50.50;	author matz;	state Exp;
branches
	1.1.1.1.4.7.2.1;
next	1.1.1.1.4.8;

1.1.1.1.4.8
date	98.10.06.02.45.15;	author matz;	state Exp;
branches;
next	1.1.1.1.4.9;

1.1.1.1.4.9
date	98.11.17.09.12.46;	author matz;	state dead;
branches;
next	;

1.1.1.1.4.7.2.1
date	98.10.06.03.28.27;	author matz;	state Exp;
branches;
next	1.1.1.1.4.7.2.2;

1.1.1.1.4.7.2.2
date	98.11.25.03.31.19;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove obsolete files
@
text
@#
#		tkcanvas.rb - Tk canvas classes
#			$Date: 1998/01/16 12:13:07 $
#			by Yukihiro Matsumoto <matz@@caelum.co.jp>

require "tk"

class TkCanvas<TkWindow
  def create_self
    tk_call 'canvas', path
  end
  def tagid(tag)
    if tag.kind_of?(TkcItem)
      tag.id
    else
      tag
    end
  end
  private :tagid
  def addtag(tag, *args)
    tk_send 'addtag', tagid(tag), *args
  end
  def addtag_above(tagOrId)
    addtag('above', tagOrId)
  end
  def addtag_all
    addtag('all')
  end
  def addtag_below(tagOrId)
    addtag('below', tagOrId)
  end
  def addtag_closest(x, y, halo=None, start=None)
    addtag('closest', x, y, halo, start)
  end
  def addtag_enclosed(x1, y1, x2, y2)
    addtag('enclosed', x1, y1, x2, y2)
  end
  def addtag_overlapping(x1, y1, x2, y2)
    addtag('overlapping', x1, y1, x2, y2)
  end
  def addtag_withtag(tagOrId)
    addtag('withtag', tagOrId)
  end
  def bbox(tag)
    list(tk_send('bbox', tagid(tag)))
  end
  def itembind(tag, seq, cmd=Proc.new)
    id = install_cmd(cmd)
    tk_send 'bind', tagid(tag), "<#{seq}>", id
    @@cmdtbl.push id
  end
  def canvasx(x, *args)
    tk_send 'canvasx', x, *args
  end
  def canvasy(y, *args)
    tk_send 'canvasy', y, *args
  end
  def coords(tag, *args)
    tk_send 'coords', tagid(tag), *args
  end
  def dchars(tag, first, last=None)
    tk_send 'dchars', tagid(tag), first, last
  end
  def delete(*args)
    tk_send 'delete', *args
  end
  alias remove delete
  def dtag(tag, tag_to_del=None)
    tk_send 'dtag', tagid(tag), tag_to_del
  end
  def find(*args)
    tk_send 'find', *args
  end
  def itemfocus(tag)
    tk_send 'find', tagid(tag)
  end
  def gettags(tag)
    tk_send 'gettags', tagid(tag)
  end
  def icursor(tag, index)
    tk_send 'icursor', tagid(tag), index
  end
  def index(tag)
    tk_send 'index', tagid(tag), index
  end
 def lower(tag, below=None)
    tk_send 'lower', tagid(tag), below
  end
  def move(tag, x, y)
    tk_send 'move', tagid(tag), x, y
  end
  def itemtype(tag)
    tk_send 'type', tagid(tag)
  end
  def postscript(keys)
    tk_send "postscript", *hash_kv(keys)
  end
  def raise(tag, above=None)
    tk_send 'raise', tagid(tag), above
  end
  def scale(tag, x, y, xs, ys)
    tk_send 'scale', tagid(tag), x, y, xs, ys
  end
  def scan_mark(x, y)
    tk_send 'scan', 'mark', x, y
  end
  def scan_dragto(x, y)
    tk_send 'scan', 'dragto', x, y
  end
  def select(*args)
    tk_send 'select', *args
  end
  def xview(*index)
    tk_send 'xview', *index
  end
  def yview(*index)
    tk_send 'yview', *index
  end
end

class TkcItem<TkObject
  def initialize(parent, *args)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = parent.path
    if args[-1].kind_of? Hash
      keys = args.pop
    end
    @@id = create_self(*args)
    if keys
      tk_call @@path, 'itemconfigure', @@id, *hash_kv(keys)
    end
  end
  def create_self(*args) end
  private :create_self
  def id
    return @@id
  end

  def configure(slot, value)
    tk_call path, 'itemconfigure', @@id, "-#{slot}", value
  end

  def addtag(tag)
    @@c.addtag(tag, 'withtag', @@id)
  end
  def bbox
    @@c.bbox(@@id)
  end
  def bind(seq, cmd=Proc.new)
    @@c.itembind @@id, seq, cmd
  end
  def coords(*args)
    @@c.coords @@id, *args
  end
  def dchars(first, last=None)
    @@c.dchars @@id, first, last
  end
  def dtag(ttd)
    @@c.dtag @@id, ttd
  end
  def focus
    @@c.focus @@id
  end
  def gettags
    @@c.gettags @@id
  end
  def icursor
    @@c.icursor @@id
  end
  def index
    @@c.index @@id
  end
  def insert(beforethis, string)
    @@c.insert @@id, beforethis, string
  end
  def lower(belowthis=None)
    @@c.lower @@id, belowthis
  end
  def move(xamount, yamount)
    @@c.move @@id, xamount, yamount
  end
  def raise(abovethis=None)
    @@c.raise @@id, abovethis
  end
  def scale(xorigin, yorigin, xscale, yscale)
    @@c.scale @@id, xorigin, yorigin, xscale, yscale
  end
  def itemtype
    @@c.itemtype @@id
  end
  def destroy
    tk_call path, 'delete', @@id
  end
end

class TkcArc<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'arc', *args)
  end
end
class TkcBitmap<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'bitmap', *args)
  end
end
class TkcImage<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'image', *args)
  end
end
class TkcLine<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'line', *args)
  end
end
class TkcOval<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'oval', *args)
  end
end
class TkcPolygon<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'polygon', *args)
  end
end
class TkcRectangle<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'rectangle', *args)
  end
end
class TkcText<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'text', *args)
  end
end
class TkcWindow<TkcItem
  def create_self(*args)
    tk_call(@@path, 'create', 'window', *args)
  end
end
class TkcGroup<TkcItem
  $tk_group_id = 'tkg00000'
  def create_self(*args)
    @@id = $tk_group_id
    $tk_group_id = $tk_group_id.succ
  end
  
  def add(*tags)
    for i in tags
      i.addtag @@id
    end
  end
  def add(*tags)
    for i in tags
      i.addtag @@id
    end
  end
  def delete(*tags)
    for i in tags
      i.delete @@id
    end
  end
  def list
    @@c.find 'withtag', @@id
  end
  alias remove delete
end


class TkImage<TkObject
  include Tk

  $tk_image_id = 'i00000'
  def initialize(keys=nil)
    @@path = $tk_image_id
    $tk_image_id = $tk_image_id.succ
    tk_call 'image', 'create', @@type, @@path, *hash_kv(keys)
  end

  def height
    number(tk_call('image', 'height', @@path))
  end
  def itemtype
    tk_call('image', 'type', @@path)
  end
  def width
    number(tk_call('image', 'height', @@path))
  end

  def TkImage.names
    tk_call('image', 'names', @@path).split
  end
  def TkImage.types
    tk_call('image', 'types', @@path).split
  end
end

class TkBitmapImage<TkImage
  def initialize(*args)
    @@type = 'bitmap'
    super
  end
end

class TkPhotoImage<TkImage
  def initialize(*args)
    @@type = 'photo'
    super
  end

  def blank
    tk_send 'blank'
  end
  def cget
    tk_send 'cget'
  end
  def get(x, y)
    tk_send 'get', x, y
  end
  def put(data, to=None)
    tk_send 'put', data, to
  end
end
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#			$Date: 1995/11/11 11:17:15 $
@


1.1.1.1
log
@
@
text
@@


1.1.1.1.4.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
#			$Date: 1998/01/16 04:05:50 $
@


1.1.1.1.4.2
log
@1.1b9_29
@
text
@d3 1
a3 1
#			$Date: 1998/01/16 12:36:06 $
a4 2
#			$Date: 1998/06/30$
#			by Hidetoshi Nagai <nagai@@ai.kyutech.ac.jp>
a11 1

d13 1
a13 1
    if tag.kind_of?(TkcItem) || tag.kind_of?(TkcTag)
d20 2
a21 3

  def addtag(tag, mode, *args)
    tk_send 'addtag', tagid(tag), mode, *args
d23 2
a24 2
  def addtag_above(tagOrId, target)
    addtag(tagOrId, 'above', tagid(target))
d26 2
a27 2
  def addtag_all(tagOrId)
    addtag(tagOrId, 'all')
d29 2
a30 2
  def addtag_below(tagOrId, target)
    addtag(tagOrId, 'below', tagid(target))
d32 2
a33 2
  def addtag_closest(tagOrId, x, y, halo=None, start=None)
    addtag(tagOrId, 'closest', x, y, halo, start)
d35 2
a36 2
  def addtag_enclosed(tagOrId, x1, y1, x2, y2)
    addtag(tagOrId, 'enclosed', x1, y1, x2, y2)
d38 2
a39 2
  def addtag_overlapping(tagOrId, x1, y1, x2, y2)
    addtag(tagOrId, 'overlapping', x1, y1, x2, y2)
d41 2
a42 2
  def addtag_withtag(tagOrId, tag)
    addtag(tagOrId, 'withtag', tagid(tag))
d44 2
a45 3

  def bbox(tagOrId, *tags)
    list(tk_send('bbox', tagid(tagOrId), *tags))
d47 4
a50 14

  def itembind(tag, context, cmd=Proc.new, args=nil)
    context = context.join("><") if context.kind_of? Array
    if /,/ =~ context
      context = context.split(/\s*,\s*/).join("><")
    end
    id = install_bind(cmd, args)
    begin
      tk_send 'bind', tagid(tag), "<#{context}>", id
    rescue
      uninstall_cmd(cmd)
      fail
    end
    # @@cmdtbl.push id
a51 1

d53 1
a53 1
    tk_tcl2ruby(tk_send 'canvasx', x, *args)
d56 1
a56 1
    tk_tcl2ruby(tk_send 'canvasy', y, *args)
a57 1

d59 1
a59 5
    if args == []
      tk_split_list(tk_send('coords', tagid(tag)))
    else
      tk_send('coords', tagid(tag), *args)
    end
a60 1

a63 1

a67 1

d71 2
a72 8

  def find(mode, *args)
    list(tk_send 'find', mode, *args).filter{|id| 
      TkcItem.id2obj(id)
    }
  end
  def find_above(target)
    find('above', tagid(target))
d74 2
a75 2
  def find_all
    find('all')
d77 2
a78 2
  def find_below(target)
    find('below', tagid(target))
d80 2
a81 2
  def find_closest(x, y, halo=None, start=None)
    find('closest', x, y, halo, start)
d83 2
a84 2
  def find_enclosed(x1, y1, x2, y2)
    find('enclosed', x1, y1, x2, y2)
d86 1
a86 67
  def find_overlapping(x1, y1, x2, y2)
    find('overlapping', x1, y1, x2, y2)
  end
  def find_withtag(tag)
    find('withtag', tag)
  end

  def itemfocus(tagOrId=nil)
    if tagOrId
      tk_send 'focus', tagid(tagOrId)
    else
      ret = tk_send('focus')
      if ret == ""
	nil
      else
	TkcItem.id2obj(ret)
      end
    end
  end

  def gettags(tagOrId)
    list(tk_send('gettags', tagid(tagOrId))).collect{|tag|
      TkcTag.id2obj(tag)
    }
  end

  def icursor(tagOrId, index)
    tk_send 'icursor', tagid(tagOrId), index
  end

  def index(tagOrId, index)
    tk_send 'index', tagid(tagOrId), index
  end

  def insert(tagOrId, index, string)
    tk_send 'insert', tagid(tagOrId), index, string
  end

  def itemcget(tagOrId, option)
    tk_send 'itemcget', tagid(tagOrId), option
  end

  def itemconfigure(tagOrId, key, value=None)
    if key.kind_of? Hash
      tk_send 'itemconfigure', tagid(tagOrId), *hash_kv(key)
    else
      tk_send 'itemconfigure', tagid(tagOrId), "-#{key}", value
    end
  end
#  def itemconfigure(tagOrId, keys)
#    tk_send 'itemconfigure', tagid(tagOrId), *hash_kv(keys)
#  end

  def itemconfiginfo(tagOrId, key=nil)
    if key
      conf = tk_split_list(tk_send 'itemconfigure', tagid(tagOrId), "-#{key}")
      conf[0] = conf[0][1..-1]
      conf
    else
      tk_split_list(tk_send 'itemconfigure', tagid(tagOrId)).collect{|conf|
	conf[0] = conf[0][1..-1]
	conf
      }
    end
  end

  def lower(tag, below=None)
a88 1

d92 3
a94 1

a97 1

a100 1

a103 1

d110 2
a111 18

  def select(mode, *args)
    tk_send 'select', mode, *args
  end
  def select_adjust(tagOrId, index)
    select('adjust', tagid(tagOrId), index)
  end
  def select_clear
    select('clear')
  end
  def select_from(tagOrId, index)
    select('from', tagid(tagOrId), index)
  end
  def select_item
    select('item')
  end
  def select_to(tagOrId, index)
    select('to', tagid(tagOrId), index)
a112 5

  def itemtype(tag)
    TkcItem.type2class(tk_send 'type', tagid(tag))
  end

d121 14
a134 5
module TkcTagAccess
  include TkComm

  def addtag(tag)
    @@c.addtag(tag, 'with', @@id)
d136 4
a139 3

  def bbox
    @@c.bbox(@@id)
d142 2
a143 2
  def bind(seq, cmd=Proc.new, args=nil)
    @@c.itembind @@id, seq, cmd, args
d146 2
a147 2
  def cget(option)
    @@c.itemcget @@id, option
d149 2
a150 3

  def configure(key, value=None)
    @@c.itemconfigure @@id, key, value
d152 2
a153 6
#  def configure(keys)
#    @@c.itemconfigure @@id, keys
#  end

  def configinfo
    @@c.itemconfigure @@id
a154 1

a157 1

d161 2
a162 3

  def dtag(tag_to_del=None)
    @@c.dtag @@id, tag_to_del
a163 6

  def find
    @@c.find 'withtag', @@id
  end
  alias list find

d165 1
a165 1
    @@c.itemfocus @@id
a166 1

d170 2
a171 3

  def icursor(index)
    @@c.icursor @@id, index
d173 2
a174 3

  def index(index)
    @@c.index @@id, index
a175 1

a178 1

a181 1

a184 1

a187 1

a190 11

  def select_adjust(index)
    @@c.select('adjust', @@id, index)
  end
  def select_from(index)
    @@c.select('from', @@id, index)
  end
  def select_to(index)
    @@c.select('to', @@id, index)
  end

d194 2
a195 79
end

class TkcTag<TkObject
  include TkcTagAccess

  CTagID_TBL = {}

  def TkcTag.id2obj(id)
    CTagID_TBL[id]? CTagID_TBL[id]: id
  end

  $tk_canvas_tag = 'ctag0000'
  def initialize(parent, mode=nil, *args)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = @@id = $tk_canvas_tag
    CTagID_TBL[@@id] = self
    $tk_canvas_tag = $tk_canvas_tag.succ
    if mode
      tk_call @@c.path, "addtag", @@id, mode, *args
    end
  end
  def id
    return @@id
  end

  def delete
    @@c.delete @@id
    CTagID_TBL[@@id] = nil
  end
  alias remove  delete
  alias destroy delete

  def set_to_above(target)
    @@c.addtag_above(@@id, target)
  end
  alias above set_to_above

  def set_to_all
    @@c.addtag_all(@@id)
  end
  alias all set_to_all

  def set_to_below(target)
    @@c.addtag_below(@@id, target)
  end
  alias below set_to_below

  def set_to_closest(x, y, halo=None, start=None)
    @@c.addtag_closest(@@id, x, y, halo, start)
  end
  alias closest set_to_closest

  def set_to_enclosed(x1, y1, x2, y2)
    @@c.addtag_enclosest(@@id, x1, y1, x2, y2)
  end
  alias enclosed set_to_enclosed

  def set_to_overlapping(x1, y1, x2, y2)
    @@c.addtag_overlapping(@@id, x1, y1, x2, y2)
  end
  alias overlapping set_to_overlapping

  def set_to_withtag(target)
    @@c.addtag_withtag(@@id, target)
  end
  alias withtag set_to_withtag
end

class TkcTagAll<TkcTag
  def initialize(parent)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = @@id = 'all'
    CTagID_TBL[@@id] = self
a198 81
class TkcTagCurrent<TkcTag
  def initialize(parent)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = @@id = 'current'
    CTagID_TBL[@@id] = self
  end
end

class TkcGroup<TkcTag
  $tk_group_id = 'tkg00000'
  def create_self(parent, *args)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = @@id = $tk_group_id
    CTagID_TBL[@@id] = self
    $tk_group_id = $tk_group_id.succ
    add(*args) if args != []
  end
  
  def include(*tags)
    for i in tags
      i.addtag @@id
    end
  end

  def exclude(*tags)
    for i in tags
      i.delete @@id
    end
  end
end


class TkcItem<TkObject
  include TkcTagAccess

  CItemTypeToClass = {}
  CItemID_TBL = {}

  def TkcItem.type2class(type)
    CItemTypeToClass[type]
  end

  def TkcItem.id2obj(id)
    CItemID_TBL[id]? CItemID_TBL[id]: id
  end

  def initialize(parent, *args)
    if not parent.kind_of?(TkCanvas)
      fail format("%s need to be TkCanvas", parent.inspect)
    end
    @@c = parent
    @@path = parent.path
    if args[-1].kind_of? Hash
      keys = args.pop
    end
    @@id = create_self(*args).to_i ;# 'canvas item id' is integer number
    CItemID_TBL[@@id] = self
    if keys
      tk_call @@path, 'itemconfigure', @@id, *hash_kv(keys)
    end
  end
  def create_self(*args); end
  private :create_self
  def id
    return @@id
  end

  def delete
    @@c.delete @@id
    CItemID_TBL[@@id] = nil
  end
  alias remove  delete
  alias destroy delete
end

a199 1
  CItemTypeToClass['arc'] = self
a204 1
  CItemTypeToClass['bitmap'] = self
a209 1
  CItemTypeToClass['image'] = self
a214 1
  CItemTypeToClass['line'] = self
a219 1
  CItemTypeToClass['oval'] = self
a224 1
  CItemTypeToClass['polygon'] = self
a229 1
  CItemTypeToClass['rectangle'] = self
a234 1
  CItemTypeToClass['text'] = self
a239 1
  CItemTypeToClass['window'] = self
d244 28
a275 2
  Tk_IMGTBL = {}

a280 1
    Tk_IMGTBL[@@path] = self
a282 4
  def delete
    Tk_IMGTBL[@@id] = nil if @@id
    tk_call('image', 'delete', @@path)
  end
d294 1
a294 3
    Tk.tk_call('image', 'names').split.filter{|id|
      (Tk_IMGTBL[id])? Tk_IMGTBL[id] : id
    }
a295 1

d297 1
a297 1
    Tk.tk_call('image', 'types').split
d317 2
a318 3

  def cget(option)
    tk_send 'cget', option
a319 13

  def copy(source, *opts)
    args = opts.collect{|term|
      if term.kind_of?(String) && term.include?(?\s)
	term.split
      else
	term
      end
    }.flatten

    tk_send 'copy', source, *args
  end

d323 2
a324 35

  def put(data, *to)
    if to == []
      tk_send 'put', data
    else
      tk_send 'put', data, '-to', *to
    end
  end

  def read(file, *opts)
    args = opts.collect{|term|
      if term.kind_of?(String) && term.include?(?\s)
	term.split
      else
	term
      end
    }.flatten
  
    tk_send 'read', file, *args
  end

  def redither
    tk_send 'redither'
  end

  def write(file, *opts)
    args = opts.collect{|term|
      if term.kind_of?(String) && term.include?(?\s)
	term.split
      else
	term
      end
    }.flatten
  
    tk_send 'write', file, *args
@


1.1.1.1.4.3
log
@1.1b9_30
@
text
@d3 1
a3 1
#			$Date: 1998/07/03 07:06:45 $
d5 1
a5 1
#			$Date: 1998/07/03 07:06:45 $
a10 6
  WidgetClassName = 'Canvas'.freeze
  TkClassBind::WidgetClassNameTBL[WidgetClassName] = self
  def self.to_eval
    WidgetClassName
  end

d54 4
d60 1
a60 1
      tk_send 'bind', tagid(tag), "<#{tk_event_sequence(context)}>", id
a67 17
  def itembindinfo(tag, context=nil)
    if context
      (tk_send('bind', tagid(tag), 
	       "<#{tk_event_sequence(context)}>")).collect{|cmdline|
	if cmdline =~ /^rb_out (c\d+)\s+(.*)$/
	  [Tk_CMDTBL[$1], $2]
	else
	  cmdline
	end
      }
    else
      tk_split_list(tk_send 'bind', tagid(tag)).filter{|seq|
	seq[1..-2].gsub(/></,',')
      }
    end
  end

a252 4
  end

  def bindinfo(seq=nil)
    @@c.itembindinfo @@id, seq
@


1.1.1.1.4.4
log
@1.1b9_31
@
text
@d3 1
a3 1
#			$Date: 1998/07/09 08:40:40 $
d5 1
a5 1
#			$Date: 1998/07/09 08:40:40 $
a8 114
require 'tkfont'

module TkTreatCItemFont
  def tagfont_configinfo(tagOrId)
    if tagOrId.kind_of?(TkcItem) || tagOrId.kind_of?(TkcTag)
      pathname = self.path + ';' + tagOrId.id.to_s
    else
      pathname = self.path + ';' + tagOrId.to_s
    end
    ret = TkFont.used_on(pathname)
    if ret == nil
      ret = TkFont.init_widget_font(pathname, 
				    self.path, 'itemconfigure', tagOrId)
    end
    ret
  end
  alias tagfontobj tagfont_configinfo

  def tagfont_configure(tagOrId, slot)
    if tagOrId.kind_of?(TkcItem) || tagOrId.kind_of?(TkcTag)
      pathname = self.path + ';' + tagOrId.id.to_s
    else
      pathname = self.path + ';' + tagOrId.to_s
    end
    if (fnt = slot['font'])
      slot['font'] = nil
      if fnt.kind_of? TkFont
	return fnt.call_font_configure(pathname, 
				       self.path,'itemconfigure',tagOrId,slot)
      else
	latintagfont_configure(tagOrId, fnt) if fnt
      end
    end
    if (ltn = slot['latinfont'])
      slot['latinfont'] = nil
      latintagfont_configure(tagOrId, ltn) if ltn
    end
    if (ltn = slot['asciifont'])
      slot['asciifont'] = nil
      latintagfont_configure(tagOrId, ltn) if ltn
    end
    if (knj = slot['kanjifont'])
      slot['kanjifont'] = nil
      kanjitagfont_configure(tagOrId, knj) if knj
    end

    tk_call(self.path, 'itemconfigure', tagOrId, *hash_kv(slot)) if slot != {}
    self
  end

  def latintagfont_configure(tagOrId, ltn, keys=nil)
    fobj = tagfontobj(tagOrId)
    if ltn.kind_of? TkFont
      conf = {}
      ltn.latin_configinfo.each{|key,val| conf[key] = val}
      if keys
	fobj.latin_configure(conf.update(keys))
      else
	fobj.latin_configure(conf)
      end
    else
      fobj.latin_replace(ltn)
    end
  end
  alias asciitagfont_configure latintagfont_configure

  def kanjitagfont_configure(tagOrId, knj, keys=nil)
    fobj = tagfontobj(tagOrId)
    if knj.kind_of? TkFont
      conf = {}
      knj.kanji_configinfo.each{|key,val| conf[key] = val}
      if keys
	fobj.kanji_configure(conf.update(keys))
      else
	fobj.kanji_configure(conf)
      end
    else
      fobj.kanji_replace(knj)
    end
  end

  def tagfont_copy(tagOrId, window, wintag=nil)
    if wintag
      window.tagfontobj(wintag).configinfo.each{|key,value|
	tagfontobj(tagOrId).configure(key,value)
      }
      tagfontobj(tagOrId).replace(window.tagfontobj(wintag).latin_font, 
				  window.tagfontobj(wintag).kanji_font)
    else
      window.tagfont(tagOrId).configinfo.each{|key,value|
	tagfontobj(tagOrId).configure(key,value)
      }
      tagfontobj(tagOrId).replace(window.fontobj.latin_font, 
				  window.fontobj.kanji_font)
    end
  end

  def latintagfont_copy(tagOrId, window, wintag=nil)
    if wintag
      tagfontobj(tagOrId).latin_replace(window.tagfontobj(wintag).latin_font)
    else
      tagfontobj(tagOrId).latin_replace(window.fontobj.latin_font)
    end
  end
  alias asciitagfont_copy latintagfont_copy

  def kanjitagfont_copy(tagOrId, window, wintag=nil)
    if wintag
      tagfontobj(tagOrId).kanji_replace(window.tagfontobj(wintag).kanji_font)
    else
      tagfontobj(tagOrId).kanji_replace(window.fontobj.kanji_font)
    end
  end
end
a10 2
  include TkTreatCItemFont

d174 1
a174 1
    tk_send 'itemcget', tagid(tagOrId), "-#{option}"
d179 1
a179 7
      if ( key['font'] || key['kanjifont'] \
	  || key['latinfont'] || key['asciifont'] )
	tagfont_configure(tagOrId, key.dup)
      else
	tk_send 'itemconfigure', tagid(tagOrId), *hash_kv(key)
      end

d181 1
a181 6
      if ( key == 'font' || key == 'kanjifont' \
	  || key == 'latinfont' || key == 'asciifont' )
	tagfont_configure(tagid(tagOrId), {key=>value})
      else
	tk_call 'itemconfigure', tagid(tagOrId), "-#{key}", value
      end
a183 7
#  def itemconfigure(tagOrId, key, value=None)
#    if key.kind_of? Hash
#      tk_send 'itemconfigure', tagid(tagOrId), *hash_kv(key)
#    else
#      tk_send 'itemconfigure', tagid(tagOrId), "-#{key}", value
#    end
#  end
a260 1
  include TkTreatTagFont
d289 2
a290 2
  def configinfo(key=nil)
    @@c.itemconfiginfo @@id, key
d497 1
a497 1
    @@parent = @@c = parent
d505 1
a505 2
      # tk_call @@path, 'itemconfigure', @@id, *hash_kv(keys)
      configure(keys) if keys
@


1.1.1.1.4.5
log
@1.1c0
@
text
@d3 1
a3 1
#			$Date: 1998/07/15 06:13:03 $
d5 1
a5 1
#			$Date: 1998/07/15 06:13:03 $
d63 2
a64 5
      ltn.latin_configinfo.each{|key,val| conf[key] = val if val != []}
      if conf == {}
	fobj.latin_replace(ltn)
	fobj.latin_configure(keys) if keys
      elsif keys
d79 2
a80 5
      knj.kanji_configinfo.each{|key,val| conf[key] = val if val != []}
      if conf == {}
	fobj.kanji_replace(knj)
	fobj.kanji_configure(keys) if keys
      elsif keys
@


1.1.1.1.4.6
log
@st.c(rehash)
@
text
@d3 1
a3 1
#			$Date: 1998/07/17 05:12:45 $
d5 1
a5 1
#			$Date: 1998/07/17 05:12:45 $
d296 1
a296 1
    tk_tcl2ruby tk_send 'itemcget', tagid(tagOrId), "-#{option}"
d775 1
a775 1
    tk_tcl2ruby tk_send 'cget', option
@


1.1.1.1.4.7
log
@sync ev
@
text
@d3 1
a3 1
#			$Date: 1998/07/21 09:18:02 $
d5 1
a5 1
#			$Date: 1998/07/21 09:18:02 $
d313 1
a313 1
	tk_send 'itemconfigure', tagid(tagOrId), "-#{key}", value
@


1.1.1.1.4.7.2.1
log
@join 1.1c6
@
text
@d3 1
a3 1
#			$Date: 1998/10/06 02:45:15 $
d5 1
a5 1
#			$Date: 1998/10/06 02:45:15 $
d736 3
d743 1
a743 1
    number(tk_call('image', 'width', @@path))
d826 1
a826 1

@


1.1.1.1.4.7.2.2
log
@*** empty log message ***
@
text
@@


1.1.1.1.4.8
log
@1.1c6
@
text
@d3 1
a3 1
#			$Date: 1998/07/29 09:50:50 $
d5 1
a5 1
#			$Date: 1998/07/29 09:50:50 $
d743 1
a743 1
    number(tk_call('image', 'width', @@path))
@


1.1.1.1.4.9
log
@1.1c8
@
text
@d3 1
a3 1
#			$Date: 1998/10/06 02:45:15 $
d5 1
a5 1
#			$Date: 1998/10/06 02:45:15 $
@


