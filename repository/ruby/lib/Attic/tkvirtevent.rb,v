head	1.1;
access;
symbols
	v1_6_3:1.1
	ruby_1_6:1.1.0.4
	v1_1d1:1.1.2.1
	v1_1d0:1.1.2.1
	v1_1c7:1.1.2.1
	v1_1c6:1.1.2.1
	v1_1d-start:1.1.2.1
	v1_1c5:1.1.2.1
	v1_1dev:1.1.2.1.0.2
	v1_1c4:1.1.2.1
	v1_1c3:1.1.2.1
	v1_1c2:1.1.2.1
	v1_1c1:1.1.2.1
	v1_1c0:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	98.07.17.05.16.38;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.07.17.05.16.38;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.11.17.09.12.47;	author matz;	state dead;
branches;
next	;


desc
@@


1.1
log
@file tkvirtevent.rb was initially added on branch v1_1r.
@
text
@@


1.1.2.1
log
@1.1c0 addendum
@
text
@a0 66
#
#   tkvirtevent.rb : treats virtual events
#                     1998/07/16 by Hidetoshi Nagai <nagai@@ai.kyutech.ac.jp>
#
require 'tk'

class TkVirtualEvent<TkObject
  extend Tk

  TkVirturlEventID = [0]
  TkVirturlEventTBL = {}

  def TkVirtualEvent.getobj(event)
    obj = TkVirturlEventTBL[event]
    obj ? obj : event
  end

  def TkVirtualEvent.info
    tk_call('event', 'info').split(/\s+/).filter{|seq|
      TkVirtualEvent.getobj(seq[1..-2])
    }
  end

  def initialize(*sequences)
    @@path = @@id = format("<VirtEvent%.4d>", TkVirturlEventID[0])
    TkVirturlEventID[0] += 1
    add(*sequences)
  end

  def add(*sequences)
    if sequences != []
      tk_call('event', 'add', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = self
    end
    self
  end

  def delete(*sequences)
    if sequences == []
      tk_call('event', 'delete', "<#{@@id}>")
      TkVirturlEventTBL[@@id] = nil
    else
      tk_call('event', 'delete', "<#{@@id}>", 
	      *(sequences.collect{|seq| "<#{tk_event_sequence(seq)}>"}) )
      TkVirturlEventTBL[@@id] = nil if info == []
    end
    self
  end

  def info
    tk_call('event', 'info', "<#{@@id}>").split(/\s+/).filter{|seq|
      l = seq.scan(/<*[^<>]+>*/).filter{|subseq|
	case (subseq)
	when /^<<[^<>]+>>$/
	  TkVirtualEvent.getobj(subseq[1..-2])
	when /^<[^<>]+>$/
	  subseq[1..-2]
	else
	  subseq.split('')
	end
      }.flatten
      (l.size == 1) ? l[0] : l
    }
  end
end
@


1.1.2.2
log
@1.1c8
@
text
@@


