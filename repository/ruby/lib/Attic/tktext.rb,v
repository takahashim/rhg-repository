head	1.2;
access;
symbols
	v1_6_3:1.2
	ruby_1_6:1.2.0.2
	v1_1d1:1.1.1.2.2.10
	v1_1d0:1.1.1.2.2.10
	v1_1c7:1.1.1.2.2.10
	v1_1c6:1.1.1.2.2.10
	v1_1d-start:1.1.1.2.2.10
	v1_1c5:1.1.1.2.2.10
	v1_1dev:1.1.1.2.2.10.0.2
	v1_1c4:1.1.1.2.2.10
	v1_1c3:1.1.1.2.2.10
	v1_1c2:1.1.1.2.2.10
	v1_1c1:1.1.1.2.2.10
	v1_1c0:1.1.1.2.2.9
	v1_1b9_31:1.1.1.2.2.8
	v1_1b9_30:1.1.1.2.2.7
	v1_1b9_28:1.1.1.2.2.5
	v1_1b9_27:1.1.1.2.2.4
	v1_1b9_26:1.1.1.2.2.4
	r1_1b9_25:1.1.1.2.2.3
	r1_1b9_24:1.1.1.2.2.2
	v1_1b9_23:1.1.1.2.2.2
	v1_1b9_22:1.1.1.2.2.2
	v1_1b9_20:1.1.1.2.2.2
	v1_1b9_18:1.1.1.2.2.2
	v1_1b9_16:1.1.1.2.2.2
	v1_1b9_15:1.1.1.2.2.2
	v1_1b9_13:1.1.1.2.2.2
	v1_1b9_12:1.1.1.2.2.2
	v1_1b9_11:1.1.1.2.2.2
	v1_1b9_08:1.1.1.2.2.2
	v1_1b9_07:1.1.1.2.2.2
	r1_1b9:1.1.1.2.2.1
	v1_1b8:1.1.1.2.2.1
	v1_1b7:1.1.1.2.2.1
	v1_1b6:1.1.1.2.2.1
	v1_1r:1.1.1.2.0.2
	v1_1:1.1.1.2
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.2
date	99.08.13.06.09.53;	author matz;	state dead;
branches;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.01.16.12.19.18;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	;

1.1.1.2.2.1
date	98.01.16.12.36.06;	author matz;	state Exp;
branches;
next	1.1.1.2.2.2;

1.1.1.2.2.2
date	98.03.23.09.48.01;	author matz;	state Exp;
branches;
next	1.1.1.2.2.3;

1.1.1.2.2.3
date	98.06.11.10.03.21;	author matz;	state Exp;
branches;
next	1.1.1.2.2.4;

1.1.1.2.2.4
date	98.06.18.07.47.09;	author matz;	state Exp;
branches;
next	1.1.1.2.2.5;

1.1.1.2.2.5
date	98.06.26.09.45.05;	author matz;	state Exp;
branches;
next	1.1.1.2.2.6;

1.1.1.2.2.6
date	98.07.03.07.06.48;	author matz;	state Exp;
branches;
next	1.1.1.2.2.7;

1.1.1.2.2.7
date	98.07.09.08.40.43;	author matz;	state Exp;
branches;
next	1.1.1.2.2.8;

1.1.1.2.2.8
date	98.07.15.06.13.05;	author matz;	state Exp;
branches;
next	1.1.1.2.2.9;

1.1.1.2.2.9
date	98.07.17.05.12.48;	author matz;	state Exp;
branches;
next	1.1.1.2.2.10;

1.1.1.2.2.10
date	98.07.21.09.18.05;	author matz;	state Exp;
branches;
next	1.1.1.2.2.11;

1.1.1.2.2.11
date	98.11.17.09.12.47;	author matz;	state dead;
branches;
next	;


desc
@@


1.2
log
@remove obsolete files
@
text
@#
#		tktext.rb - Tk text classes
#			$Date: 1998/01/16 12:13:07 $
#			by Yukihiro Matsumoto <matz@@caelum.co.jp>

require 'tk.rb'

class TkText<TkTextWin
  include Scrollable
  def create_self
    tk_call 'text', @@path
    @@tags = {}
  end
  def index(index)
    tk_send 'index', index
  end
  def value
    tk_send 'get', "1.0", "end"
  end
  def value= (val)
    tk_send 'delete', "1.0", 'end'
    tk_send 'insert', "1.0", val
  end
  def _addcmd(cmd)
    @@cmdtbl.push id
  end
  def _addtag(name, obj)
    @@tags[name] = obj
  end
  def tag_names
    tk_send('tag', 'names').collect{|elt|
      if not @@tags[elt]
	elt
      else
	@@tags[elt]
      end
    }
  end
  def window_names
    tk_send('window', 'names').collect{|elt|
      if not @@tags[elt]
	elt
      else
	@@tags[elt]
      end
    }
  end

  def destroy
    for t in @@tags
      t.destroy
    end
    super
  end

  def backspace
    self.delete 'insert'
  end

  def compare(idx1, op, idx2)
    bool(tk_send('compare', idx1, op, idx2))
  end

  def debug
    bool(tk_send('debug'))
  end
  def debug=(boolean)
    tk_send 'debug', boolean
  end

  def yview(*what)
    tk_send 'yview', *what
  end
  def yview_pickplace(*what)
    tk_send 'yview', '-pickplace', *what
  end

  def xview(*what)
    tk_send 'xview', *what
  end
  def xview_pickplace(*what)
    tk_send 'xview', '-pickplace', *what
  end
end

class TkTextTag<TkObject
  $tk_text_tag = 'tag0000'
  def initialize(parent, keys=nil)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@id = $tk_text_tag
    $tk_text_tag = $tk_text_tag.succ
    tk_call @@t.path, "tag", "configure", @@id, *hash_kv(keys)
    @@t._addtag id, self
  end
  def id
    return @@id
  end

  def add(*index)
    tk_call @@t.path, 'tag', 'add', @@id, *index
  end

  def configure(keys)
    tk_call @@t.path, 'tag', 'configure', @@id, *hash_kv(keys)
  end

  def bind(seq, cmd=Proc.new)
    id = install_cmd(cmd)
    tk_call @@t, 'tag', 'bind', tag, "<#{seq}>", id
    @@t._addcmd cmd
  end

  def lower(below=None)
    tk_call @@t.path, 'tag', 'lower', below
  end

  def destroy
    tk_call @@t.path, 'tag', 'delete', @@id
  end
end

class TkTextMark<TkObject
  $tk_text_mark = 'mark0000'
  def initialize(parent, index)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@id = $tk_text_mark
    $tk_text_mark = $tk_text_mark.succ
    tk_call @@t.path, 'set', @@id, index
    @@t._addtag id, self
  end
  def id
    return @@id
  end

  def set(where)
    tk_call @@t.path, 'mark', 'unset', @@id, where
  end

  def unset
    tk_call @@t.path, 'mark', 'unset', @@id
  end
  alias destroy unset
end

class TkTextWindow<TkObject
  def initialize(parent, index, *args)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@index = index
    tk_call @@t.path, 'window', 'create', index, *args
  end

  def configure(slot, value)
    tk_call @@t.path, 'window', 'configure', @@index, "-#{slot}", value
  end
end
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#			$Date: 1995/12/07 08:37:10 $
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@*** empty log message ***
@
text
@d134 1
a134 1
    tk_call @@t.path, 'mark', 'set', @@id, index
d142 1
a142 1
    tk_call @@t.path, 'mark', 'set', @@id, where
@


1.1.1.2.2.1
log
@*** empty log message ***
@
text
@d3 1
a3 1
#			$Date: 1998/01/16 04:14:54 $
@


1.1.1.2.2.2
log
@thread_free
@
text
@d3 1
a3 1
#			$Date: 1998/01/16 12:36:06 $
d50 1
a50 1
    @@tags.each_value do |t|
@


1.1.1.2.2.3
log
@1.1b9_25
@
text
@d3 1
a3 1
#			$Date: 1998/03/23 09:48:01 $
d30 2
a31 2
  def tag_names(index=nil)
    tk_split_list(tk_send('tag', 'names', index)).collect{|elt|
a105 4
  def remove(*index)
    tk_call @@t.path, 'tag', 'remove', @@id, *index
  end

d110 3
a112 3
  def bind(seq, cmd=Proc.new, args=nil)
    id = install_bind(cmd, args)
    tk_call @@t, 'tag', 'bind', @@id, "<#{seq}>", id
@


1.1.1.2.2.4
log
@1.1b9_26
@
text
@d3 1
a3 1
#			$Date: 1998/06/11 10:03:21 $
a47 20
  def image_names
    tk_send('image', 'names').collect{|elt|
      if not @@tags[elt]
	elt
      else
	@@tags[elt]
      end
    }
  end

  def set_insert(index)
    tk_send 'mark', 'set', 'insert', index
  end
  def set_current(index)
    tk_send 'mark', 'set', 'current', index
  end

  def insert(index, chars, *tags)
    super index, chars, tags.collect{|x|_get_eval_string(x)}.join(' ')
  end
a70 9
  def bbox(index)
    inf = tk_send('bbox', index)
    (inf == "")?  [0,0,0,0]: inf
  end
  def dlineinfo(index)
    inf = tk_send('dlineinfo', index)
    (inf == "")?  [0,0,0,0,0]: inf
  end

a109 39
  def ranges
    l = tk_split_list(tk_call(@@t.path, 'tag', 'ranges', @@id))
    r = []
    while key=l.shift
      r.push [key, l.shift]
    end
    r
  end

  def nextrange(first, last=nil)
    l = tk_split_list(tk_call(@@t.path, 'tag', 'nextrange', @@id, first, last))
    r = []
    while key=l.shift
      r.push [key, l.shift]
    end
    r
  end

  def prevrange(first, last=nil)
    l = tk_split_list(tk_call(@@t.path, 'tag', 'prevrange', @@id, first, last))
    r = []
    while key=l.shift
      r.push [key, l.shift]
    end
    r
  end

  def [](key)
    cget key
  end

  def []=(key,val)
    configure key, val
  end

  def cget(key)
    tk_call @@t.path, 'tag', 'cget', @@id, "-#{key}"
  end

a112 8
#  def configure(key, value)
#    if value == FALSE
#      value = "0"
#    elsif value.kind_of? Proc
#      value = install_cmd(value)
#    end
#    tk_call @@t.path, 'tag', 'configure', @@id, "-#{key}", value
#  end
d116 1
a116 1
    tk_call @@t.path, 'tag', 'bind', @@id, "<#{seq}>", id
a119 4
  def raise(above=None)
    tk_call @@t.path, 'tag', 'raise', @@id, above
  end

d121 1
a121 1
    tk_call @@t.path, 'tag', 'lower', @@id, below
a128 12
class TkTextTagSel<TkTextTag
  def initialize(parent, keys=nil)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@id = 'sel'
    tk_call @@t.path, "tag", "configure", @@id, *hash_kv(keys)
    @@t._addtag id, self
  end
end

a152 32

  def gravity
    tk_call @@t.path, 'mark', 'gravity', @@id
  end

  def gravity=(direction)
    tk_call @@t.path, 'mark', 'gravity', @@id, direction
  end
end

class TkTextMarkInsert<TkTextMark
  def initialize(parent, index=nil)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@id = 'insert'
    tk_call @@t.path, 'mark', 'set', @@id, index if index
    @@t._addtag id, self
  end
end

class TkTextMarkCurrent<TkTextMark
  def initialize(parent,index=nil)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    @@path = @@id = 'current'
    tk_call @@t.path, 'mark', 'set', @@id, index if index
    @@t._addtag id, self
  end
d156 1
a156 87
  def initialize(parent, index, keys)
    if not parent.kind_of?(TkText)
      fail format("%s need to be TkText", parent.inspect)
    end
    @@t = parent
    if index == 'end'
      @@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', 'end - 1 chars'))
    elsif index.kind_of? TkTextMark
      if tk_call(@@t.path,'index',index.path) == tk_call(@@t.path,'index','end')
	@@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', 'end - 1 chars'))
      else
	@@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', index.path))
      end
    else
      @@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', index))
    end
    @@path.gravity = 'left'
    @@index = @@path.path
    @@id = keys['window']
    if keys['create']
      @@p_create = keys['create']
      if @@p_create.kind_of? Proc
	keys['create'] = install_cmd(proc{@@id = @@p_create.call; @@id.path})
      end
    end
    tk_call @@t.path, 'window', 'create', @@index, *hash_kv(keys)
  end

  def [](slot)
    cget(slot)
  end
  def []=(slot, value)
    configure(slot, value)
  end

  def cget(slot)
    tk_call @@t.path, 'window', 'cget', @@index, "-#{slot}"
  end

  def configure(slot, value)
    @@id = value if slot == 'window'
    if slot == 'create'
      self.create=value
    else
      tk_call @@t.path, 'window', 'configure', @@index, "-#{slot}", value
    end
  end

  def window
    @@id
  end

  def window=(value)
    tk_call @@t.path, 'window', 'configure', @@index, '-window', value
    @@id = value
  end

  def create
    @@p_create
  end

  def create=(value)
    @@p_create = value
    if @@p_create.kind_of? Proc
      value = install_cmd(proc{@@id = @@p_create.call})
    end
    tk_call @@t.path, 'window', 'configure', @@index, '-create', value
  end

  def configinfo(slot = nil)
    if slot
      conf = tk_split_list(tk_call @@t.path, 'window', 'configure', 
			   @@index, "-#{slot}")
      conf[0] = conf[0][1..-1]
      conf
    else
      tk_split_list(tk_call @@t.path, 'window', 'configure', 
		    @@index).collect{|conf|
	conf[0] = conf[0][1..-1]
	conf
      }
    end
  end
end

class TkTextImage<TkObject
  def initialize(parent, index, keys)
d161 2
a162 25
    if index == 'end'
      @@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', 'end - 1 chars'))
    elsif index.kind_of? TkTextMark
      if tk_call(@@t.path,'index',index.path) == tk_call(@@t.path,'index','end')
	@@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', 'end - 1 chars'))
      else
	@@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', index.path))
      end
    else
      @@path = TkTextMark.new(@@t, tk_call(@@t.path, 'index', index))
    end
    @@path.gravity = 'left'
    @@index = @@path.path
    @@id = tk_call(@@t.path, 'image', 'create', @@index, *hash_kv(keys))
  end

  def [](slot)
    cget(slot)
  end
  def []=(slot, value)
    configure(slot, value)
  end

  def cget(slot)
    tk_call @@t.path, 'image', 'cget', @@index, "-#{slot}"
d166 1
a166 24
    tk_call @@t.path, 'image', 'configure', @@index, "-#{slot}", value
  end

  def image
    tk_call @@t.path, 'image', 'configure', @@index, '-image'
  end

  def image=(value)
    tk_call @@t.path, 'image', 'configure', @@index, '-image', value
  end

  def configinfo(slot = nil)
    if slot
      conf = tk_split_list(tk_call @@t.path, 'image', 'configure', 
			   @@index, "-#{slot}")
      conf[0] = conf[0][1..-1]
      conf
    else
      tk_split_list(tk_call @@t.path, 'image', 'configure', 
		    @@index).collect{|conf|
	conf[0] = conf[0][1..-1]
	conf
      }
    end
@


1.1.1.2.2.5
log
@980626
@
text
@d3 1
a3 1
#			$Date: 1998/06/18 07:47:09 $
d149 6
a154 1
    tk_split_list(tk_call(@@t.path, 'tag', 'nextrange', @@id, first, last))
a157 1
    tk_split_list(tk_call(@@t.path, 'tag', 'prevrange', @@id, first, last))
d159 5
d178 2
a179 10
  def configure(key, val=nil)
    if key.kind_of? Hash
      tk_call @@t.path, 'tag', 'configure', @@id, *hash_kv(key)
    else
      tk_call @@t.path, 'tag', 'configure', @@id, "-#{key}", val
    end
  end

  def configinfo
    tk_split_list(tk_call(@@t.path, 'tag', 'configure', @@id))
d181 8
@


1.1.1.2.2.6
log
@1.1b9_29
@
text
@d18 1
a18 1
    tk_send 'get', "1.0", "end - 1 char"
d25 1
a25 1
    @@cmdtbl.push cmd
d30 1
a30 1
  def tag_names(index=None)
a112 162

  def tag_add(tag,index1,index2=None)
    tk_send 'tag', 'add', tag, index1, index2
  end

  def tag_bind(tag, seq, cmd=Proc.new, args=nil)
    seq = context.join("><") if seq.kind_of? Array
    if /,/ =~ seq
      seq = seq.split(/\s*,\s*/).join("><")
    end
    id = install_bind(cmd, args)
    tk_send 'tag', 'bind', tag, "<#{seq}>", id
    # _addcmd cmd
  end

  def tag_bindinfo(tag)
    tk_split_list(tk_send('tag', 'bind', tag)).filter{|seq|
      seq.tr('<>','  ').strip.gsub(/\s+/,',')
    }
  end

  def tag_cget(tag, key)
    tk_call @@t.path, 'tag', 'cget', tag, "-#{key}"
  end

  def tag_configure(tag, key, val=None)
    if key.kind_of? Hash
      tk_send 'tag', 'configure', tag, *hash_kv(key)
    else
      tk_send 'tag', 'configure', tag, "-#{key}", val
    end
  end

  def configinfo(tag, key=nil)
    if key
      conf = tk_split_list(tk_send('tag','configure',tag,"-#{key}"))
      conf[0] = conf[0][1..-1]
      conf
    else
      tk_split_list(tk_send('tag', 'configure', tag)).collect{|conf|
	conf[0] = conf[0][1..-1]
	conf
      }
    end
  end

  def tag_raise(tag, above=None)
    tk_send 'tag', 'raise', tag, above
  end

  def tag_lower(tag, below=None)
    tk_send 'tag', 'lower', tag, below
  end

  def tag_remove(tag, *index)
    tk_send 'tag', 'remove', tag, *index
  end

  def tag_ranges(tag)
    l = tk_split_list(tk_send('tag', 'ranges', tag))
    r = []
    while key=l.shift
      r.push [key, l.shift]
    end
    r
  end

  def tag_nextrange(tag, first, last=None)
    tk_split_list(tk_send('tag', 'nextrange', tag, first, last))
  end

  def tag_prevrange(tag, first, last=None)
    tk_split_list(tk_send('tag', 'prevrange', tag, first, last))
  end

  def search_with_length(pat,start,stop=None)
    pat = pat.char if pat.kind_of? Integer
    if stop != None
      return ["", 0] if compare(start,'>=',stop)
      txt = get(start,stop)
      if (pos = txt.index(pat))
	pos = txt[0..(pos-1)].split('').length if pos > 0
	if pat.kind_of? String
	  return [index(start + " + #{pos} chars"), pat.split('').length]
	else
	  return [index(start + " + #{pos} chars"), $&.split('').length]
	end
      else
	return ["", 0]
      end
    else
      txt = get(start,'end - 1 char')
      if (pos = txt.index(pat))
	pos = txt[0..(pos-1)].split('').length if pos > 0
	if pat.kind_of? String
	  return [index(start + " + #{pos} chars"), pat.split('').length]
	else
	  return [index(start + " + #{pos} chars"), $&.split('').length]
	end
      else
	txt = get('1.0','end - 1 char')
	if (pos = txt.index(pat))
	  pos = txt[0..(pos-1)].split('').length if pos > 0
	  if pat.kind_of? String
	    return [index("1.0 + #{pos} chars"), pat.split('').length]
	  else
	    return [index("1.0 + #{pos} chars"), $&.split('').length]
	  end
	else
	  return ["", 0]
	end
      end
    end
  end

  def search(pat,start,stop=None)
    search_with_length(pat,start,stop)[0]
  end

  def rsearch_with_length(pat,start,stop=None)
    pat = pat.char if pat.kind_of? Integer
    if stop != None
      return ["", 0] if compare(start,'<=',stop)
      txt = get(stop,start)
      if (pos = txt.rindex(pat))
	pos = txt[0..(pos-1)].split('').length if pos > 0
	if pat.kind_of? String
	  return [index(stop + " + #{pos} chars"), pat.split('').length]
	else
	  return [index(stop + " + #{pos} chars"), $&.split('').length]
	end
      else
	return ["", 0]
      end
    else
      txt = get('1.0',start)
      if (pos = txt.rindex(pat))
	pos = txt[0..(pos-1)].split('').length if pos > 0
	if pat.kind_of? String
	  return [index("1.0 + #{pos} chars"), pat.split('').length]
	else
	  return [index("1.0 + #{pos} chars"), $&.split('').length]
	end
      else
	txt = get('1.0','end - 1 char')
	if (pos = txt.rindex(pat))
	  pos = txt[0..(pos-1)].split('').length if pos > 0
	  if pat.kind_of? String
	    return [index("1.0 + #{pos} chars"), pat.split('').length]
	  else
	    return [index("1.0 + #{pos} chars"), $&.split('').length]
	  end
	else
	  return ["", 0]
	end
      end
    end
  end

  def rsearch(pat,start,stop=None)
    rsearch_with_length(pat,start,stop)[0]
  end
d148 1
a148 1
  def nextrange(first, last=None)
d152 1
a152 1
  def prevrange(first, last=None)
d154 1
d169 1
a169 1
  def configure(key, val=None)
d176 3
a178 20
#  def configure(key, value)
#    if value == FALSE
#      value = "0"
#    elsif value.kind_of? Proc
#      value = install_cmd(value)
#    end
#    tk_call @@t.path, 'tag', 'configure', @@id, "-#{key}", value
#  end

  def configinfo(key=nil)
    if key
      conf = tk_split_list(tk_call(@@t.path, 'tag','configure',@@id,"-#{key}"))
      conf[0] = conf[0][1..-1]
      conf
    else
      tk_split_list(tk_call(@@t.path, 'tag', 'configure', @@id)).collect{|conf|
	conf[0] = conf[0][1..-1]
	conf
      }
    end
a181 4
    seq = context.join("><") if seq.kind_of? Array
    if /,/ =~ seq
      seq = seq.split(/\s*,\s*/).join("><")
    end
d184 1
a184 7
    # @@t._addcmd cmd
  end

  def bindinfo
    tk_split_list(tk_call(@@t.path, 'tag', 'bind', @@id)).filter{|seq|
      seq.tr('<>','  ').strip.gsub(/\s+/,',')
    }
d310 4
a313 10
  def configure(slot, value=None)
    if slot.kind_of? Hash
      @@id = slot['window'] if slot['window']
      if slot['create']
	self.create=value
	slot['create']=nil
      end
      if slot.size > 0
	tk_call @@t.path, 'window', 'configure', @@index, *hash_kv(slot)
      end
d315 1
a315 6
      @@id = value if slot == 'window'
      if slot == 'create'
	self.create=value
      else
	tk_call @@t.path, 'window', 'configure', @@index, "-#{slot}", value
      end
d389 2
a390 6
  def configure(slot, value=None)
    if slot.kind_of? Hash
      tk_call @@t.path, 'image', 'configure', @@index, *hash_kv(slot)
    else
      tk_call @@t.path, 'image', 'configure', @@index, "-#{slot}", value
    end
a391 3
#  def configure(slot, value)
#    tk_call @@t.path, 'image', 'configure', @@index, "-#{slot}", value
#  end
@


1.1.1.2.2.7
log
@1.1b9_30
@
text
@d3 1
a3 1
#			$Date: 1998/07/03 07:06:48 $
a8 5
  WidgetClassName = 'Text'.freeze
  TkClassBind::WidgetClassNameTBL[WidgetClassName] = self
  def self.to_eval
    WidgetClassName
  end
d118 5
a122 1
  def _tag_bind_core(mode, tag, seq, cmd=Proc.new, args=nil)
d124 1
a124 1
    tk_send 'tag', 'bind', tag, "<#{tk_event_sequence(seq)}>", mode + id
a126 1
  private :_tag_bind_core
d128 4
a131 23
  def tag_bind(tag, seq, cmd=Proc.new, args=nil)
    _tag_bind_core('', tag, seq, cmd=Proc.new, args=nil)
  end

  def tag_bind_append(tag, seq, cmd=Proc.new, args=nil)
    _tag_bind_core('+', tag, seq, cmd=Proc.new, args=nil)
  end

  def tag_bindinfo(tag, context=nil)
    if context
      (tk_send('tag', 'bind', tag, 
	       "<#{tk_event_sequence(context)}>")).collect{|cmdline|
	if cmdline =~ /^rb_out (c\d+)\s+(.*)$/
	  [Tk_CMDTBL[$1], $2]
	else
	  cmdline
	end
      }
    else
      tk_split_list(tk_send('tag', 'bind', tag)).filter{|seq|
	seq[1..-2].gsub(/></,',')
      }
    end
d360 4
d365 1
a365 1
    tk_call @@t.path, 'tag', 'bind', @@id, "<#{tk_event_sequence(seq)}>", id
d369 4
a372 15
  def bindinfo(context=nil)
    if context
      (tk_call(@@t.path, 'tag', 'bind', @@id, 
	       "<#{tk_event_sequence(context)}>")).collect{|cmdline|
	if cmdline =~ /^rb_out (c\d+)\s+(.*)$/
	  [Tk_CMDTBL[$1], $2]
	else
	  cmdline
	end
      }
    else
      tk_split_list(tk_call(@@t.path, 'tag', 'bind', @@id)).filter{|seq|
	seq[1..-2].gsub(/></,',')
      }
    end
@


1.1.1.2.2.8
log
@1.1b9_31
@
text
@d3 1
a3 1
#			$Date: 1998/07/09 08:40:43 $
a6 114
require 'tkfont'

module TkTreatTextTagFont
  def tagfont_configinfo(tag)
    if tag.kind_of? TkTextTag
      pathname = self.path + ';' + tag.id
    else
      pathname = self.path + ';' + tag
    end
    ret = TkFont.used_on(pathname)
    if ret == nil
      ret = TkFont.init_widget_font(pathname, 
				    self.path, 'tag', 'configure', tag)
    end
    ret
  end
  alias tagfontobj tagfont_configinfo

  def tagfont_configure(tag, slot)
    if tag.kind_of? TkTextTag
      pathname = self.path + ';' + tag.id
    else
      pathname = self.path + ';' + tag
    end
    if (fnt = slot['font'])
      slot['font'] = nil
      if fnt.kind_of? TkFont
	return fnt.call_font_configure(pathname, 
				       self.path,'tag','configure',tag,slot)
      else
	latintagfont_configure(tag, fnt) if fnt
      end
    end
    if (ltn = slot['latinfont'])
      slot['latinfont'] = nil
      latintagfont_configure(tag, ltn) if ltn
    end
    if (ltn = slot['asciifont'])
      slot['asciifont'] = nil
      latintagfont_configure(tag, ltn) if ltn
    end
    if (knj = slot['kanjifont'])
      slot['kanjifont'] = nil
      kanjitagfont_configure(tag, knj) if knj
    end

    tk_call(self.path, 'tag', 'configure', tag, *hash_kv(slot)) if slot != {}
    self
  end

  def latintagfont_configure(tag, ltn, keys=nil)
    fobj = tagfontobj(tag)
    if ltn.kind_of? TkFont
      conf = {}
      ltn.latin_configinfo.each{|key,val| conf[key] = val}
      if keys
	fobj.latin_configure(conf.update(keys))
      else
	fobj.latin_configure(conf)
      end
    else
      fobj.latin_replace(ltn)
    end
  end
  alias asciitagfont_configure latintagfont_configure

  def kanjitagfont_configure(tag, knj, keys=nil)
    fobj = tagfontobj(tag)
    if knj.kind_of? TkFont
      conf = {}
      knj.kanji_configinfo.each{|key,val| conf[key] = val}
      if keys
	fobj.kanji_configure(conf.update(keys))
      else
	fobj.kanji_configure(conf)
      end
    else
      fobj.kanji_replace(knj)
    end
  end

  def tagfont_copy(tag, window, wintag=nil)
    if wintag
      window.tagfontobj(wintag).configinfo.each{|key,value|
	tagfontobj(tag).configure(key,value)
      }
      tagfontobj(tag).replace(window.tagfontobj(wintag).latin_font, 
			      window.tagfontobj(wintag).kanji_font)
    else
      window.tagfont(tag).configinfo.each{|key,value|
	tagfontobj(tag).configure(key,value)
      }
      tagfontobj(tag).replace(window.fontobj.latin_font, 
			      window.fontobj.kanji_font)
    end
  end

  def latintagfont_copy(tag, window, wintag=nil)
    if wintag
      tagfontobj(tag).latin_replace(window.tagfontobj(wintag).latin_font)
    else
      tagfontobj(tag).latin_replace(window.fontobj.latin_font)
    end
  end
  alias asciitagfont_copy latintagfont_copy

  def kanjitagfont_copy(tag, window, wintag=nil)
    if wintag
      tagfontobj(tag).kanji_replace(window.tagfontobj(wintag).kanji_font)
    else
      tagfontobj(tag).kanji_replace(window.fontobj.kanji_font)
    end
  end
end
a8 2
  include TkTreatTextTagFont

a34 9

  def tagid2obj(tagid)
    if not @@tags[tagid]
      tagid
    else
      @@tags[tagid]
    end
  end

d37 5
a41 1
      tagid2obj(elt)
d46 5
a50 1
      tagid2obj(elt)
d55 5
a59 1
      tagid2obj(elt)
d161 1
a161 7
      if ( key['font'] || key['kanjifont'] \
	  || key['latinfont'] || key['asciifont'] )
	tagfont_configure(tag, key.dup)
      else
	tk_send 'tag', 'configure', tag, *hash_kv(key)
      end

d163 1
a163 6
      if ( key == 'font' || key == 'kanjifont' \
	  || key == 'latinfont' || key == 'asciifont' )
	tagfont_configure({key=>val})
      else
	tk_call 'tag', 'configure', tag, "-#{key}", val
      end
d167 1
a167 1
  def tag_configinfo(tag, key=nil)
a298 2
  include TkTreatTagFont

d304 1
a304 1
    @@parent = @@t = parent
d307 1
a307 2
    #tk_call @@t.path, "tag", "configure", @@id, *hash_kv(keys)
    configure(keys) if keys
a313 8
  def first
    @@id + '.first'
  end

  def last
    @@id + '.last'
  end

d352 5
a356 1
    @@t.tag_configure @@id, key, val
a357 7
#  def configure(key, val=None)
#    if key.kind_of? Hash
#      tk_call @@t.path, 'tag', 'configure', @@id, *hash_kv(key)
#    else
#      tk_call @@t.path, 'tag', 'configure', @@id, "-#{key}", val
#    end
#  end
d368 10
a377 1
    @@t.tag_configinfo @@id, key
a378 12
#  def configinfo(key=nil)
#    if key
#      conf = tk_split_list(tk_call(@@t.path, 'tag','configure',@@id,"-#{key}"))
#      conf[0] = conf[0][1..-1]
#      conf
#    else
#      tk_split_list(tk_call(@@t.path, 'tag', 'configure', @@id)).collect{|conf|
#	conf[0] = conf[0][1..-1]
#	conf
#      }
#    end
#  end
d423 1
a423 2
    #tk_call @@t.path, "tag", "configure", @@id, *hash_kv(keys)
    configure(keys) if keys
@


1.1.1.2.2.9
log
@1.1c0
@
text
@d3 1
a3 1
#			$Date: 1998/07/15 06:13:05 $
d61 2
a62 5
      ltn.latin_configinfo.each{|key,val| conf[key] = val if val != []}
      if conf == {}
	fobj.latin_replace(ltn)
	fobj.latin_configure(keys) if keys
      elsif keys
d77 2
a78 5
      knj.kanji_configinfo.each{|key,val| conf[key] = val if val != []}
      if conf == {}
	fobj.kanji_replace(knj)
	fobj.kanji_configure(keys) if keys
      elsif keys
@


1.1.1.2.2.10
log
@st.c(rehash)
@
text
@d3 1
a3 1
#			$Date: 1998/07/17 05:12:48 $
d102 1
a102 1
      window.tagfont(wintag).configinfo.each{|key,value|
d275 1
a275 1
    tk_tcl2ruby tk_call @@t.path, 'tag', 'cget', tag, "-#{key}"
d489 1
a489 1
    tk_tcl2ruby tk_call @@t.path, 'tag', 'cget', @@id, "-#{key}"
d671 1
a671 1
    tk_tcl2ruby tk_call @@t.path, 'window', 'cget', @@index, "-#{slot}"
d761 1
a761 1
    tk_tcl2ruby tk_call @@t.path, 'image', 'cget', @@index, "-#{slot}"
@


1.1.1.2.2.11
log
@1.1c8
@
text
@d3 1
a3 1
#			$Date: 1998/07/21 09:18:05 $
@


