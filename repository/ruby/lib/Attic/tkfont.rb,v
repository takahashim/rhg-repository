head	1.1;
access;
symbols
	v1_6_3:1.1
	ruby_1_6:1.1.0.4
	v1_1d1:1.1.2.5
	v1_1d0:1.1.2.5
	v1_1c7:1.1.2.5
	v1_1c6:1.1.2.5
	v1_1d-start:1.1.2.5
	v1_1c5:1.1.2.5
	v1_1dev:1.1.2.5.0.2
	v1_1c4:1.1.2.5
	v1_1c3:1.1.2.5
	v1_1c2:1.1.2.5
	v1_1c1:1.1.2.4
	v1_1c0:1.1.2.3
	v1_1b9_31:1.1.2.2
	v1_1b9_30:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	98.07.09.08.40.42;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	98.07.09.08.40.42;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.07.15.06.13.04;	author matz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	98.07.17.05.12.47;	author matz;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	98.07.21.09.18.04;	author matz;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	98.07.29.09.50.52;	author matz;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	98.11.17.09.12.46;	author matz;	state dead;
branches;
next	;


desc
@@


1.1
log
@file tkfont.rb was initially added on branch v1_1r.
@
text
@@


1.1.2.1
log
@1.1b9_30
@
text
@a0 556
class TkFont
  include Tk
  extend TkCore

  Tk_FontID = [0]
  Tk_FontNameTBL = {}
  Tk_FontUseTBL = {}

  DEFAULT_LATIN_FONT_NAME = 'a14'.freeze
  DEFAULT_KANJI_FONT_NAME = 'k14'.freeze

  ###################################
  # class methods
  ###################################
  def TkFont.families(window=nil)
    case (Tk::TK_VERSION)
    when /^4.*/
      ['fixed']

    when /^8.*/
      if window
	list(tk_call('font', 'families', '-displayof', window))
      else
	list(tk_call('font', 'families'))
      end
    end
  end

  def TkFont.names
    r = []
    case (Tk::TK_VERSION)
    when /^4.*/
      r += ['fixed', 'a14', 'k14']
      Tk_FontNameTBL.each_value{|obj| r.push(obj)}
    when /^8.*/
      list(tk_call('font', 'names')).each{|f|
	if f =~ /^(@@font[0-9]+)(c|l|k)$/
	  r.push(Tk_FontNameTBL[$1]) if $2 == 'c'
	else
	  r.push(f)
	end
      }
    end
    r
  end

  ###################################
  private
  ###################################
  def initialize(ltn=nil, knj=nil, keys=nil)
    @@id = format("@@font%.4d", Tk_FontID[0])
    Tk_FontID[0] += 1
    Tk_FontNameTBL[@@id] = self

    ltn = DEFAULT_LATIN_FONT_NAME unless ltn
    create_latinfont(ltn)

    knj = DEFAULT_KANJI_FONT_NAME unless knj
    create_kanjifont(knj)

    create_compoundfont(keys)
  end

  def _get_font_info_from_hash(font)
    foundry  = (info = font['foundry'] .to_s)?  info: '*'
    family   = (info = font['family']  .to_s)?  info: '*'
    weight   = (info = font['weight']  .to_s)?  info: '*'
    slant    = (info = font['slant']   .to_s)?  info: '*'
    swidth   = (info = font['swidth']  .to_s)?  info: '*'
    adstyle  = (info = font['adstyle'] .to_s)?  info: '*'
    pixels   = (info = font['pixels']  .to_s)?  info: '*'
    points   = (info = font['points']  .to_s)?  info: '*'
    resx     = (info = font['resx']    .to_s)?  info: '*'
    resy     = (info = font['resy']    .to_s)?  info: '*'
    space    = (info = font['space']   .to_s)?  info: '*'
    avgWidth = (info = font['avgWidth'].to_s)?  info: '*'
    charset  = (info = font['charset'] .to_s)?  info: '*'
    encoding = (info = font['encoding'].to_s)?  info: '*'

    Array([foundry, family, weight, slant, swidth, adstyle, 
	    pixels, points, resx, resy, space, avgWidth, charset, encoding])
  end

  def create_latinfont_tk4x(font=nil)
    if font.kind_of? Hash
      @@latinfont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1] && font[1] != '0' && font[1] =~ /^(|\+|-)([0-9]+)$/
	if $1 == '-'
	  finfo['pixels'] = font[1].to_s
	else
	  finfo['points'] = font[1].to_s
	end
      end
      finfo[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@latinfont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@latinfont = font.latin_font

    else
      @@latinfont = font

    end
  end

  def create_kanjifont_tk4x(font=nil)
    if font.kind_of? Hash
      @@kanjifont = '-' + _get_font_info_from_hash(font).join('-') + '-'

    elsif font.kind_of? Array
      finfo = {}
      finfo['family'] = font[0].to_s
      if font[1] && font[1] != '0' && font[1] =~ /^(|\+|-)([0-9]+)$/
	if $1 == '-'
	  finfo['pixels'] = $2
	else
	  finfo['points'] = $2
	end
      else
	finfo['points'] = '13'
      end
      finfo[2..-1].each{|style|
	case (style)
	when 'normal'
	  finfo['weight'] = style
	when 'bold'
	  finfo['weight'] = style
	when 'roman'
	  finfo['slant'] = 'r'
	when 'italic'
	  finfo['slant'] = 'i'
	end
      }

      @@kanjifont = '-' + _get_font_info_from_hash(finfo).join('-') + '-'

    elsif font.kind_of? TkFont
      @@kanjifont = font.kanji_font

    else
      @@kanjifont = font

    end
  end

  def create_compoundfont_tk4x(keys)
    @@compoundfont = [[@@latinfont], [@@kanjifont]]
    @@fontslot = {'font'=>@@latinfont, 'kanjifont'=>@@kanjifont}
  end

  def create_latinfont_tk80(font=nil)
    @@latinfont = @@id + 'l'

    if font.kind_of? Hash
      tk_call('font', 'create', @@latinfont, *hash_kv(font))
    elsif font.kind_of? Array
      tk_call('font', 'create', @@latinfont, '-copy', array2tk_list(font))
    elsif font.kind_of? TkFont
      tk_call('font', 'create', @@latinfont, '-copy', font.latin_font)
    else
      tk_call('font', 'create', @@latinfont, '-copy', font)
    end
  end

  def create_kanjifont_tk80(font=nil)
    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      if font['charset']
	tk_call('font', 'create', @@kanjifont, *hash_kv(font))
      else
	tk_call('font', 'create', @@kanjifont, 
		'-charset', 'jisx0208.1983', *hash_kv(font))
      end
    elsif font.kind_of? Array
      tk_call('font', 'create', @@kanjifont, '-copy', array2tk_list(font))
      tk_call('font', 'configure', @@kanjifont, '-charset', 'jisx0208.1983')

    elsif font.kind_of? TkFont
      tk_call('font', 'create', @@kanjifont, '-copy', font.kanji_font)

    else
      tk_call('font', 'create', @@kanjifont, '-copy', font, 
	      '-charset', 'jisx0208.1983')

    end
  end

  def create_compoundfont_tk80(keys)
    @@compoundfont = @@id + 'c'
    @@fontslot = {'font'=>@@compoundfont}
    tk_call('font', 'create', @@compoundfont, 
	    '-compound', "#{@@latinfont} #{@@kanjifont}", *hash_kv(keys))
  end

  def set_font_core_tk4x(window)
    Tk_FontUseTBL[window.path] = @@id
    window.configure(@@fontslot)
  end

  def set_font_core_tk80(window)
    window.configure(@@fontslot)
  end

  def actual_core_tk4x(font, window=nil, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def actual_core_tk80(font, window=nil, option=nil)
    if option == 'compound'
      ""
    elsif option
      if window
	tk_call('font', 'actual', font, "-#{option}")
      else
	tk_call('font', 'actual', font, "-displayof", window, "-#{option}")
      end
    else
      l = tk_split_list(if window
			  tk_call('font', 'actual', font, "-displayof", window)
			else
			  tk_call('font', 'actual', font)
			end)
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def configure_core_tk4x(font, slot, value=None)
    ""
  end

  def configinfo_core_tk4x(font, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
	      ['underline',[]], ['overstrike',[]], ['charset',[]], 
	      ['pointadjust',[]] ])
    end
  end

  def configure_core_tk80(font, slot, value=None)
    if slot.kind_of? Hash
      tk_call 'font', 'configure', font, *hash_kv(slot)
    else
      tk_call 'font', 'configure', font, "-#{slot}", value
    end
  end

  def configinfo_core_tk80(font, option=nil)
    if option == 'compound'
      ""
    elsif option
      tk_call('font', 'configure', font, "-#{option}")
    else
      l = tk_split_list(tk_call('font', 'configure', font))
      r = []
      while key=l.shift
	if key == '-compound'
	  l.shift
	else
	  r.push [key[1..-1], l.shift]
	end
      end
      r
    end
  end

  def latin_replace_core_tk4x(ltn)
    create_latinfont_tk4x(ltn)
    @@compoundfont[0] = [@@latinfont]
    @@fontslot['font'] = @@latinfont
    Tk_FontUseTBL.dup.each{|w, id|
      if id == @@id
	begin
	  w.configure('font', @@latinfont)
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def kanji_replace_core_tk4x(knj)
    create_kanjifont_tk4x(knj)
    @@compoundfont[1] = [@@kanjifont]
    @@fontslot['kanjifont'] = @@kanjifont
    Tk_FontUseTBL.dup.each{|w, id|
      if id == @@id
	begin
	  w.configure('kanjifont', @@kanjifont)
	rescue
	  Tk_FontUseTBL[w] = nil
	end
      end
    }
    self
  end

  def latin_replace_core_tk80(ltn)
    tk_call('font', 'delete', @@latinfont)
    create_latinfont_tk80(ltn)
    self
  end

  def kanji_replace_core_tk80(knj)
    tk_call('font', 'delete', @@kanjifont)
    create_kanjifont_tk80(knj)
    self
  end

  def measure_core_tk4x(window, text)
    0
  end

  def measure_core_tk80(window, text)
    if window
      number(tk_call('font', 'measure', @@compoundfont, 
		     '-displayof', window, text))
    else
      number(tk_call('font', 'measure', @@compoundfont, text))
    end
  end

  def metrics_core_tk4x(font, window, option=nil)
    # dummy
    if option
      ""
    else
      Array([ ['ascent',[]], ['descent',[]], ['linespace',[]], ['fixed',[]] ])
    end
  end

  def metrics_core_tk80(font, window, option=nil)
    if option
      if window
	number(tk_call('font', 'metrics', font, "-#{option}"))
      else
	number(tk_call('font', 'metrics', font, 
		       "-displayof", window, "-#{option}"))
      end
    else
      l = tk_split_list(if window
			  tk_call('font','metrics',font,"-displayof",window)
			else
			  tk_call('font','metrics',font)
			end)
      r = []
      while key=l.shift
	r.push [key[1..-1], l.shift.to_i]
      end
      r
    end
  end

  ###################################
  # private alias
  ###################################
  case (Tk::TK_VERSION)
  when /^4.*/
    alias create_latinfont    create_latinfont_tk4x
    alias create_kanjifont    create_kanjifont_tk4x
    alias create_compoundfont create_compoundfont_tk4x
    alias set_font_core       set_font_core_tk4x
    alias actual_core         actual_core_tk4x
    alias configure_core      configure_core_tk4x
    alias configinfo_core     configinfo_core_tk4x
    alias latin_replace_core  latin_replace_core_tk4x
    alias kanji_replace_core  kanji_replace_core_tk4x
    alias measure_core        measure_core_tk4x
    alias metrics_core        metrics_core_tk4x

  when /^8\.0/
    alias create_latinfont    create_latinfont_tk80
    alias create_kanjifont    create_kanjifont_tk80
    alias create_compoundfont create_compoundfont_tk80
    alias set_font_core       set_font_core_tk80
    alias actual_core         actual_core_tk80
    alias configure_core      configure_core_tk80
    alias configinfo_core     configinfo_core_tk80
    alias latin_replace_core  latin_replace_core_tk80
    alias kanji_replace_core  kanji_replace_core_tk80
    alias measure_core        measure_core_tk80
    alias metrics_core        metrics_core_tk80

  end

  ###################################
  public
  ###################################
  def set_font(window)
    set_font_core(window)
  end

  def latin_font
    @@latinfont
  end

  def kanji_font
    @@kanjifont
  end

  def actual(option=nil)
    actual_core(@@compoundfont, nil, option)
  end

  def actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@compoundfont, window, option)
  end

  def latin_actual(option=nil)
    actual_core(@@latinfont, nil, option)
  end

  def latin_actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@latinfont, window, option)
  end

  def kanji_actual(option=nil)
    actual_core(@@kanjifont, nil, option)
  end

  def kanji_actual_displayof(window, option=nil)
    window = '.' unless window
    actual_core(@@kanjifont, window, option)
  end

  def [](slot)
    configinfo slot
  end

  def []=(slot, val)
    configure slot, val
  end

  def configure(slot, value=None)
    configure_core(@@compoundfont, slot, value)
  end

  def configinfo(slot=nil)
    configinfo_core(@@compoundfont, slot)
  end

  def latin_configure(slot, value=None)
    configure_core(@@latinfont, slot, value)
  end

  def latin_configinfo(slot=nil)
    configinfo_core(@@latinfont, slot)
  end

  def kanji_configure(slot, value=None)
    configure_core(@@kanjifont, slot, value)
  end

  def kanji_configinfo(slot=nil)
    configinfo_core(@@kanjifont, slot)
  end

  def replace(ltn, knj)
    latin_replace(ltn)
    kanji_replace(ltn)
  end

  def latin_replace(ltn)
    latin_replace_core(ltn)
  end

  def kanji_replace(knj)
    kanji_replace_core(knj)
  end

  def measure(text)
    measure_core(nil, text)
  end

  def measure_displayof(window, text)
    window = '.' unless window
    measure_core(window, text)
  end

  def metrics(option=nil)
    metrics_core(@@compoundfont, nil, option)
  end

  def metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@compoundfont, window, option)
  end

  def latin_metrics(option=nil)
    metrics_core(@@latinfont, nil, option)
  end

  def latin_metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@latinfont, window, option)
  end

  def kanji_metrics(option=nil)
    metrics_core(@@kanjifont, nil, option)
  end

  def kanji_metrics_displayof(window, option=nil)
    window = '.' unless window
    metrics_core(@@kanjifont, window, option)
  end

  ###################################
  # public alias
  ###################################
  alias ascii_font             latin_font
  alias create_asciifont       create_latinfont
  alias ascii_actual           latin_actual
  alias ascii_actual_displayof latin_actual_displayof
  alias ascii_configure        latin_configure
  alias ascii_configinfo       latin_configinfo
  alias ascii_replace          latin_replace
  alias ascii_metrics          latin_metrics

end
@


1.1.2.2
log
@1.1b9_31
@
text
@a0 7
#
#  tkfont.rb - the class to treat fonts on Ruby/Tk
#
#                               by  Hidetoshi NAGAI (nagai@@ai.kyutech.ac.jp)
#
require 'tk'

d17 1
a17 1
    when /^4\.*/
d20 1
a20 1
    when /^8\.*/
d30 1
d32 2
a33 3
    when /^4\.*/
      r = ['fixed']
      r += ['a14', 'k14'] if JAPANIZED_TK
d35 4
a38 44
      r | []

    when /^8\.*/
      list(tk_call('font', 'names'))

    end
  end

  def TkFont.create_copy(font)
    keys = {}
    font.configure.each{|key,value| keys[key] = value }
    new_font = TkFont.new(font.latin_font, font.kanji_font, keys)
  end

  def TkFont.get_obj(name)
    if name =~ /^(@@font[0-9]+)(|c|l|k)$/
      Tk_FontNameTBL[$1]
    else
      nil
    end
  end

  def TkFont.init_widget_font(path, *args)
    case (Tk::TK_VERSION)
    when /^4\.*/
      conf = tk_split_list(tk_call(*args))
      ltn = conf.assoc('font')[4]
      ltn = nil if ltn == []
      knj = conf.assoc('kanjifont')[4]
      knj = nil if knj == []
      TkFont.new(ltn, knj).call_font_configure(path, *args)

    when /^8\.*/
      fnt = tk_split_list(tk_call(*(args + ['-font'])))[4]
      if fnt == []
	TkFont.new(nil, nil).call_font_configure(path, *(args + [{}]))
      else
	compound = Hash[*list(tk_call('font', 'configure', 
				      fnt))].collect{|key,value|
	  [key[1..-1], value]
	}.assoc('compound')[1]
	if compound == []
	  TkFont.new(fnt, DEFAULT_KANJI_FONT_NAME) \
	  .call_font_configure(path, *(args + [{}]))
d40 1
a40 2
	  TkFont.new(compound[0], compound[1]) \
	  .call_font_configure(path, *(args + [{}]))
d42 1
a42 9
      end
    end
  end

  def TkFont.used_on(path=nil)
    if path
      Tk_FontUseTBL[path]
    else
      Tk_FontUseTBL.values | []
d44 1
d84 1
a84 1
  def create_latinfont_tk4x(font)
d122 1
a122 6
  def create_kanjifont_tk4x(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

d163 2
a164 7
    if JAPANIZED_TK
      @@compoundfont = [[@@latinfont], [@@kanjifont]]
      @@fontslot = {'font'=>@@latinfont, 'kanjifont'=>@@kanjifont}
    else
      @@compoundfont = @@latinfont
      @@fontslot = {'font'=>@@latinfont}
    end
d167 1
a167 1
  def create_latinfont_tk8x(font)
d170 6
a175 10
    if JAPANIZED_TK
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      elsif font.kind_of? Array
	tk_call('font', 'create', @@latinfont, '-copy', array2tk_list(font))
      elsif font.kind_of? TkFont
	tk_call('font', 'create', @@latinfont, '-copy', font.latin_font)
      else
	tk_call('font', 'create', @@latinfont, '-copy', font)
      end
d177 1
a177 13
      if font.kind_of? Hash
	tk_call('font', 'create', @@latinfont, *hash_kv(font))
      else
	keys = {}
	if font.kind_of? Array
	  actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
	elsif font.kind_of? TkFont
	  actual_core(font.latin_font).each{|key,val| keys[key] = val}
	else
	  actual_core(font).each{|key,val| keys[key] = val}
	end
	tk_call('font', 'create', @@latinfont, *hash_kv(keys))
      end
d181 1
a181 6
  def create_kanjifont_tk80(font)
    unless JAPANIZED_TK
      @@kanjifont = ""
      return
    end

a204 25
  def create_kanjifont_tk81(font)
    @@kanjifont = @@id + 'k'

    if font.kind_of? Hash
      tk_call('font', 'create', @@kanjifont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.kanji_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'create', @@kanjifont, *hash_kv(keys))
    end

    keys = {}
    actual_core(@@kanjifont).each{|key,val| keys[key] = val}
    begin
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    rescue
    end
  end

d207 3
a209 18
    if JAPANIZED_TK
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'create', @@compoundfont, 
	      '-compound', "#{@@latinfont} #{@@kanjifont}", *hash_kv(keys))
    else
      tk_call('font', 'create', @@compoundfont)
      latinkeys = {}
      begin
	actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
      rescue
	latinkeys {}
      end
      if latinkeys != {}
	tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
      end
      @@fontslot = {'font'=>@@compoundfont}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
d212 4
a215 23
  def create_compoundfont_tk81(keys)
    @@compoundfont = @@id + 'c'
    tk_call('font', 'create', @@compoundfont)

    latinkeys = {}
    begin
      actual_core(@@latinfont).each{|key,val| latinkeys[key] = val}
    rescue
      latinkeys {}
    end
    if latinkeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(latinkeys))
    end

    kanjikeys = {}
    begin
      actual_core(@@kanjifont).each{|key,val| kanjikeys[key] = val}
    rescue
      kanjikeys {}
    end
    if kanjikeys != {}
      tk_call('font', 'configure', @@compoundfont, *hash_kv(kanjikeys))
    end
d217 2
a218 2
    @@fontslot = {'font'=>@@compoundfont}
    tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
d232 1
a232 1
  def actual_core_tk8x(font, window=nil, option=nil)
d274 1
a274 1
  def configure_core_tk8x(font, slot, value=None)
d282 1
a282 1
  def configinfo_core_tk8x(font, option=nil)
d303 1
a303 1
    @@compoundfont[0] = [@@latinfont] if JAPANIZED_TK
d305 2
a306 2
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
d308 1
a308 7
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
	    winobj.tagfont_configure(tag, {'font'=>@@latinfont})
	  else
	    tk_tcl2ruby(w).configure('font', @@latinfont)
	  end
a317 2
    return self unless JAPANIZED_TK

d321 2
a322 2
    Tk_FontUseTBL.dup.each{|w, fobj|
      if self == fobj
d324 1
a324 7
	  if w.include?(';')
	    win, tag = w.split(';')
	    winobj = tk_tcl2ruby(win)
	    winobj.tagfont_configure(tag, {'kanjifont'=>@@kanjifont})
	  else
	    tk_tcl2ruby(w).configure('kanjifont', @@kanjifont)
	  end
d333 1
a333 1
  def latin_replace_core_tk8x(ltn)
d335 1
a335 1
    create_latinfont(ltn)
a339 2
    return self unless JAPANIZED_TK

d341 1
a341 18
    create_kanjifont(knj)
    self
  end

  def kanji_replace_core_tk81(knj)
    if font.kind_of? Hash
      tk_call('font', 'configure', @@compoundfont, *hash_kv(font))
    else
      keys = {}
      if font.kind_of? Array
	actual_core(array2tk_list(font)).each{|key,val| keys[key] = val}
      elsif font.kind_of? TkFont
	actual_core(font.latin_font).each{|key,val| keys[key] = val}
      else
	actual_core(font).each{|key,val| keys[key] = val}
      end
      tk_call('font', 'configure', @@compoundfont, *hash_kv(keys))
    end
d349 1
a349 1
  def measure_core_tk8x(window, text)
d367 1
a367 1
  def metrics_core_tk8x(font, window, option=nil)
d393 1
a393 1
  when /^4\.*/
d397 1
d407 1
a407 1
    alias create_latinfont    create_latinfont_tk8x
d410 5
a414 4
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
d416 2
a417 14
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x

  when /^8\.1/
    alias create_latinfont    create_latinfont_tk8x
    alias create_kanjifont    create_kanjifont_tk81
    alias create_compoundfont create_compoundfont_tk81
    alias actual_core         actual_core_tk8x
    alias configure_core      configure_core_tk8x
    alias configinfo_core     configinfo_core_tk8x
    alias latin_replace_core  latin_replace_core_tk8x
    alias kanji_replace_core  kanji_replace_core_tk81
    alias measure_core        measure_core_tk8x
    alias metrics_core        metrics_core_tk8x
d424 2
a425 43
  def call_font_configure(path, *args)
    args += hash_kv(args.pop.update(@@fontslot))
    tk_call *args
    Tk_FontUseTBL[path] = self
    self
  end

  def used
    ret = []
    Tk_FontUseTBL.each{|key,value|
      if key.include?(';')
	win, tag = key.split(';')
	winobj = tk_tcl2ruby(win)
	if winobj.kind_of? TkText
	  ret.push([winobj, winobj.tagid2obj(tag)])
	elsif winobj.kind_of? TkCanvas
	  if (tagobj = TkcTag.id2obj(tag)).kind_of? TkcTag
	    ret.push([winobj, tagobj])
	  elsif (tagobj = TkcItem.id2obj(tag)).kind_of? TkcItem
	    ret.push([winobj, tagobj])
	  else
	    ret.push([winobj, tag])
	  end
	else
	  ret.push([win, tag])
	end
      else
	ret.push(tk_tcl2ruby(key)) if value == self
      end
    }
    ret
  end

  def id
    @@id
  end

  def to_eval
    font
  end

  def font
    @@compoundfont
d455 1
a455 6
    #if JAPANIZED_TK
    if @@kanjifont != ""
      actual_core(@@kanjifont, nil, option)
    else
      actual_core_tk4x(nil, nil, option)
    end
d459 2
a460 7
    #if JAPANIZED_TK
    if @@kanjifont != ""
      window = '.' unless window
      actual_core(@@kanjifont, window, option)
    else
      actual_core_tk4x(nil, window, option)
    end
d480 1
a480 5
    if JAPANIZED_TK
      configure_core(@@latinfont, slot, value)
    else
      configure(slot, value)
    end
d484 1
a484 5
    if JAPANIZED_TK
      configinfo_core(@@latinfont, slot)
    else
      configure(slot, value)
    end
d488 1
a488 7
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configure_core(@@kanjifont, slot, value)
    else
      #""
      configure(slot, value)
    end
d492 1
a492 7
    #if JAPANIZED_TK
    if @@kanjifont != ""
      configinfo_core(@@kanjifont, slot)
    else
      #[]
      configinfo(slot)
    end
d497 1
a497 2
    kanji_replace(knj)
    self
d536 1
a536 5
    if JAPANIZED_TK
      metrics_core(@@kanjifont, nil, option)
    else
      metrics_core_tk4x(nil, nil, option)
    end
d540 2
a541 6
    if JAPANIZED_TK
      window = '.' unless window
      metrics_core(@@kanjifont, window, option)
    else
      metrics_core_tk4x(nil, window, option)
    end
a555 33
end

module TkTreatTagFont
  def font_configinfo
    @@parent.tagfont_configinfo(@@id)
  end
  alias font font_configinfo

  def font_configure(slot)
    @@parent.tagfont_configure(@@id, slot)
  end

  def latinfont_configure(ltn, keys=nil)
    @@parent.latintagfont_configure(@@id, ltn, keys)
  end
  alias asciifont_configure latinfont_configure

  def kanjifont_configure(knj, keys=nil)
    @@parent.kanjitagfont_configure(@@id, ltn, keys)
  end

  def font_copy(window, wintag=nil)
    @@parent.tagfont_copy(@@id, window, wintag)
  end

  def latinfont_copy(window, wintag=nil)
    @@parent.latintagfont_copy(@@id, window, wintag)
  end
  alias asciifont_copy latinfont_copy

  def kanjifont_copy(window, wintag=nil)
    @@parent.kanjitagfont_copy(@@id, window, wintag)
  end
@


1.1.2.3
log
@1.1c0
@
text
@d68 5
a72 14
      if font_inf = conf.assoc('-font')
	ltn = font_inf[4]
	ltn = nil if ltn == []
      else 
	#ltn = nil
	raise RuntimeError, "unknown option '-font'"
      end
      if font_inf = conf.assoc('-kanjifont')
	knj = font_inf[4]
	knj = nil if knj == []
      else
	knj = nil
      end
      TkFont.new(ltn, knj).call_font_configure(path, *(args + [{}]))
d75 1
a75 5
      conf = tk_split_list(tk_call(*args))
      unless font_inf = conf.assoc('-font')
	raise RuntimeError, "unknown option '-font'"
      end
      fnt = font_inf[4]
a445 22
  def delete_core_tk4x
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

  def delete_core_tk8x
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
    begin
      tk_call('font', 'delete', @@compoundfont)
    rescue
    end
    Tk_FontNameTBL[@@id] = nil
    Tk_FontUseTBL.delete_if{|key,value| value == self}
  end

d456 1
a456 8
#	    winobj.tagfont_configure(tag, {'font'=>@@latinfont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-font', @@latinfont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-font', @@latinfont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
d458 1
a458 2
#	    tk_tcl2ruby(w).font_configure('font'=>@@latinfont)
	    tk_call(w, 'configure', '-font', @@latinfont)
d480 1
a480 8
#	    winobj.tagfont_configure(tag, {'kanjifont'=>@@kanjifont})
	    if winobj.kind_of? TkText
	      tk_call(win, 'tag', 'configure', tag, '-kanjifont', @@kanjifont)
	    elsif winobj.kind_of? TkCanvas
	      tk_call(win, 'itemconfigure', tag, '-kanjifont', @@kanjifont)
	    else
	      raise RuntimeError, "unknown widget type"
	    end
d482 1
a482 2
#	    tk_tcl2ruby(w).font_configure('kanjifont'=>@@kanjifont)
	    tk_call(w, 'configure', '-kanjifont', @@kanjifont)
d493 1
a493 4
    begin
      tk_call('font', 'delete', @@latinfont)
    rescue
    end
d501 1
a501 4
    begin
      tk_call('font', 'delete', @@kanjifont)
    rescue
    end
a577 1
    alias delete_core         delete_core_tk4x
a589 1
    alias delete_core         delete_core_tk8x
a601 1
    alias delete_core         delete_core_tk8x
a715 4
  end

  def delete
    delete_core
@


1.1.2.4
log
@st.c(rehash)
@
text
@a495 2
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-font', @@latinfont)
a527 2
	    elsif winobj.kind_of? TkMenu
	      tk_call(win, 'entryconfigure', tag, '-kanjifont', @@latinfont)
a694 2
	elsif winobj.kind_of? TkMenu
	  ret.push([winobj, tag])
@


1.1.2.5
log
@sync ev
@
text
@d45 1
a45 1
      tk_split_simplelist(tk_call('font', 'names'))
d92 4
a95 8
	begin
	  compound = Hash[*list(tk_call('font', 'configure', 
					fnt))].collect{|key,value|
	    [key[1..-1], value]
	  }.assoc('compound')[1]
	rescue
	  compound = []
	end
d159 3
a161 8
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
d163 1
a163 1
	  finfo['points'] = '13'
d166 1
a166 1
      font[2..-1].each{|style|
d202 3
a204 8
      if font[1]
	fsize = font[1].to_s
	if fsize != '0' && fsize =~ /^(|\+|-)([0-9]+)$/
	  if $1 == '-'
	    finfo['pixels'] = $2
	  else
	    finfo['points'] = $2
	  end
d206 1
a206 1
	  finfo['points'] = '13'
d208 2
d211 1
a211 1
      font[2..-1].each{|style|
@


1.1.2.6
log
@1.1c8
@
text
@@


