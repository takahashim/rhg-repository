head	1.5;
access;
symbols
	v1_6_7:1.2.2.2
	v1_6_6:1.2.2.2
	v1_6_5:1.2.2.2
	v1_6_4:1.2.2.2
	v1_7_1:1.5
	v1_6_4_preview4:1.2.2.2
	v1_6_4_preview3:1.2.2.2
	v1_6_4_preview2:1.2.2.2
	v1_6_4_preview1:1.2.2.2
	v1_6_3:1.2.2.2
	ruby_m17n:1.2.0.4
	ruby_1_6:1.2.0.2
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.1.1.2
	v1_4_5:1.1.1.2
	v1_4_4:1.1.1.2
	ruby_1_4_3:1.1.1.2
	ruby1_4_3:1.1.1.2
	v1_4_3:1.1.1.2
	v1_5_0:1.1.1.2
	ruby_1_4_3_pre1:1.1.1.2
	ruby_1_4:1.1.1.2.0.4
	v1_4_2:1.1.1.2
	v1_4_1:1.1.1.2
	v1_4_0:1.1.1.2
	v1_3_7:1.1.1.2
	v1_3_6_repack:1.1.1.2
	v1_3_6:1.1.1.2
	v1_3_5:1.1.1.2
	v1_2_6repack:1.1.1.1.2.1
	v1_3_4_990625:1.1.1.2
	v1_3_4_990624:1.1.1.2
	v1_2_6:1.1.1.1.2.1
	v1_3_4_990611:1.1.1.2
	v1_3_4_990531:1.1.1.2
	v1_3_3_990518:1.1.1.2
	v1_3_3_990513:1.1.1.2
	v1_3_3_990507:1.1.1.2
	v1_2_5:1.1.1.1.2.1
	v1_2_4:1.1.1.1.2.1
	v1_3_1_990225:1.1.1.2
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.2.1
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.2.1
	v1_2_1repack:1.1.1.1.2.1
	v1_2_1:1.1.1.1.2.1
	v1_2_stable:1.1.1.1.2.1
	v1_1d1:1.1.1.1.2.1
	v1_1d0:1.1.1.1.2.1
	v1_1c9_1:1.1.1.1.2.1
	v1_1c9:1.1.1.1.2.1
	v1_1c8:1.1.1.1.2.1
	v1_1c7:1.1.1.1.2.1
	v1_1c6:1.1.1.1.2.1
	v1_1d-start:1.1.1.1.2.1
	v1_1c5:1.1.1.1.2.1
	v1_1dev:1.1.1.1.2.1.0.2
	v1_1c4:1.1.1.1.2.1
	v1_1c3:1.1.1.1.2.1
	v1_1c2:1.1.1.1.2.1
	v1_1c1:1.1.1.1.2.1
	v1_1c0:1.1.1.1.2.1
	v1_1b9_31:1.1.1.1.2.1
	v1_1b9_30:1.1.1.1.2.1
	v1_1b9_28:1.1.1.1.2.1
	v1_1b9_27:1.1.1.1
	v1_1b9_26:1.1.1.1
	r1_1b9_25:1.1.1.1
	r1_1b9_24:1.1.1.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.2
	v1_1:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2001.02.26.05.29.04;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.13.05.09.08;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.08.09.19.23;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.23.05.23.12;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.01.16.12.19.17;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.19.17;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.35;	author matz;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	98.06.26.09.44.57;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2001.02.08.09.18.00;	author matz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.02.13.05.10.46;	author matz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* eval.c (proc_call): should not modify ruby_block->frame.iter
  based on ruby_frame->iter altered by PUSH_ITER().

* eval.c (rb_thread_fd_close): should save current context before
  raising exception.

* io.c (set_stdin): preserve original stdin.

* io.c (set_outfile): preserve original stdout/stderr.
@
text
@# importenv.rb -- imports environment variables as global variables, Perlish ;(
#
# Usage:
#
#  require 'importenv'
#  p $USER
#  $USER = "matz"
#  p ENV["USER"]

for k,v in ENV
  next unless /^[a-zA-Z][_a-zA-Z0-9]*/ =~ k
  eval <<EOS
  $#{k} = v
  trace_var "$#{k}", proc{|v|
    ENV[%q!#{k}!] = v
    $#{k} = v
    if v == nil
      untrace_var "$#{k}"
    end
  }
EOS
end

if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end
@


1.4
log
@* io.c (rb_io_ctl): do not call ioctl/fcntl for f2, if f and f2
  have same fileno.

* eval.c (rb_load): raise LocaJumpError if unexpected local jumps
  appear during load.

* ext/socket/socket.c (bsock_close_read): don't call rb_thread_fd_close();
  it's supposed to be called by io_io_close().

* ext/socket/socket.c (bsock_close_read): do not modify f and f2.

* ext/socket/socket.c (bsock_close_write): ditto.

* ext/socket/socket.c (sock_new): avoid dup(2) on sockets.

* parse.y (primary): preserve and clear in_single and in_def using
  stack to prevent nested method errors in singleton class bodies.
@
text
@a31 1

@


1.3
log
@* parse.y (parse_quotedwords): %w should allow parenthesis escape.

* parse.y (parse_qstring): %q should allow terminator escape.

* re.c (rb_reg_options): new method to give an option values.

* parse.y (cond0): disable special treating of integer literal in
  conditional unless option -e is supplied.  changes current
  behavior.  experimental.

* parse.y (cond0): give warning for string/integer literals and
  dot operators in conditionals unless option -e is supplied.

* re.c (rb_reg_equal): all option flags should be same to be equal.

* error.c (Init_Exception): make Interrupt a subclass of
  SignalException.
@
text
@a11 1
  v = v.gsub(/\\/) {|s| '\\'+s}
d13 1
a13 1
  $#{k} = %q\0#{v}\0
@


1.2
log
@2000-02-23
@
text
@d12 1
d14 1
a14 1
  $#{k} = %q!#{v}!
d16 2
a17 2
    ENV[%q!#{k}!] = v; 
    $#{k} = %q!#{v}!
@


1.2.2.1
log
@* parse.y (parse_quotedwords): %w should allow parenthesis escape.

* parse.y (parse_qstring): %q should allow terminator escape.

* re.c (rb_reg_equal): all option flags should be same to be equal.
@
text
@a11 1
  v = v.gsub(/\\/) {|s| '\\'+s}
d13 1
a13 1
  $#{k} = %q\0#{v}\0
d15 2
a16 2
    ENV[%q!#{k}!] = v
    $#{k} = v
@


1.2.2.2
log
@* parse.y (primary): preserve and clear in_single and in_def using
  stack to prevent nested method errors in singleton class bodies.
@
text
@d12 1
d14 1
a14 1
  $#{k} = v
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# importenv.rb -- imports environment variables as global variables
d24 9
a32 6
p $TERM
$TERM = nil
p $TERM
p ENV["TERM"]
$TERM = "foo"
p ENV["TERM"]
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@d24 6
a29 9
if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end

@


1.1.1.1.2.1
log
@980626
@
text
@d24 6
a29 9
if __FILE__ == $0
  p $TERM
  $TERM = nil
  p $TERM
  p ENV["TERM"]
  $TERM = "foo"
  p ENV["TERM"]
end

@

