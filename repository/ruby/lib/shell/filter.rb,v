head	1.2;
access;
symbols
	v1_6_7:1.1.2.1
	v1_6_6:1.1.2.1
	v1_6_5:1.1.2.1
	v1_6_4:1.1.2.1
	v1_7_1:1.1
	v1_6_4_preview4:1.1.2.1
	v1_6_4_preview3:1.1.2.1
	ruby_1_6:1.1.0.2
	SHELL_v0_6:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.02.16.45.35;	author nobu;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.17.10.02.47;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.05.17.10.02.47;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.05.17.10.35.32;	author knu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@use Object#class instead of deprecated Object#type.
@
text
@#
#   shell/filter.rb - 
#   	$Release Version: 0.6.0 $
#   	$Revision: 1.1 $
#   	$Date: 2001/05/17 10:02:47 $
#   	by Keiju ISHITSUKA(Nihon Rational Software Co.,Ltd)
#
# --
#
#   
#

class Shell
  #
  # Filter
  # A method to require
  #    each()
  #
  class Filter
    include Enumerable
    include Error

    def initialize(sh)
      @@shell = sh	  # parent shell
      @@input = nil	  # input filter
    end

    attr_reader :input

    def input=(filter)
      @@input = filter
    end
    
    def each(rs = nil)
      rs = @@shell.record_separator unless rs
      if @@input
	@@input.each(rs){|l| yield l}
      end
    end

    def < (src)
      case src
      when String
	cat = Cat.new(@@shell, src)
	cat | self
      when IO
	self.input = src
	self
      else
	Filter.Fail CanNotMethodApply, "<", to.class
      end
    end

    def > (to)
      case to
      when String
	dst = @@shell.open(to, "w")
	begin
	  each(){|l| dst << l}
	ensure
	  dst.close
	end
      when IO
	each(){|l| to << l}
      else
	Filter.Fail CanNotMethodApply, ">", to.class
      end
      self
    end

    def >> (to)
      begin
	Shell.cd(@@shell.pwd).append(to, self)
      rescue CanNotMethodApply
	Shell.Fail CanNotMethodApply, ">>", to.class
      end
    end

    def | (filter)
      filter.input = self
      if active?
	@@shell.process_controller.start_job filter
      end
      filter
    end

    def + (filter)
      Join.new(@@shell, self, filter)
    end

    def to_a
      ary = []
      each(){|l| ary.push l}
      ary
    end

    def to_s
      str = ""
      each(){|l| str.concat l}
      str
    end

    def inspect
      if @@shell.debug.kind_of?(Integer) && @@shell.debug > 2
	super
      else
	to_s
      end
    end
  end
end
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#   	$Revision: 1.4 $
#   	$Date: 2001/03/19 09:03:23 $
d50 1
a50 1
	Filter.Fail CanNotMethodApply, "<", to.type
d66 1
a66 1
	Filter.Fail CanNotMethodApply, ">", to.type
d75 1
a75 1
	Shell.Fail CanNotMethodApply, ">>", to.type
@


1.1.2.1
log
@* doc/shell.rd*, lib/shell*: bring shell.rb 0.6 onto the ruby_1_6
branch.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/05/17 10:02:47 $
@


1.1.1.1
log
@Import Keiju ISHITSUKA's shell.rb 0.6 with some minor changes:

	- all Japanese code were converted to EUC
	- shell.doc and shell.doc.jp were renamed to shell.rd and
	shell.rd.jp, respectively.  (They will be converted to RD
	shortly)
@
text
@@
