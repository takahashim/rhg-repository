head	1.5;
access;
symbols
	v1_6_7:1.4
	v1_6_6:1.4
	v1_6_5:1.4
	v1_6_4:1.4
	v1_7_1:1.5
	v1_6_4_preview4:1.4
	v1_6_4_preview3:1.4
	v1_6_4_preview2:1.4
	v1_6_4_preview1:1.4
	v1_6_3:1.4
	ruby_m17n:1.4.0.4
	ruby_1_6:1.4.0.2
	v1_6_2:1.4
	v1_6_1:1.4
	v1_6_0:1.4
	v1_4_6:1.2.2.1
	v1_4_5:1.2.2.1
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1.2.2
	v1_3_6_repack:1.1.1.1.2.2
	v1_3_6:1.1.1.1.2.2
	v1_3_5:1.1.1.1.2.2
	v1_2_6repack:1.1.2.3
	v1_3_4_990625:1.1.1.1.2.2
	v1_3_4_990624:1.1.1.1.2.2
	v1_2_6:1.1.2.3
	v1_3_4_990611:1.1.1.1.2.2
	v1_3_4_990531:1.1.1.1.2.2
	v1_3_3_990518:1.1.1.1.2.2
	v1_3_3_990513:1.1.1.1.2.2
	v1_3_3_990507:1.1.1.1.2.2
	v1_2_5:1.1.2.3
	v1_2_4:1.1.2.3
	v1_3_1_990225:1.1.1.1.2.1
	v1_3_1_990224:1.1.1.1.2.1
	v1_3_1_990215:1.1.1.1.2.1
	v1_3_1_990212:1.1.1.1.2.1
	v1_3_1_990210:1.1.1.1.2.1
	v1_3_1_:1.1.1.1.2.1
	v1_3_1_990209:1.1.1.1.2.1
	v1_3_1_990205:1.1.1.1.2.1
	v1_3_1_990203:1.1.1.1.2.1
	v1_3_1_990201:1.1.1.1.2.1
	v1_3_1"_990201:1.1.1.1.2.1
	v1_3_1_990128:1.1.1.1.2.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.2
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.2
	v1_2_1repack:1.1.2.2
	v1_2_1:1.1.2.2
	v1_2_stable:1.1.2.2
	v1_1d1:1.1.2.2
	v1_1d0:1.1.2.2
	v1_1c9_1:1.1.2.2
	v1_1c9:1.1.2.2
	v1_1c8:1.1.2.2
	v1_1c7:1.1.2.2
	v1_1c6:1.1.2.1
	v1_1d-start:1.1.2.1
	v1_1c5:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2001.03.13.05.45.11;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.06.07.21.24;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.17.08.58.20;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.45.16;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.09.08.07.09.46;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.35;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	99.01.28.07.55.30;	author matz;	state Exp;
branches;
next	1.1.1.1.2.2;

1.1.1.1.2.2
date	99.03.24.08.52.35;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.09.08.07.09.46;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	98.10.06.03.28.25;	author matz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	99.04.08.09.12.09;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2000.03.23.04.14.30;	author matz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* io.c (argf_seek_m): wrong calling sequence of rb_io_seek().

* parse.y (cond0): no special treatment of string literal in
  condition.

* math.c: add acos, asin, atan, conh, sinh, tanh and hypot to Math.

* configure.in: check hypot availablility.

* missing/hypot.c: public domain rewrite of hypot.

* parse.y (warn_unless_e_option): warning condition was wrong.

* parse.y (warning_unless_e_option): ditto.

* enum.c (enum_all): new method 'all?', which returns true if
  block returns true for all elements.

* enum.c (enum_any): new method 'any?', which returns true if
  block retruns true for any of elements.

* marshal.c (marshal_load): do not give warning unless explicitly
  set to verbose.

* eval.c (rb_exit): give string value "exit" to SystemExit.

* ruby.c (proc_options): -v should not print version if
  proc_options called via moreswitches().

* parse.y (stmt): while/until modifier must work for empty body.
@
text
@
module Profiler__
  Times = if defined? Process.times then Process else Time end
  Start = Float(Times::times[0])
  top = "toplevel".intern
  Stack = [[0, 0, top]]
  MAP = {"#toplevel" => [1, 0, 0, "#toplevel"]}

  p = proc{|event, file, line, id, binding, klass|
    case event
    when "call", "c-call"
      now = Float(Times::times[0])
      Stack.push [now, 0.0, id]
    when "return", "c-return"
      now = Float(Times::times[0])
      tick = Stack.pop
      name = klass.to_s
      if name.nil? then name = '' end
      if klass.kind_of? Class
	name += "#"
      else
	name += "."
      end
      name += id.id2name
      data = MAP[name]
      unless data
	data = [0.0, 0.0, 0.0, name]
	MAP[name] = data
      end
      data[0] += 1
      cost = now - tick[0]
      data[1] += cost
      data[2] += cost - tick[1]
      Stack[-1][1] += cost
    end
  }
  END {
    set_trace_func nil
    total = Float(Times::times[0]) - Start
    if total == 0 then total = 0.01 end
    MAP["#toplevel"][1] = total
#    f = open("./rmon.out", "w")
    f = STDERR
    data = MAP.values.sort!{|a,b| b[2] <=> a[2]}
    sum = 0
    f.printf "  %%   cumulative   self              self     total\n"           
    f.printf " time   seconds   seconds    calls  ms/call  ms/call  name\n"
    for d in data
      sum += d[2]
      f.printf "%6.2f %8.2f  %8.2f %8d ", d[2]/total*100, sum, d[2], d[0]
      f.printf "%8.2f %8.2f  %s\n", d[2]*1000/d[0], d[1]*1000/d[0], d[3]
    end
    f.close
  }
  set_trace_func p
end
@


1.4
log
@matz
@
text
@d3 2
a4 1
  Start = Float(Time.times[0])
d12 1
a12 1
      now = Float(Time.times[0])
d15 1
a15 1
      now = Float(Time.times[0])
d39 1
a39 1
    total = Float(Time.times[0]) - Start
@


1.3
log
@2000-03-17
@
text
@a51 1
    p total
@


1.2
log
@1.4.0
@
text
@d6 1
a6 1
  MAP = {top => [1, 0, 0, "#toplevel"]}
d16 9
a24 1
      data = MAP[id]
d26 2
a27 9
	name = klass.to_s
	if name.nil? then name = '' end
	if klass.kind_of? Class
	  name += "#"
	else
	  name += "."
	end
	data = [0.0, 0.0, 0.0, name+id.id2name]
	MAP[id] = data
d40 1
a40 1
    MAP[:toplevel][1] = total
@


1.2.2.1
log
@2000-03-23
@
text
@d6 1
a6 1
  MAP = {"#toplevel" => [1, 0, 0, "#toplevel"]}
d16 1
a16 9
      name = klass.to_s
      if name.nil? then name = '' end
      if klass.kind_of? Class
	name += "#"
      else
	name += "."
      end
      name += id.id2name
      data = MAP[name]
d18 9
a26 2
	data = [0.0, 0.0, 0.0, name]
	MAP[name] = data
d39 1
a39 1
    MAP["#toplevel"][1] = total
@


1.1
log
@file profile.rb was initially added on branch v1_1r.
@
text
@d1 55
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 53

module Profiler__
  Start = Float(Time.times[0])
  top = "toplevel".intern
  Stack = [[0, 0, top]]
  MAP = {top => [1, 0, 0, "#toplevel"]}

  p = proc{|event, file, line, id, binding, klass|
    case event
    when "call", "c-call"
      now = Float(Time.times[0])
      Stack.push [now, 0.0, id]
    when "return", "c-return"
      now = Float(Time.times[0])
      tick = Stack.pop
      data = MAP[id]
      unless data
	name = klass.to_s
	if klass.kind_of? Class
	  name += "#"
	else
	  name += "."
	end
	data = [0, 0, 0, name+id.id2name]
	MAP[id] = data
      end
      data[0] += 1
      cost = now - tick[0]
      data[1] += cost
      data[2] += cost - tick[1]
      Stack[-1][1] += cost
    end
  }
  END {
    set_trace_func nil
    total = Float(Time.times[0]) - Start
    MAP[:toplevel][1] = total
#    f = open("./rmon.out", "w")
    f = STDERR
    data = MAP.values.sort!{|a,b| b[2] <=> a[2]}
    sum = 0
    f.printf "  %%   cumulative   self              self     total\n"           
    f.printf " time   seconds   seconds    calls  ms/call  ms/call  name\n"
    for d in data
      sum += d[2]
      f.printf "%6.2f %8.2f  %8.2f %8d ", d[2]/total*100, sum, d[2], d[0]
      f.printf "%8.2f %8.2f  %s\n", d[2]*1000/d[0], d[1]*1000/d[0], d[3]
    end
    p total
    f.close
  }
  set_trace_func p
end
@


1.1.1.1.2.1
log
@990128
@
text
@a18 1
	if name.nil? then name = '' end
a36 1
    if total == 0 then total = 0.01 end
@


1.1.1.1.2.2
log
@990324
@
text
@d25 1
a25 1
	data = [0.0, 0.0, 0.0, name+id.id2name]
@


1.1.2.1
log
@1.1d series
@
text
@a0 49

module Profiler__
  Start = Float(Time.now)
  top = "toplevel".intern
  Stack = [[0, 0, top]]
  MAP = {top => [1, 0, 0, "toplevel", top]}

  p = proc{|event, file, line, id, binding, klass|
    case event
    when "call", "c-call"
      now = Float(Time.now)
      Stack.push [now, 0.0, id]
    when "return", "c-return"
      now = Float(Time.now)
      tick = Stack.pop
      data = MAP[id]
      unless data
	name = klass.to_s
	if klass.kind_of? Class
	  name += "#"
	else
	  name += "."
	end
	data = [0, 0, 0, name+id.id2name, id]
	MAP[id] = data
      end
      data[0] += 1
      cost = now - tick[0]
      data[1] += cost unless id == Stack[-1][2]
      data[2] += cost - tick[1]
      Stack[-1][1] += cost
    end
  }
  END {
    set_trace_func nil
    total = MAP[:toplevel][1] = Float(Time.now) - Start
#    f = open("./rmon.out", "w")
    f = STDERR
    data = MAP.values.sort!{|a,b| b[2] <=> a[2]}
    f.printf "  %%   cumulative   self              self     total\n"           
    f.printf " time   seconds   seconds    calls  ms/call  ms/call  name\n"
    for d in data
      f.printf "%6.2f %8.2f  %8.2f %8d ", d[2]/total*100, d[1], d[2], d[0]
      f.printf "%8.2f %8.2f  %s\n", d[2]*1000/d[0], d[1]*1000/d[0], d[3]
    end
    f.close
  }
  set_trace_func p
end
@


1.1.2.2
log
@join 1.1c6
@
text
@d3 1
a3 1
  Start = Float(Time.times[0])
d6 1
a6 1
  MAP = {top => [1, 0, 0, "#toplevel"]}
d11 1
a11 1
      now = Float(Time.times[0])
d14 1
a14 1
      now = Float(Time.times[0])
d24 1
a24 1
	data = [0, 0, 0, name+id.id2name]
d29 1
a29 1
      data[1] += cost
d36 1
a36 2
    total = Float(Time.times[0]) - Start
    MAP[:toplevel][1] = total
a39 1
    sum = 0
d43 1
a43 2
      sum += d[2]
      f.printf "%6.2f %8.2f  %8.2f %8d ", d[2]/total*100, sum, d[2], d[0]
a45 1
    p total
@


1.1.2.3
log
@*** empty log message ***
@
text
@d24 1
a24 1
	data = [0.0, 0.0, 0.0, name+id.id2name]
d46 1
a46 1
      f.printf "%6.2f %8.2f  %8.2f %8d ", d[2]*100/total, sum, d[2], d[0]
@


