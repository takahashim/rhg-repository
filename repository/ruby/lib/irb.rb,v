head	1.5;
access;
symbols
	irb_0_9:1.4
	v1_6_7:1.1.2.3
	v1_6_6:1.1.2.3
	v1_6_5:1.1.2.3
	v1_6_4:1.1.2.3
	v1_7_1:1.3
	v1_6_4_preview4:1.1.2.3
	v1_6_4_preview3:1.1.2.3
	ruby_1_6:1.1.0.2
	v0_7_3:1.1.1.1
	KEIJU:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.02.16.45.34;	author nobu;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.09.11.17.16;	author keiju;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.08.09.28.19;	author keiju;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.03.08.55.53;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2001.04.30.17.38.22;	author knu;	state Exp;
branches;
next	;

1.1.2.1
date	2001.04.30.18.39.35;	author knu;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.03.08.56.49;	author knu;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.05.16.20.44.26;	author keiju;	state Exp;
branches;
next	;


desc
@@


1.5
log
@use Object#class instead of deprecated Object#type.
@
text
@#
#   irb.rb - irb main module
#   	$Release Version: 0.9 $
#   	$Revision: 1.4 $
#   	$Date: 2002/07/09 11:17:16 $
#   	by Keiju ISHITSUKA(keiju@@ishitsuka.com)
#
# --
#
#
#
require "e2mmap"

require "irb/init"
require "irb/context"
require "irb/extend-command"
#require "irb/workspace"

require "irb/ruby-lex"
require "irb/input-method"
require "irb/locale"

STDOUT.sync = true

module IRB
  @@RCS_ID='-$Id: irb.rb,v 1.4 2002/07/09 11:17:16 keiju Exp $-'

  class Abort < Exception;end

  #
  @@CONF = {}

  def IRB.conf
    @@CONF
  end

  # IRB version method
  def IRB.version
    if v = @@CONF[:VERSION] then return v end

    require "irb/version"
    rv = @@RELEASE_VERSION.sub(/\.0/, "")
    @@CONF[:VERSION] = format("irb %s(%s)", rv, @@LAST_UPDATE_DATE)
  end

  def IRB.CurrentContext
    IRB.conf[:MAIN_CONTEXT]
  end

  # initialize IRB and start TOP_LEVEL irb
  def IRB.start(ap_path = nil)
    $0 = File::basename(ap_path, ".rb") if ap_path

    IRB.initialize(ap_path)

    if @@CONF[:SCRIPT]
      irb = Irb.new(nil, @@CONF[:SCRIPT])
    else
      irb = Irb.new
    end

    @@CONF[:IRB_RC].call(irb.context) if @@CONF[:IRB_RC]
    @@CONF[:MAIN_CONTEXT] = irb.context

    trap("SIGINT") do
      irb.signal_handle
    end
    
    catch(:IRB_EXIT) do
      irb.eval_input
    end
#    print "\n"
  end

  def IRB.irb_exit(irb, ret)
    throw :IRB_EXIT, ret
  end

  def IRB.irb_abort(irb, exception = Abort)
    if defined? Thread
      irb.context.thread.raise exception, "abort then interrupt!!"
    else
      raise exception, "abort then interrupt!!"
    end
  end

  #
  # irb interpriter main routine 
  #
  class Irb
    def initialize(workspace = nil, input_method = nil)
      @@context = Context.new(self, workspace, input_method)
      @@context.main.extend ExtendCommandBundle
      @@signal_status = :IN_IRB

      @@scanner = RubyLex.new
      @@scanner.exception_on_syntax_error = false
    end
    attr_reader :context
    attr_accessor :scanner

    def eval_input
      @@scanner.set_prompt do
	|ltype, indent, continue, line_no|
	if ltype
	  f = @@context.prompt_s
	elsif continue
	  f = @@context.prompt_c
	else @@context.prompt_i
	  f = @@context.prompt_i
	end
	f = "" unless f
	if @@context.prompting?
	  @@context.io.prompt = p = prompt(f, ltype, indent, line_no)
	else
	  @@context.io.prompt = p = ""
	end
	if @@context.auto_indent_mode
	  unless ltype
	    ind = prompt(@@context.prompt_i, ltype, indent, line_no).size + 
	      indent * 2 - p.size
	    ind += 2 if continue
	    @@context.io.prompt = p + " " * ind if ind > 0
	  end
	end
      end
       
      @@scanner.set_input(@@context.io) do
	signal_status(:IN_INPUT) do
	  if l = @@context.io.gets
	    print l if @@context.verbose?
	  else
	    if @@context.ignore_eof? and @@context.io.readable_atfer_eof?
	      l = "\n"
	      if @@context.verbose?
		printf "Use \"exit\" to leave %s\n", @@context.ap_name
	      end
	    end
	  end
	  l
	end
      end

      @@scanner.each_top_level_statement do
	|line, line_no|
	signal_status(:IN_EVAL) do
	  begin
	    @@context.evaluate(line, line_no)
	    output_value if @@context.echo?
	  rescue StandardError, ScriptError, Abort
	    $! = RuntimeError.new("unknown exception raised") unless $!
	    print $!.class, ": ", $!, "\n"
	    if  $@@[0] =~ /irb(2)?(\/.*|-.*|\.rb)?:/ && $!.class.to_s !~ /^IRB/
	      irb_bug = true 
	    else
	      irb_bug = false
	    end
	    
	    messages = []
	    lasts = []
	    levels = 0
	    for m in $@@
	      m = @@context.workspace.filter_backtrace(m) unless irb_bug
	      if m
		if messages.size < @@context.back_trace_limit
		  messages.push "\tfrom "+m
		else
		  lasts.push "\tfrom "+m
		  if lasts.size > @@context.back_trace_limit
		    lasts.shift 
		    levels += 1
		  end
		end
	      end
	    end
	    print messages.join("\n"), "\n"
	    unless lasts.empty?
	      printf "... %d levels...\n", levels if levels > 0
	      print lasts.join("\n")
	    end
	    print "Maybe IRB bug!!\n" if irb_bug
	  end
	end
      end
    end

    def suspend_name(path = nil, name = nil)
      @@context.irb_path, back_path = path, @@context.irb_path if path
      @@context.irb_name, back_name = name, @@context.irb_name if name
      begin
	yield back_path, back_name
      ensure
	@@context.irb_path = back_path if path
	@@context.irb_name = back_name if name
      end
    end

    def suspend_workspace(workspace)
      @@context.workspace, back_workspace = workspace, @@context.workspace
      begin
	yield back_workspace
      ensure
	@@context.workspace = back_workspace
      end
    end

    def suspend_input_method(input_method)
      back_io = @@context.io
      @@context.instance_eval{@@io = input_method}
      begin
	yield back_io
      ensure
	@@context.instance_eval{@@io = back_io}
      end
    end

    def suspend_context(context)
      @@context, back_context = context, @@context
      begin
	yield back_context
      ensure
	@@context = back_context
      end
    end

    def signal_handle
      unless @@context.ignore_sigint?
	print "\nabort!!\n" if @@context.verbose?
	exit
      end

      case @@signal_status
      when :IN_INPUT
	print "^C\n"
	raise RubyLex::TerminateLineInput
      when :IN_EVAL
	IRB.irb_abort(self)
      when :IN_LOAD
	IRB.irb_abort(self, LoadAbort)
      when :IN_IRB
	# ignore
      else
	# ignore other cases as well
      end
    end

    def signal_status(status)
      return yield if @@signal_status == :IN_LOAD

      signal_status_back = @@signal_status
      @@signal_status = status
      begin
	yield
      ensure
	@@signal_status = signal_status_back
      end
    end

    def prompt(prompt, ltype, indent, line_no)
      p = prompt.dup
      p.gsub!(/%([0-9]+)?([a-zA-Z])/) do
	case $2
	when "N"
	  @@context.irb_name
	when "m"
	  @@context.main.to_s
	when "M"
	  @@context.main.inspect
	when "l"
	  ltype
	when "i"
	  if $1 
	    format("%" + $1 + "d", indent)
	  else
	    indent.to_s
	  end
	when "n"
	  if $1 
	    format("%" + $1 + "d", line_no)
	  else
	    line_no.to_s
	  end
	when "%"
	  "%"
	end
      end
      p
    end

    def output_value
      if @@context.inspect?
        printf @@context.return_format, @@context.last_value.inspect
      else
        printf @@context.return_format, @@context.last_value
      end
    end

    def inspect
      ary = []
      for iv in instance_variables
	case iv
	when "@@signal_status"
	  ary.push format("%s=:%s", iv, @@signal_status.id2name)
	when "@@context"
	  ary.push format("%s=%s", iv, eval(iv).__to_s__)
	else
	  ary.push format("%s=%s", iv, eval(iv))
	end
      end
      format("#<%s: %s>", self.class, ary.join(", "))
    end
  end

  # Singleton method
  def @@CONF.inspect
    IRB.version unless self[:VERSION]

    array = []
    for k, v in sort{|a1, a2| a1[0].id2name <=> a2[0].id2name}
      case k
      when :MAIN_CONTEXT, :__TMP__EHV__
	array.push format("CONF[:%s]=...myself...", k.id2name)
      when :PROMPT
	s = v.collect{
	  |kk, vv|
	  ss = vv.collect{|kkk, vvv| ":#{kkk.id2name}=>#{vvv.inspect}"}
	  format(":%s=>{%s}", kk.id2name, ss.join(", "))
	}
	array.push format("CONF[:%s]={%s}", k.id2name, s.join(", "))
      else
	array.push format("CONF[:%s]=%s", k.id2name, v.inspect)
      end
    end
    array.join("\n")
  end
end
@


1.4
log
@* irb 0.9
@
text
@d4 2
a5 2
#   	$Revision: 1.39 $
#   	$Date: 2002/07/03 10:40:48 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.39 2002/07/03 10:40:48 keiju Exp keiju $-'
d152 2
a153 2
	    print $!.type, ": ", $!, "\n"
	    if  $@@[0] =~ /irb(2)?(\/.*|-.*|\.rb)?:/ && $!.type.to_s !~ /^IRB/
d310 1
a310 1
      format("#<%s: %s>", type, ary.join(", "))
@


1.3
log
@*** empty log message ***
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.4 $
#   	$Revision: 1.1.2.2 $
#   	$Date: 2001/05/03 08:56:49 $
d17 1
a17 1
require "irb/workspace"
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.1.2.2 2001/05/03 08:56:49 knu Exp $-'
d46 4
a54 2
    IRB.parse_opts
    IRB.load_modules
d72 1
a72 1
    print "\n"
d93 1
a93 1
      @@context.main.extend ExtendCommand
a102 14
      @@scanner.set_input(@@context.io) do
	signal_status(:IN_INPUT) do
	  unless l = @@context.io.gets
	    if @@context.ignore_eof? and @@context.io.readable_atfer_eof?
	      l = "\n"
	      if @@context.verbose?
		printf "Use \"exit\" to leave %s\n", @@context.ap_name
	      end
	    end
	  end
	  l
	end
      end

d113 5
a117 1
	@@context.io.prompt = p = prompt(f, ltype, indent, line_no)
d128 16
d148 2
a149 12
	    trace_in do
	      @@context._ = @@context.workspace.evaluate(line, 
						       @@context.irb_path, 
						       line_no)
#	      @@context._ = irb_eval(line, @@context.bind, @@context.irb_path, line_no)
	    end

	    if @@context.inspect?
	      printf @@context.return_format, @@context._.inspect
	    else
	      printf @@context.return_format, @@context._
	    end
d187 38
a224 13
#     def irb_eval(line, bind, path, line_no)
#       id, str = catch(:IRB_TOPLEVEL_EVAL){
# 	return eval(line, bind, path, line_no)
#       }
#       case id
#       when :EVAL_TOPLEVEL
# 	eval(str, bind, "(irb_internal)", 1)
#       when :EVAL_CONTEXT
# 	@@context.instance_eval(str)
#       else
# 	IRB.fail IllegalParameter
#       end
#     end
a258 9
    def trace_in
      Tracer.on if @@context.use_tracer?
      begin
	yield
      ensure
	Tracer.off if @@context.use_tracer?
      end
    end

d290 8
d321 2
a322 2
      when :MAIN_CONTEXT
	next
@


1.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.3 $
#   	$Revision: 1.1 $
#   	$Date: 2001/04/30 17:38:22 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.1 2001/04/30 17:38:22 knu Exp $-'
d212 1
a212 2
	@@scanner.initialize_input
	print @@context.io.prompt
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
#   	$Revision: 1.30 $
#   	$Date: 2001/04/16 06:05:01 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.30 2001/04/16 06:05:01 keiju Exp keiju $-'
a46 1
  # (JP: IRB$B=i4|2=$H%H%C%W%l%Y%k(Birb$B5/F0(B)
a86 1
  # (JP: irb$B%$%s%?%W%j%?K\BN(B)
d219 1
a219 1
	# ignore (JP: $B2?$b$7$J$$(B.)
d221 1
a221 1
	# ignore (JP: $B$=$NB>$N>l9g$b2?$b$7$J$$(B.)
@


1.1.2.1
log
@* sample/irb.rb, lib/irb.rb, lib/irb/*, doc/irb/*: Merge from irb
0.7.3 and irb-tools 0.7.1.

* instruby.rb: Install help-message's too.

* lib/irb/main.rb: This file is not needed anymore.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.1.1 $
#   	$Date: 2001/04/30 17:38:22 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.1.1.1 2001/04/30 17:38:22 knu Exp $-'
@


1.1.2.2
log
@Get rid of Japanese comments and fix English comments as appropriate.
@
text
@d4 2
a5 2
#   	$Revision: 1.1.2.1 $
#   	$Date: 2001/04/30 18:39:35 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.1.2.1 2001/04/30 18:39:35 knu Exp $-'
d47 1
d88 1
d221 1
a221 1
	# ignore
d223 1
a223 1
	# ignore other cases as well
@


1.1.2.3
log
@
resolve ctrl-c problem.
@
text
@d3 3
a5 3
#   	$Release Version: 0.7.4 $
#   	$Revision: 1.1.2.2 $
#   	$Date: 2001/05/03 08:56:49 $
d26 1
a26 1
  @@RCS_ID='-$Id: irb.rb,v 1.1.2.2 2001/05/03 08:56:49 knu Exp $-'
d212 2
a213 1
	raise RubyLex::TerminateLineInput
@


1.1.1.1
log
@This is the virgin import of irb 0.7.3.
@
text
@@
