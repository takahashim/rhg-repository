head	1.10;
access;
symbols
	v1_6_7:1.8
	v1_6_6:1.8
	v1_6_5:1.8
	v1_6_4:1.8
	v1_7_1:1.8
	v1_6_4_preview4:1.8
	v1_6_4_preview3:1.8
	v1_6_4_preview2:1.8
	v1_6_4_preview1:1.8
	v1_6_3:1.8
	ruby_m17n:1.8.0.4
	ruby_1_6:1.8.0.2
	v1_6_2:1.8
	v1_6_1:1.7
	v1_6_0:1.7
	v1_4_6:1.2.2.1
	v1_4_5:1.2.2.1
	v1_4_4:1.2.2.1
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1d1:1.1.4.1
	v1_1d0:1.1.4.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1dev:1.1.0.4
	v1_1c8:1.1.2.1
	v1_1c7:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.10
date	2002.01.16.03.36.32;	author akr;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.20.04.29.58;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.14.14.44.58;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.30.04.24.12;	author matz;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.09.04.53.14;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.01.09.41.40;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.17.08.37.53;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.05.04.37.22;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.45.18;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.11.09.09.11.52;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1
	1.1.4.1;
next	;

1.1.1.1
date	99.01.20.04.59.35;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.11.09.09.11.52;	author matz;	state Exp;
branches;
next	;

1.1.4.1
date	98.11.25.03.31.18;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2000.01.17.08.24.21;	author matz;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* lib/timeout.rb (timeout): new optional argument to specify an
exception class.

* lib/resolv.rb: use Resolv::ResolvTimeout for internal timeout to
avoid problem with timeout of application.
@
text
@#
# timeout.rb -- execution timeout
#
# Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
# Copyright (C) 2000  Information-technology Promotion Agency, Japan
#
#= SYNOPSIS
#
#   require 'timeout'
#   status = timeout(5) {
#     # something may take time
#   }
#
#= DESCRIPTION
#
# timeout executes the block.  If the block execution terminates successfully
# before timeout, it returns true.  If not, it terminates the execution and
# raise TimeoutError exception.
#
#== Parameters
#
#  : timout
#
#    The time in seconds to wait for block teminatation.   
#
#=end

class TimeoutError<Interrupt
end

def timeout(sec, exception=TimeoutError)
  return yield if sec == nil
  begin
    x = Thread.current
    y = Thread.start {
      sleep sec
      x.raise exception, "execution expired" if x.alive?
    }
    yield sec
#    return true
  ensure
    y.kill if y and y.alive?
  end
end

if __FILE__ == $0
  p timeout(5) {
    45
  }
  p timeout(5) {
    loop {
      p 10
      sleep 1
    }
  }
end
@


1.9
log
@* range.c (range_step): 'iter' here should be an array.

* marshal.c (w_object): should retrieve __member__ data from
  non-singleton class.

* variable.c (rb_cvar_get): class variable override check added.

* variable.c (rb_cvar_set): ditto

* variable.c (rb_cvar_declare): ditto.

* parse.y (parse_regx): handle backslash escaping of delimiter here.
@
text
@d31 1
a31 1
def timeout(sec)
d37 1
a37 1
      x.raise TimeoutError, "execution expired" if x.alive?
@


1.8
log
@matz
@
text
@d28 1
a28 1
class TimeoutError<StandardError
d40 1
a40 1
    return true
d42 1
a42 1
    Thread.kill y if y and y.alive?
d47 8
a54 2
  timeout(5) {
    p 10
@


1.7
log
@2000-05-30
@
text
@d42 1
a42 1
    Thread.kill y if y.alive?
d44 6
@


1.6
log
@2000-05-09
@
text
@d32 1
@


1.5
log
@2000-05-01
@
text
@d5 1
a5 1
# Copyright (C) 2000  Information-technology Promotion Agancy, Japan
@


1.4
log
@2000-01-17
@
text
@d4 3
@


1.3
log
@20000105
@
text
@a27 2
Thread.abort_on_exception = true

@


1.2
log
@1.4.0
@
text
@d35 1
a35 1
      x.raise TimeoutError, "execution expired" if x.status
d40 1
a40 1
    Thread.kill y if y.status
@


1.2.2.1
log
@2000-01-17
@
text
@d28 2
@


1.1
log
@file timeout.rb was initially added on branch v1_1r.
@
text
@d1 42
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 42
#
# timeout.rb -- execution timeout
#
#= SYNOPSIS
#
#   require 'timeout'
#   status = timeout(5) {
#     # something may take time
#   }
#
#= DESCRIPTION
#
# timeout executes the block.  If the block execution terminates successfully
# before timeout, it returns true.  If not, it terminates the execution and
# raise TimeoutError exception.
#
#== Parameters
#
#  : timout
#
#    The time in seconds to wait for block teminatation.   
#
#=end

class TimeoutError<StandardError
end

Thread.abort_on_exception = true

def timeout(sec)
  begin
    x = Thread.current
    y = Thread.start {
      sleep sec
      x.raise TimeoutError, "execution expired" if x.status
    }
    yield sec
    return true
  ensure
    Thread.kill y if y.status
  end
end
@


1.1.4.1
log
@*** empty log message ***
@
text
@a0 42
#
# timeout.rb -- execution timeout
#
#= SYNOPSIS
#
#   require 'timeout'
#   status = timeout(5) {
#     # something may take time
#   }
#
#= DESCRIPTION
#
# timeout executes the block.  If the block execution terminates successfully
# before timeout, it returns true.  If not, it terminates the execution and
# raise TimeoutError exception.
#
#== Parameters
#
#  : timout
#
#    The time in seconds to wait for block teminatation.   
#
#=end

class TimeoutError<StandardError
end

Thread.abort_on_exception = true

def timeout(sec)
  begin
    x = Thread.current
    y = Thread.start {
      sleep sec
      x.raise TimeoutError, "execution expired" if x.status
    }
    yield sec
    return true
  ensure
    Thread.kill y if y.status
  end
end
@


1.1.2.1
log
@1.1c7
@
text
@a0 42
#
# timeout.rb -- execution timeout
#
#= SYNOPSIS
#
#   require 'timeout'
#   status = timeout(5) {
#     # something may take time
#   }
#
#= DESCRIPTION
#
# timeout executes the block.  If the block execution terminates successfully
# before timeout, it returns true.  If not, it terminates the execution and
# raise TimeoutError exception.
#
#== Parameters
#
#  : timout
#
#    The time in seconds to wait for block teminatation.   
#
#=end

class TimeoutError<StandardError
end

Thread.abort_on_exception = true

def timeout(sec)
  begin
    x = Thread.current
    y = Thread.start {
      sleep sec
      x.raise TimeoutError, "execution expired" if x.status
    }
    yield sec
    return true
  ensure
    Thread.kill y if y.status
  end
end
@

