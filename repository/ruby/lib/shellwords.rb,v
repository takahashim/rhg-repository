head	1.5;
access;
symbols
	v1_6_7:1.4.2.1
	v1_6_6:1.4.2.1
	v1_6_5:1.4.2.1
	v1_6_4:1.4.2.1
	v1_7_1:1.4
	v1_6_4_preview4:1.4
	v1_6_4_preview3:1.4
	v1_6_4_preview2:1.4
	v1_6_4_preview1:1.4
	v1_6_3:1.4
	ruby_m17n:1.4.0.4
	ruby_1_6:1.4.0.2
	v1_6_2:1.4
	v1_6_1:1.4
	v1_6_0:1.4
	v1_4_6:1.2.2.1
	v1_4_5:1.2.2.1
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.2.2.1
	v1_3_6_repack:1.1.1.2.2.1
	v1_3_6:1.1.1.2.2.1
	v1_3_5:1.1.1.2
	v1_2_6repack:1.1.1.1.2.1
	v1_3_4_990625:1.1.1.2
	v1_3_4_990624:1.1.1.2
	v1_2_6:1.1.1.1.2.1
	v1_3_4_990611:1.1.1.2
	v1_3_4_990531:1.1.1.2
	v1_3_3_990518:1.1.1.2
	v1_3_3_990513:1.1.1.2
	v1_3_3_990507:1.1.1.2
	v1_2_5:1.1.1.1.2.1
	v1_2_4:1.1.1.1.2.1
	v1_3_1_990225:1.1.1.2
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.2.1
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.2.1
	v1_2_1repack:1.1.1.1.2.1
	v1_2_1:1.1.1.1.2.1
	v1_2_stable:1.1.1.1.2.1
	v1_1d1:1.1.1.1.2.1
	v1_1d0:1.1.1.1.2.1
	v1_1c9_1:1.1.1.1.2.1
	v1_1c9:1.1.1.1.2.1
	v1_1c8:1.1.1.1.2.1
	v1_1c7:1.1.1.1.2.1
	v1_1c6:1.1.1.1.2.1
	v1_1d-start:1.1.1.1.2.1
	v1_1c5:1.1.1.1.2.1
	v1_1dev:1.1.1.1.2.1.0.2
	v1_1c4:1.1.1.1.2.1
	v1_1c3:1.1.1.1.2.1
	v1_1c2:1.1.1.1
	v1_1c1:1.1.1.1
	v1_1c0:1.1.1.1
	v1_1b9_31:1.1.1.1
	v1_1b9_30:1.1.1.1
	v1_1b9_28:1.1.1.1
	v1_1b9_27:1.1.1.1
	v1_1b9_26:1.1.1.1
	r1_1b9_25:1.1.1.1
	r1_1b9_24:1.1.1.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.2
	v1_1:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2001.06.03.19.25.07;	author wakou;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.01.09.25.37;	author matz;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.02.08.08.49.00;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.45.17;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.01.16.12.19.17;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.19.17;	author matz;	state Exp;
branches
	1.1.1.1.2.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.35;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	;

1.1.1.2.2.1
date	99.07.22.10.37.26;	author matz;	state Exp;
branches;
next	;

1.1.1.1.2.1
date	98.08.27.03.55.48;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2000.04.10.05.48.43;	author matz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.08.01.06.27.36;	author matz;	state Exp;
branches;
next	;

1.4.2.1
date	2001.06.03.19.24.09;	author wakou;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* lib/shellwords.rb: don't destroy argument.
@
text
@# shellwords.rb
# original is shellwords.pl
#
# Usage:
#       require 'shellwords'
#       words = Shellwords.shellwords(line)
#
#	   or
#
#       require 'shellwords'
#       include Shellwords
#       words = shellwords(line)

module Shellwords
  def shellwords(line)
    unless line.kind_of?(String)
      raise ArgumentError, "Argument must be String class object."
    end
    line = line.sub(/\A\s+/, '')
    words = []
    while line != ''
      field = ''
      while true
	if line.sub!(/\A"(([^"\\]|\\.)*)"/, '') then #"
	  snippet = $1
	  snippet.gsub!(/\\(.)/, '\1')
	elsif line =~ /\A"/ then #"
	  raise ArgumentError, "Unmatched double quote: #{line}"
        elsif line.sub!(/\A'(([^'\\]|\\.)*)'/, '') then #'
	  snippet = $1
	  snippet.gsub!(/\\(.)/, '\1')
	elsif line =~ /\A'/ then #'
	  raise ArgumentError, "Unmatched single quote: #{line}"
	elsif line.sub!(/\A\\(.)/, '') then
	  snippet = $1
	elsif line.sub!(/\A([^\s\\'"]+)/, '') then #'
	  snippet = $1
	else
	  line.sub!(/\A\s+/, '')
	  break
	end
	field.concat(snippet)
      end
      words.push(field)
    end
    words
  end
  module_function :shellwords
end
@


1.4
log
@matz
@
text
@d19 1
a19 1
    line.sub!(/\A\s+/, '')
@


1.4.2.1
log
@	* lib/shellwords.rb: don't destroy argument.
@
text
@d19 1
a19 1
    line = line.sub(/\A\s+/, '')
@


1.3
log
@2000-02-08
@
text
@d19 1
a19 1
    line.sub!(/^\s+/, '')
d24 1
a24 1
	if line.sub!(/^"(([^"\\]|\\.)*)"/, '') then #"
d27 1
a27 1
	elsif line =~ /^"/ then #"
d29 1
a29 1
        elsif line.sub!(/^'(([^'\\]|\\.)*)'/, '') then #'
d32 1
a32 1
	elsif line =~ /^'/ then #'
d34 1
a34 1
	elsif line.sub!(/^\\(.)/, '') then
d36 1
a36 1
	elsif line.sub!(/^([^\s\\'"]+)/, '') then #'
d39 1
a39 1
	  line.sub!(/^\s+/, '')
@


1.2
log
@1.4.0
@
text
@d5 1
a5 1
#       require 'shellwords.rb'
d10 1
d16 4
a19 2
    return '' unless line
    line.sub! /^\s+/, ''
d24 1
a24 1
	if line.sub! /^"(([^"\\]|\\.)*)"/, '' then #"
d26 1
a26 1
	  snippet.gsub! /\\(.)/, '\1'
d28 2
a29 2
	  raise ArgError, "Unmatched double quote: #{line}"
        elsif line.sub! /^'(([^'\\]|\\.)*)'/, '' then #'
d31 1
a31 1
	  snippet.gsub! /\\(.)/, '\1'
d33 2
a34 2
	  raise ArgError, "Unmatched single quote: #{line}"
	elsif line.sub! /^\\(.)/, '' then
d36 1
a36 1
	elsif line.sub! /^([^\s\\'"]+)/, '' then #'
d39 1
a39 1
	  line.sub! /^\s+/, ''
d42 1
a42 1
	field += snippet
d44 1
a44 1
      words += field
@


1.2.2.1
log
@2000-04-10
@
text
@d5 1
a5 1
#       require 'shellwords'
a9 1
#       require 'shellwords'
d15 2
a16 4
    unless line.kind_of?(String)
      raise ArgumentError, "Argument must be String class object."
    end
    line.sub!(/^\s+/, '')
d21 1
a21 1
	if line.sub!(/^"(([^"\\]|\\.)*)"/, '') then #"
d23 1
a23 1
	  snippet.gsub!(/\\(.)/, '\1')
d25 2
a26 2
	  raise ArgumentError, "Unmatched double quote: #{line}"
        elsif line.sub!(/^'(([^'\\]|\\.)*)'/, '') then #'
d28 1
a28 1
	  snippet.gsub!(/\\(.)/, '\1')
d30 2
a31 2
	  raise ArgumentError, "Unmatched single quote: #{line}"
	elsif line.sub!(/^\\(.)/, '') then
d33 1
a33 1
	elsif line.sub!(/^([^\s\\'"]+)/, '') then #'
d36 1
a36 1
	  line.sub!(/^\s+/, '')
d39 1
a39 1
	field.concat(snippet)
d41 1
a41 1
      words.push(field)
@


1.2.2.2
log
@matz
@
text
@d19 1
a19 1
    line.sub!(/\A\s+/, '')
d24 1
a24 1
	if line.sub!(/\A"(([^"\\]|\\.)*)"/, '') then #"
d27 1
a27 1
	elsif line =~ /\A"/ then #"
d29 1
a29 1
        elsif line.sub!(/\A'(([^'\\]|\\.)*)'/, '') then #'
d32 1
a32 1
	elsif line =~ /\A'/ then #'
d34 1
a34 1
	elsif line.sub!(/\A\\(.)/, '') then
d36 1
a36 1
	elsif line.sub!(/\A([^\s\\'"]+)/, '') then #'
d39 1
a39 1
	  line.sub!(/\A\s+/, '')
@


1.1
log
@Initial revision
@
text
@d20 2
a21 2
      while TRUE
	if line.sub! /^"(([^"\\]|\\.)*)"/, '' then
d24 3
a26 4
	elsif line =~ /^"/ then
	  STDOUT.print "Unmatched double quote: $_\n"
	  exit
        elsif line.sub! /^'(([^'\\]|\\.)*)'/, '' then
d29 2
a30 3
	elsif line =~ /^'/ then
	  STDOUT.print "Unmatched single quote: $_\n"
	  exit
d33 1
a33 1
	elsif line.sub! /^([^\s\\'"]+)/, '' then
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@d21 1
a21 1
	if line.sub! /^"(([^"\\]|\\.)*)"/, '' then #"
d24 4
a27 3
	elsif line =~ /^"/ then #"
	  raise ArgError, "Unmatched double quote: #{line}"
        elsif line.sub! /^'(([^'\\]|\\.)*)'/, '' then #'
d30 3
a32 2
	elsif line =~ /^'/ then #'
	  raise ArgError, "Unmatched single quote: #{line}"
d35 1
a35 1
	elsif line.sub! /^([^\s\\'"]+)/, '' then #'
@


1.1.1.2.2.1
log
@backtrace may be Qnil
@
text
@d20 1
a20 1
      while true
@


1.1.1.1.2.1
log
@1.1c3
@
text
@d21 1
a21 1
	if line.sub! /^"(([^"\\]|\\.)*)"/, '' then #"
d24 4
a27 3
	elsif line =~ /^"/ then #"
	  raise ArgError, "Unmatched double quote: #{line}"
        elsif line.sub! /^'(([^'\\]|\\.)*)'/, '' then #'
d30 3
a32 2
	elsif line =~ /^'/ then #'
	  raise ArgError, "Unmatched single quote: #{line}"
d35 1
a35 1
	elsif line.sub! /^([^\s\\'"]+)/, '' then #'
@

