head	1.5;
access;
symbols
	v1_6_7:1.4.2.1
	v1_6_6:1.4.2.1
	v1_6_5:1.4.2.1
	v1_6_4:1.4.2.1
	v1_7_1:1.5
	v1_6_4_preview4:1.4.2.1
	v1_6_4_preview3:1.4.2.1
	v1_6_4_preview2:1.4.2.1
	v1_6_4_preview1:1.4.2.1
	v1_6_3:1.4.2.1
	ruby_m17n:1.4.0.4
	ruby_1_6:1.4.0.2
	v1_6_2:1.4
	v1_6_1:1.4
	v1_6_0:1.4
	v1_4_6:1.2.2.1
	v1_4_5:1.2.2.1
	v1_4_4:1.2.2.1
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.2.2.1
	v1_3_6_repack:1.1.1.2.2.1
	v1_3_6:1.1.1.2.2.1
	v1_3_5:1.1.1.2
	v1_2_6repack:1.1.1.1.4.1
	v1_3_4_990625:1.1.1.2
	v1_3_4_990624:1.1.1.2
	v1_2_6:1.1.1.1.4.1
	v1_3_4_990611:1.1.1.2
	v1_3_4_990531:1.1.1.2
	v1_3_3_990518:1.1.1.2
	v1_3_3_990513:1.1.1.2
	v1_3_3_990507:1.1.1.2
	v1_2_5:1.1.1.1.4.1
	v1_2_4:1.1.1.1.4.1
	v1_3_1_990225:1.1.1.2
	v1_3_1_990224:1.1.1.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.4.1
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.4.1
	v1_2_1repack:1.1.1.1.4.1
	v1_2_1:1.1.1.1.4.1
	v1_2_stable:1.1.1.1.4.1
	v1_1d1:1.1.1.1.4.1
	v1_1d0:1.1.1.1.4.1
	v1_1c9_1:1.1.1.1.4.1
	v1_1c9:1.1.1.1.4.1
	v1_1c8:1.1.1.1.4.1
	v1_1c7:1.1.1.1.4.1
	v1_1c6:1.1.1.1.4.1
	v1_1d-start:1.1.1.1.4.1
	v1_1c5:1.1.1.1.4.1
	v1_1dev:1.1.1.1.4.1.0.2
	v1_1c4:1.1.1.1.4.1
	v1_1c3:1.1.1.1.4.1
	v1_1c2:1.1.1.1.4.1
	v1_1c1:1.1.1.1.4.1
	v1_1c0:1.1.1.1.4.1
	v1_1b9_31:1.1.1.1.4.1
	v1_1b9_30:1.1.1.1.4.1
	v1_1b9_28:1.1.1.1.4.1
	v1_1b9_27:1.1.1.1.4.1
	v1_1b9_26:1.1.1.1.4.1
	r1_1b9_25:1.1.1.1.4.1
	r1_1b9_24:1.1.1.1.4.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2001.02.02.11.38.17;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.10.05.44.26;	author matz;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.02.01.03.12.19;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.45.16;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.07;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.35;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	;

1.1.1.2.2.1
date	99.07.22.10.37.26;	author matz;	state Exp;
branches;
next	;

1.1.1.1.4.1
date	98.05.27.04.47.30;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	2000.01.24.03.46.13;	author matz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.08.24.06.49.20;	author matz;	state Exp;
branches;
next	;

1.4.2.1
date	2001.02.08.09.18.00;	author matz;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* array.c (rb_ary_sort_bang): returns self, even if its length is
  less than 2.

* eval.c (POP_VARS): propagate DVAR_DONT_RECYCLE, if
  SCOPE_DONT_RECYCLE of ruby_scope is set.
@
text
@# Observable Mixin
# 
# Observers must respond to update

module Observable
  def add_observer(observer)
    @@observer_peers = [] unless defined? @@observer_peers
    unless observer.respond_to? :update
      raise NameError, "observer needs to respond to `update'" 
    end
    @@observer_peers.push observer
  end
  def delete_observer(observer)
    @@observer_peers.delete observer if defined? @@observer_peers
  end
  def delete_observers
    @@observer_peers.clear if defined? @@observer_peers
  end
  def count_observers
    if defined? @@observer_peers
      @@observer_peers.size
    else
      0
    end
  end
  def changed(state=true)
    @@observer_state = state
  end
  def changed?
    if defined? @@observer_state and @@observer_state
      true
    else
      false
    end
  end
  def notify_observers(*arg)
    if defined? @@observer_state and @@observer_state
      if defined? @@observer_peers
	for i in @@observer_peers.dup
	  i.update(*arg)
	end
      end
      @@observer_state = false
    end
  end
end
@


1.4
log
@2000-04-10
@
text
@d8 1
a8 1
    unless defined? observer.update
@


1.4.2.1
log
@* parse.y (parse_quotedwords): %w should allow parenthesis escape.

* parse.y (parse_qstring): %q should allow terminator escape.

* re.c (rb_reg_equal): all option flags should be same to be equal.
@
text
@d8 1
a8 1
    unless observer.respond_to? :update
@


1.3
log
@2000-02-01
@
text
@d7 1
a7 1
    @@observer_peers = [] unless @@observer_peers
d14 1
a14 1
    @@observer_peers.delete observer if @@observer_peers
d17 1
a17 1
    @@observer_peers.clear if @@observer_peers
d20 1
a20 1
    if @@observer_peers
d30 5
a34 1
    @@observer_state
d37 2
a38 2
    if @@observer_state
      if @@observer_peers
@


1.2
log
@1.4.0
@
text
@d35 1
a35 1
	for i in @@observer_peers
@


1.2.2.1
log
@2000-01-24
@
text
@d35 1
a35 1
	for i in @@observer_peers.dup
@


1.2.2.2
log
@matz
@
text
@d7 1
a7 1
    @@observer_peers = [] unless defined? @@observer_peers
d14 1
a14 1
    @@observer_peers.delete observer if defined? @@observer_peers
d17 1
a17 1
    @@observer_peers.clear if defined? @@observer_peers
d20 1
a20 1
    if defined? @@observer_peers
d30 1
a30 5
    if defined? @@observer_state and @@observer_state
      true
    else
      false
    end
d33 2
a34 2
    if defined? @@observer_state and @@observer_state
      if defined? @@observer_peers
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
  def changed(state=TRUE)
d33 5
a37 3
    if @@observer_peers and @@observer_state
      for i in @@observer_peers
	i.update(*arg)
d39 1
a39 1
      @@observer_state = FALSE
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@d33 3
a35 5
    if @@observer_state
      if @@observer_peers
	for i in @@observer_peers
	  i.update(*arg)
	end
@


1.1.1.2.2.1
log
@backtrace may be Qnil
@
text
@d26 1
a26 1
  def changed(state=true)
d39 1
a39 1
      @@observer_state = false
@


1.1.1.1.4.1
log
@*** empty log message ***
@
text
@d33 3
a35 5
    if @@observer_state
      if @@observer_peers
	for i in @@observer_peers
	  i.update(*arg)
	end
@

