head	1.2;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.2
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990209:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990203:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1d1:1.1.2.1
	v1_1d0:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1c7:1.1.2.1
	v1_1c6:1.1.2.1
	v1_1d-start:1.1.2.1
	v1_1c5:1.1.2.1
	v1_1dev:1.1.2.1.0.2
	v1_1c4:1.1.2.1
	v1_1c3:1.1.2.1
	v1_1c2:1.1.2.1
	v1_1c1:1.1.2.1
	v1_1c0:1.1.2.1
	v1_1b9_31:1.1.2.1
	v1_1b9_30:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	99.08.13.05.45.16;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.07.03.07.06.42;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.35;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.07.03.07.06.42;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@1.4.0
@
text
@# readbytes.rb
#
# add IO#readbytes, which reads fixed sized data.
# it guarantees read data size.

class TruncatedDataError<IOError
  def initialize(mesg, data)
    @@data = data
    super(mesg)
  end
  attr_reader :data
end

class IO
  def readbytes(n)
    str = read(n)
    if str == nil
      raise EOFError, "End of file reached"
    end
    if str.size < n
      raise TruncatedDataError.new("data truncated", str) 
    end
    str
  end
end

if __FILE__ == $0
  begin
    loop do
      print STDIN.readbytes(6)
    end
  rescue TruncatedDataError
    p $!.data
    raise
  end
end
@


1.1
log
@file readbytes.rb was initially added on branch v1_1r.
@
text
@d1 36
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 36
# readbytes.rb
#
# add IO#readbytes, which reads fixed sized data.
# it guarantees read data size.

class TruncatedDataError<IOError
  def initialize(mesg, data)
    @@data = data
    super(mesg)
  end
  attr_reader :data
end

class IO
  def readbytes(n)
    str = read(n)
    if str == nil
      raise EOFError, "End of file reached"
    end
    if str.size < n
      raise TruncatedDataError.new("data truncated", str) 
    end
    str
  end
end

if __FILE__ == $0
  begin
    loop do
      print STDIN.readbytes(6)
    end
  rescue TruncatedDataError
    p $!.data
    raise
  end
end
@


1.1.2.1
log
@1.1b9_29
@
text
@a0 36
# readbytes.rb
#
# add IO#readbytes, which reads fixed sized data.
# it guarantees read data size.

class TruncatedDataError<IOError
  def initialize(mesg, data)
    @@data = data
    super(mesg)
  end
  attr_reader :data
end

class IO
  def readbytes(n)
    str = read(n)
    if str == nil
      raise EOFError, "End of file reached"
    end
    if str.size < n
      raise TruncatedDataError.new("data truncated", str) 
    end
    str
  end
end

if __FILE__ == $0
  begin
    loop do
      print STDIN.readbytes(6)
    end
  rescue TruncatedDataError
    p $!.data
    raise
  end
end
@

