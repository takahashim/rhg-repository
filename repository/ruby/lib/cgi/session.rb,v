head	1.18;
access;
symbols
	v1_6_7:1.6.2.7
	v1_6_6:1.6.2.7
	v1_6_5:1.6.2.6
	v1_6_4:1.6.2.6
	v1_7_1:1.11
	v1_6_4_preview4:1.6.2.5
	v1_6_4_preview3:1.6.2.5
	v1_6_4_preview2:1.6.2.4
	v1_6_4_preview1:1.6.2.4
	v1_6_3:1.6.2.4
	ruby_m17n:1.7.0.2
	ruby_1_6:1.6.0.2
	v1_6_2:1.6
	v1_6_1:1.5
	v1_6_0:1.4
	v1_5_0:1.2;
locks; strict;
comment	@# @;


1.18
date	2002.08.19.05.56.09;	author matz;	state Exp;
branches;
next	1.17;

1.17
date	2002.04.10.17.02.47;	author wakou;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.10.08.45.26;	author matz;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.01.14.03.19;	author knu;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.13.08.14.25;	author matz;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.06.03.05.21;	author matz;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.02.14.19.37;	author shugo;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.06.15.05.07;	author matz;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.15.02.45.09;	author shugo;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.13.05.09.11;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.09.07.26.21;	author matz;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.28.05.00.45;	author matz;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.17.18.14.05;	author matz;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.09.07.06.59.44;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.09.04.53.14;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.01.09.41.40;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.12.02.06.58.52;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	99.11.25.09.03.08;	author matz;	state Exp;
branches;
next	;

1.6.2.1
date	2000.12.28.04.45.16;	author matz;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.01.09.07.29.05;	author matz;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.02.14.05.53.58;	author matz;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2001.02.15.02.38.59;	author shugo;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2001.05.11.05.22.00;	author matz;	state Exp;
branches;
next	1.6.2.6;

1.6.2.6
date	2001.06.02.14.16.46;	author shugo;	state Exp;
branches;
next	1.6.2.7;

1.6.2.7
date	2001.12.01.14.07.01;	author knu;	state Exp;
branches;
next	1.6.2.8;

1.6.2.8
date	2002.04.10.08.47.46;	author matz;	state Exp;
branches;
next	1.6.2.9;

1.6.2.9
date	2002.04.10.16.59.39;	author wakou;	state Exp;
branches;
next	;


desc
@@


1.18
log
@* array.c (sort_2): *a - *b may overflow.

* array.c (ary_new): len*sizeof(VALUE) may be a positive value.

* array.c (rb_ary_initialize): ditto.

* object.c (rb_class_allocate_instance): move singleton class
  check from rb_obj_alloc().

* re.c (rb_reg_initialize): should not modify frozen Regexp.

* ext/tcltklib/tcltklib.c (ip_init): allocation framework.
@
text
@# Copyright (C) 2001  Yukihiro "Matz" Matsumoto
# Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
# Copyright (C) 2000  Information-technology Promotion Agency, Japan

require 'cgi'
require 'final'

class CGI
  class Session

    attr_reader :session_id

    def Session::callback(dbman)
      lambda{
	dbman[0].close unless dbman.empty?
      }
    end

    def Session::create_new_id
      require 'digest/md5'
      md5 = Digest::MD5::new
      md5.update(String(Time::now))
      md5.update(String(rand(0)))
      md5.update(String($$))
      md5.update('foobar')
      md5.hexdigest[0,16]
    end

    def initialize(request, option={})
      session_key = option['session_key'] || '_session_id'
      id, = option['session_id']
      unless id
	if option['new_session']
	  id = Session::create_new_id
	end
      end
      unless id
	id, = request[session_key]
        id = id.read if id.respond_to?(:read)
	unless id
	  id, = request.cookies[session_key]
	end
	unless id
	  if option.key?('new_session') and not option['new_session']
	    raise ArgumentError, "session_key `%s' should be supplied"%session_key
	  end
	  id = Session::create_new_id
	end
      end
      @@session_id = id
      dbman = option['database_manager'] || FileStore
      @@dbman = dbman::new(self, option)
      request.instance_eval do
	@@output_hidden = {session_key => id}
	@@output_cookies =  [
          Cookie::new("name" => session_key,
		      "value" => id,
		      "expires" => option['session_expires'],
		      "domain" => option['session_domain'],
		      "secure" => option['session_secure'],
		      "path" => if option['session_path'] then
				  option['session_path']
		                elsif ENV["SCRIPT_NAME"] then
				  File::dirname(ENV["SCRIPT_NAME"])
				else
				  ""
				end)
        ]
      end
      @@dbprot = [@@dbman]
      ObjectSpace::define_finalizer(self, Session::callback(@@dbprot))
    end

    def [](key)
      unless @@data
	@@data = @@dbman.restore
      end
      @@data[key]
    end

    def []=(key, val)
      unless @@write_lock
	@@write_lock = true
      end
      unless @@data
	@@data = @@dbman.restore
      end
      @@data[key] = val
    end

    def update
      @@dbman.update
    end

    def close
      @@dbman.close
      @@dbprot.clear
    end

    def delete
      @@dbman.delete
      @@dbprot.clear
    end

    class FileStore
      def check_id(id)
	/[^0-9a-zA-Z]/ =~ id.to_s ? false : true
      end

      def initialize(session, option={})
	dir = option['tmpdir'] || ENV['TMP'] || '/tmp'
	prefix = option['prefix'] || ''
	id = session.session_id
	unless check_id(id)
	  raise ArgumentError, "session_id `%s' is invalid" % id
	end
	path = dir+"/"+prefix+id
	path.untaint
	unless File::exist? path
	  @@hash = {}
	end
	begin
	  @@f = open(path, "r+")
	rescue Errno::ENOENT
	  @@f = open(path, "w+")
	end
      end

      def restore
	unless @@hash
	  @@hash = {}
	  @@f.flock File::LOCK_EX
	  @@f.rewind
	  for line in @@f
	    line.chomp!
	    k, v = line.split('=',2)
	    @@hash[CGI::unescape(k)] = CGI::unescape(v)
	  end
	end
	@@hash
      end

      def update
	return unless @@hash
	@@f.rewind
	for k,v in @@hash
	  @@f.printf "%s=%s\n", CGI::escape(k), CGI::escape(String(v))
	end
	@@f.truncate @@f.tell
      end

      def close
	return if @@f.closed?
	update
	@@f.close
      end

      def delete
	path = @@f.path
	@@f.close
	File::unlink path
      end
    end

    class MemoryStore
      GLOBAL_HASH_TABLE = {}

      def initialize(session, option=nil)
	@@session_id = session.session_id
	GLOBAL_HASH_TABLE[@@session_id] ||= {}
      end

      def restore
	GLOBAL_HASH_TABLE[@@session_id]
      end

      def update
	# don't need to update; hash is shared
      end

      def close
	# don't need to close
      end

      def delete
	GLOBAL_HASH_TABLE.delete(@@session_id)
      end
    end
  end
end
@


1.17
log
@	* lib/cgi/session.rb: support for multipart form.
@
text
@d58 3
@


1.16
log
@* variable.c (rb_obj_remove_instance_variable): raise NameError if
  specified instance variable is not defined.

* variable.c (generic_ivar_remove): modified to check ivar
  existence.

* file.c (rb_file_s_extname): new method based on the proposal
  (and patch) from Mike Hall. [new]

* eval.c (error_handle): default to 1 unless status is set.

* eval.c (ruby_options): guard error_handle() with PROT_NONE.

* eval.c (ruby_stop): ditto.

* math.c (math_acosh): added. [new]

* math.c (math_asinh): ditto.

* math.c (math_atanh): ditto.

* struct.c (rb_struct_each_pair): method added. [new]

* class.c (rb_singleton_class): wrong condition; was creating
  unnecessary singleton class.
@
text
@d39 1
@


1.15
log
@Reflect the update of the MD5 module which is now Digest::MD5.
@
text
@d140 1
@


1.14
log
@* signal.c (sighandle): should not re-register sighandler if
  POSIX_SIGNAL is defined.

* eval.c (error_print): errat array may be empty.

* eval.c (rb_eval_cmd): should not upgrade safe level unless
  explicitly specified by argument newly added.

* signal.c (sig_trap): should not allow tainted trap closure.

* variable.c (rb_f_trace_var): should not allow trace_var on safe
  level higher than 3.

* variable.c (rb_f_trace_var): should not allow tainted trace
  closure.

* gc.c: do not use static stack until system stack overflows.

* eval.c (eval): should call Exception#exception instead of
  calling rb_exc_new3() directly.

* error.c (exc_exception): set "mesg" directly to the clone.  it
  might be better to set mesg via some method for flexibility.

* variable.c (cvar_override_check): should print original module
  name, if 'a' is T_ICLASS.

* parse.y (yylex): float '1_.0' should not be allowed.

* variable.c (var_getter): should care about var as Qfalse
  (ruby-bugs#PR199).

* array.c (cmpint): <=> or block for {min,max} may return bignum.

* array.c (sort_1): use rb_compint.

* array.c (sort_2): ditto.

* enum.c (min_ii): ditto.

* enum.c (min_ii): ditto.

* enum.c (max_i): ditto.

* enum.c (max_ii): ditto.
@
text
@d20 2
a21 2
      require 'md5'
      md5 = MD5::new
@


1.13
log
@* string.c (rb_str_lstrip_bang): new method.

* string.c (rb_str_rstrip_bang): new method.

* string.c (rb_str_associate): should consider STR_ASSOC too.

* eval.c (rb_undefined): do not recurse if method_missing is
  undefined.

* process.c (proc_waitpid): now all arguments are optional.

* process.c (Init_process): waitpid is now alias to wait.

* process.c (Init_process): waitpid2 is now alias to wait2.

* process.c (rb_waitpid): made public.

* ext/pty/pty.c (pty_getpty): avoid disturbing SIGCHLD using
  thread and rb_waitpid.

* process.c (proc_getpgrp): now takes no argument on all
  platforms.

* process.c (proc_setpgrp): ditto.

* ext/socket/socket.c (sock_s_pack_sockaddr_in): added
  Socket::pack_sockaddr_in(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_un): added
  Socket::pack_sockaddr_un(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_in): added
  Socket::unpack_sockaddr_in(). [new]

* ext/socket/socket.c (sock_s_pack_sockaddr_un): added
  Socket::unpack_sockaddr_un(). [new]
@
text
@d84 1
a84 1
      @@data[key] = String(val)
d142 1
a142 1
	  @@f.printf "%s=%s\n", CGI::escape(k), CGI::escape(v)
@


1.12
log
@* lib/cgi/session.rb: don't use module_function for Class.
@
text
@d15 1
a15 1
	dbman.close
d66 2
a67 1
      ObjectSpace::define_finalizer(self, Session::callback(@@dbman))
d93 1
d98 1
@


1.11
log
@forgot some checkins.
@
text
@a101 1
      module_function :check_id
@


1.10
log
@* lib/cgi/session.rb (close): fixed reversed condition.
@
text
@d99 5
d107 5
a111 1
	path = dir+"/"+prefix+session.session_id
d161 1
a161 1
      def initialize(session, option={})
d163 1
a163 1
	GLOBAL_HASH_TABLE[@@session_id] = {}
d179 1
a179 1
	GLOBAL_HASH_TABLE[@@session_id] = nil
@


1.9
log
@* io.c (rb_io_ctl): do not call ioctl/fcntl for f2, if f and f2
  have same fileno.

* eval.c (rb_load): raise LocaJumpError if unexpected local jumps
  appear during load.

* ext/socket/socket.c (bsock_close_read): don't call rb_thread_fd_close();
  it's supposed to be called by io_io_close().

* ext/socket/socket.c (bsock_close_read): do not modify f and f2.

* ext/socket/socket.c (bsock_close_write): ditto.

* ext/socket/socket.c (sock_new): avoid dup(2) on sockets.

* parse.y (primary): preserve and clear in_single and in_def using
  stack to prevent nested method errors in singleton class bodies.
@
text
@d137 1
a137 1
	return unless @@f.closed?
a143 1
	return unless @@f.closed?
@


1.8
log
@* enum.c (enum_inject): new method.

* gc.c (rb_gc_call_finalizer_at_exit): clear klass member of
  terminating object.

* eval.c (rb_call): raise exception for terminated object.

* bignum.c (bigdivrem): t2 might be too big for signed long; do
  not use rb_int2big(), but rb_uint2big().

* error.c (rb_load_fail): new func to report LoadError.

* ruby.c (load_file): use rb_load_fail.

* eval.c (ruby_finalize): should enclosed by PUSH_TAG/POP_TAG.

* gc.c (rb_gc_mark): link 2 of NODE_IFUNC should not be explicitly
  marked.  it may contain non object pointer.

* re.c (reg_s_last_match): Regexp::last_match(nth) returns nth
  substring of the match  (alternative for $& and $<digit>).

* eval.c (rb_mod_define_method): wrong comparison for blocks.

* gc.c (id2ref): should handle Symbol too.

* gc.c (id2ref): should print original ptr value

* eval.c (rb_iterate): NODE_CFUNC does not protect its data
  (nd_tval), so create new node NODE_IFUNC for iteration C
  function.

* eval.c (rb_yield_0): use NODE_IFUNC.

* gc.c (rb_gc_mark): support NODE_IFUNC.

* gc.c (mem_error): prohibit recursive mem_error().
  (ruby-bugs-ja:PR#36)

* eval.c (rb_thread_fd_writable): should not switch context if
  rb_thread_critical is set.

* eval.c (rb_thread_wait_fd): ditto.

* eval.c (rb_thread_wait_for): ditto.

* eval.c (rb_thread_select): ditto.

* eval.c (rb_thread_join): join during critical section causes
  deadlock.
@
text
@a27 1
    private :create_new_id
@


1.7
log
@changes from personal modifies -- matz
@
text
@d1 1
d19 1
a19 1
    def create_new_id
d26 1
a26 1
      @@session_id = md5.hexdigest[0,16]
d35 1
a35 1
	  id = create_new_id
d47 1
a47 1
	  id = create_new_id
d58 3
a60 3
		      "path" => if ENV["PATH_INFO"] then
				  File::dirname(ENV["PATH_INFO"])
				elsif ENV["SCRIPT_NAME"] then
d138 1
d145 1
@


1.6
log
@1.6.2 (to be)
@
text
@d57 3
a59 1
		      "path" => if ENV["SCRIPT_NAME"] then
@


1.6.2.1
log
@matz
@
text
@d57 1
a57 3
                     "path" => if ENV["PATH_INFO"] then
                                 File::dirname(ENV["PATH_INFO"])
                               elsif ENV["SCRIPT_NAME"] then
@


1.6.2.2
log
@* pack.c (pack_pack): template "m2" or "u2" caused inifinite loop.

* eval.c (ruby_finalize): should enclosed by PUSH_TAG/POP_TAG.

* eval.c (rb_mod_define_method): wrong comparison for blocks.

* gc.c (id2ref): should handle Symbol too.

* gc.c (id2ref): should print original ptr value

* eval.c (rb_iterate): NODE_CFUNC does not protect its data
  (nd_tval), so create new node NODE_IFUNC for iteration C
  function.

* eval.c (rb_yield_0): use NODE_IFUNC.

* gc.c (rb_gc_mark): support NODE_IFUNC.
@
text
@a0 1
# Copyright (C) 2001  Yukihiro "Matz" Matsumoto
d18 1
a18 1
    def Session::create_new_id
d25 1
a25 1
      md5.hexdigest[0,16]
d34 1
a34 1
	  id = Session::create_new_id
d46 1
a46 1
	  id = Session::create_new_id
d57 3
a59 3
		      "path" => if option['session_path'] then
				  option['session_path']
		                elsif ENV["SCRIPT_NAME"] then
a136 1
	return unless @@f.closed?
a142 1
	return unless @@f.closed?
@


1.6.2.3
log
@ping.rb patch
@
text
@d28 1
@


1.6.2.4
log
@* lib/cgi/session.rb (close): fixed reversed condition.
@
text
@d137 1
a137 1
	return if @@f.closed?
d144 1
@


1.6.2.5
log
@* bignum.c (bigdivrem): access boundary bug.
@
text
@a98 5
      def check_id(id)
	/[^0-9a-zA-Z]/ =~ id.to_s ? false : true
      end
      module_function :check_id

d102 1
a102 5
	id = session.session_id
	unless check_id(id)
	  raise ArgumentError, "session_id `%s' is invalid" % id
	end
	path = dir+"/"+prefix+id
d152 1
a152 1
      def initialize(session, option=nil)
d154 1
a154 1
	GLOBAL_HASH_TABLE[@@session_id] ||= {}
d170 1
a170 1
	GLOBAL_HASH_TABLE.delete(@@session_id)
@


1.6.2.6
log
@* lib/cgi/session.rb: don't use module_function for Class.
@
text
@d102 1
@


1.6.2.7
log
@Reflect the update of the MD5 module which is now Digest::MD5.
@
text
@d20 2
a21 2
      require 'digest/md5'
      md5 = Digest::MD5::new
@


1.6.2.8
log
@* variable.c (rb_obj_remove_instance_variable): raise NameError if
  specified instance variable is not defined.

* variable.c (generic_ivar_remove): modified to check ivar
  existence.

* class.c (rb_singleton_class): wrong condition; was creating
  unnecessary singleton class.

* numeric.c (int_step): step may be a float less than 1.
@
text
@a136 1
	return unless @@hash
@


1.6.2.9
log
@	* lib/cgi/session.rb: support for multipart form.
@
text
@a38 1
        id = id.read if id.respond_to?(:read)
@


1.5
log
@matz
@
text
@d55 2
a56 1
          Cookie::new(session_key => id,
d86 4
@


1.4
log
@2000-05-09
@
text
@d54 8
a61 1
	@@output_cookies =  [Cookie::new(session_key,id)]
@


1.3
log
@2000-05-01
@
text
@d2 1
a2 1
# Copyright (C) 2000  Information-technology Promotion Agancy, Japan
@


1.2
log
@19991292
@
text
@d1 2
@


1.1
log
@19991125
@
text
@d2 1
a2 1
require 'CGI'
@
