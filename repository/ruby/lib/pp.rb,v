head	1.16;
access;
symbols;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2002.10.08.01.58.34;	author akr;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.11.12.29.17;	author akr;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.24.05.18.08;	author akr;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.03.02.49.42;	author akr;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.30.07.30.26;	author akr;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.29.16.21.18;	author akr;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.28.14.42.46;	author matz;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.28.08.55.10;	author akr;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.27.12.01.07;	author akr;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.27.06.27.20;	author akr;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.25.18.24.46;	author akr;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.22.02.31.15;	author akr;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.31.04.57.54;	author akr;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.31.04.23.43;	author akr;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.29.09.58.41;	author akr;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.24.17.37.49;	author akr;	state Exp;
branches;
next	;


desc
@@


1.16
log
@* lib/prettyprint.rb (PrettyPrint.singleline_format): new method.
@
text
@# $Id$

=begin
= Pretty-printer for Ruby objects.

== Which seems better?

non-pretty-printed output by (({p})) is:
  #<PP:0x81a0d10 @@stack=[], @@genspace=#<Proc:0x81a0cc0>, @@nest=[0], @@newline="\n", @@buf=#<PrettyPrint::Group:0x81a0c98 @@group=0, @@tail=0, @@buf=[#<PrettyPrint::Group:0x81a0ba8 @@group=1, @@tail=0, @@buf=[#<PrettyPrint::Text:0x81a0b30 @@tail=2, @@width=1, @@text="[">, #<PrettyPrint::Group:0x81a0a68 @@group=2, @@tail=1, @@buf=[#<PrettyPrint::Text:0x81a09f0 @@tail=1, @@width=1, @@text="1">], @@singleline_width=1>, #<PrettyPrint::Text:0x81a0a7c @@tail=0, @@width=1, @@text=",">, #<PrettyPrint::Breakable:0x81a0a2c @@group=2, @@genspace=#<Proc:0x81a0cc0>, @@newline="\n", @@indent=1, @@tail=2, @@sep=" ", @@width=1>, #<PrettyPrint::Group:0x81a09c8 @@group=2, @@tail=1, @@buf=[#<PrettyPrint::Text:0x81a0950 @@tail=1, @@width=1, @@text="2">], @@singleline_width=1>, #<PrettyPrint::Text:0x81a0af4 @@tail=0, @@width=1, @@text="]">], @@singleline_width=6>], @@singleline_width=6>, @@sharing_detection=false>

pretty-printed output by (({pp})) is:
  #<PP:0x40d0688
   @@buf=
    #<PrettyPrint::Group:0x40d064c
     @@buf=
      [#<PrettyPrint::Group:0x40d05d4
        @@buf=
         [#<PrettyPrint::Text:0x40d0598 @@tail=2, @@text="[", @@width=1>,
          #<PrettyPrint::Group:0x40d0534
           @@buf=[#<PrettyPrint::Text:0x40d04f8 @@tail=1, @@text="1", @@width=1>],
           @@group=2,
           @@singleline_width=1,
           @@tail=1>,
          #<PrettyPrint::Text:0x40d053e @@tail=0, @@text=",", @@width=1>,
          #<PrettyPrint::Breakable:0x40d0516
           @@genspace=#<Proc:0x40d0656>,
           @@group=2,
           @@indent=1,
           @@newline="\n",
           @@sep=" ",
           @@tail=2,
           @@width=1>,
          #<PrettyPrint::Group:0x40d04e4
           @@buf=[#<PrettyPrint::Text:0x40d04a8 @@tail=1, @@text="2", @@width=1>],
           @@group=2,
           @@singleline_width=1,
           @@tail=1>,
          #<PrettyPrint::Text:0x40d057a @@tail=0, @@text="]", @@width=1>],
        @@group=1,
        @@singleline_width=6,
        @@tail=0>],
     @@group=0,
     @@singleline_width=6,
     @@tail=0>,
   @@genspace=#<Proc:0x40d0656>,
   @@nest=[0],
   @@newline="\n",
   @@sharing_detection=false,
   @@stack=[]>

I like the latter.  If you do too, this library is for you.

== Usage

: pp(obj)
    output ((|obj|)) to (({$>})) in pretty printed format.

    It returns (({nil})).

== Output Customization
To define your customized pretty printing function for your classes,
redefine a method (({pretty_print(((|pp|)))})) in the class.
It takes an argument ((|pp|)) which is an instance of the class ((<PP>)).
The method should use PP#text, PP#breakable, PP#nest, PP#group and
PP#pp to print the object.

= PP
== super class
((<PrettyPrint>))

== class methods
--- PP.pp(obj[, out[, width]])
    outputs ((|obj|)) to ((|out|)) in pretty printed format of
    ((|width|)) columns in width.

    If ((|out|)) is ommitted, (({$>})) is assumed.
    If ((|width|)) is ommitted, 79 is assumed.

    PP.pp returns ((|out|)).

--- PP.sharing_detection
    returns the sharing detection flag as a boolean value.
    It is false by default.

--- PP.sharing_detection = boolean_value
    sets the sharing detection flag.

== methods
--- pp(obj)
    adds ((|obj|)) to the pretty printing buffer
    using Object#pretty_print or Object#pretty_print_cycle.

    Object#pretty_print_cycle is used when ((|obj|)) is already
    printed, a.k.a the object reference chain has a cycle.

--- object_group(obj) { ... }
    is a convenience method which is same as follows:

      group(1, '#<' + obj.class.name, '>') { ... }

--- comma_breakable
    is a convenience method which is same as follows:

      text ','
      breakable

= Object
--- pretty_print(pp)
    is a default pretty printing method for general objects.
    It calls (({pretty_print_instance_variables})) to list instance variables.

    If (({self})) has a customized (redefined) (({inspect})) method,
    the result of (({self.inspect})) is used but it obviously has no
    line break hints.

    This module provides predefined pretty_print() methods for some of
    the most commonly used built-in classes for convenience.

--- pretty_print_cycle(pp)
    is a default pretty printing method for general objects that are
    detected as part of a cycle.

--- pretty_print_instance_variables
    returns a sorted array of instance variable names.

    This method should return an array of names of instance variables as symbols or strings as:
    (({[:@@a, :@@b]})).
=end

require 'prettyprint'

module Kernel
  private
  def pp(*objs)
    objs.each {|obj|
      PP.pp(obj)
    }
    nil
  end
end

class PP < PrettyPrint
  def PP.pp(obj, out=$>, width=79)
    pp = PP.new(out, width)
    pp.guard_inspect_key {pp.pp obj}
    pp.flush
    #$pp = pp
    out << "\n"
  end

  @@@@sharing_detection = false
  def PP.sharing_detection
    return @@@@sharing_detection
  end

  def PP.sharing_detection=(val)
    @@@@sharing_detection = val
  end

  def initialize(out, width=79)
    super
    @@sharing_detection = @@@@sharing_detection
  end

  InspectKey = :__inspect_key__

  def guard_inspect_key
    if Thread.current[InspectKey] == nil
      Thread.current[InspectKey] = []
    end

    save = Thread.current[InspectKey]

    begin
      Thread.current[InspectKey] = []
      yield
    ensure
      Thread.current[InspectKey] = save
    end
  end

  def pp(obj)
    id = obj.__id__

    if Thread.current[InspectKey].include? id
      group {obj.pretty_print_cycle self}
      return
    end

    begin
      Thread.current[InspectKey] << id
      group {obj.pretty_print self}
    ensure
      Thread.current[InspectKey].pop unless @@sharing_detection
    end
  end

  def object_group(obj, &block)
    group(1, '#<' + obj.class.name, '>', &block)
  end

  def object_address_group(obj, &block)
    group(1, sprintf('#<%s:0x%x', obj.class.name, obj.__id__ * 2), '>', &block)
  end

  def comma_breakable
    text ','
    breakable
  end

  def pp_object(obj)
    object_address_group(obj) {
      obj.pretty_print_instance_variables.each {|v|
        v = v.to_s if Symbol === v
        text ',' unless first?
        breakable
        text v
        text '='
        group(1) {
          breakable ''
          pp(obj.instance_eval(v))
        }
      }
    }
  end

  def pp_hash(obj)
    group(1, '{', '}') {
      obj.each {|k, v|
        comma_breakable unless first?
        group {
          pp k
          text '=>'
          group(1) {
            breakable ''
            pp v
          }
        }
      }
    }
  end

  module ObjectMixin
    # 1. specific pretty_print
    # 2. specific inspect
    # 3. generic pretty_print

    Key = :__pp_instead_of_inspect__

    def pretty_print(pp)
      # specific pretty_print is not defined, try specific inspect.
      begin
        old = Thread.current[Key]
        result1 = sprintf('#<%s:0x%x pretty_printed>', self.class.name, self.__id__ * 2)
        Thread.current[Key] = [pp, result1]
        result2 = ObjectMixin.pp_call_inspect(self)
      ensure
        Thread.current[Key] = old
      end

      unless result1.equal? result2
        pp.text result2
      end
    end

    def ObjectMixin.pp_call_inspect(obj); obj.inspect; end
    CallInspectFrame = "#{__FILE__}:#{__LINE__ - 1}:in `pp_call_inspect'"

    def inspect
      if CallInspectFrame == caller[0]
        # specific inspect is also not defined, use generic pretty_print. 
        pp, result = Thread.current[Key]
        pp.pp_object(self)
        result
      else
        super
      end
    end

    def pretty_print_cycle(pp)
      pp.object_address_group(self) {
        pp.breakable
        pp.text '...'
      }
    end

    def pretty_print_instance_variables
      instance_variables.sort
    end
  end
end

[Numeric, FalseClass, TrueClass, Module].each {|c|
  c.class_eval {
    def pretty_print(pp)
      pp.text self.to_s
    end
  }
}

class Array
  def pretty_print(pp)
    pp.group(1, '[', ']') {
      self.each {|v|
        pp.comma_breakable unless pp.first?
        pp.pp v
      }
    }
  end

  def pretty_print_cycle(pp)
    pp.text(empty? ? '[]' : '[...]')
  end
end

class Hash
  def pretty_print(pp)
    pp.pp_hash self
  end

  def pretty_print_cycle(pp)
    pp.text(empty? ? '{}' : '{...}')
  end
end

class << ENV
  def pretty_print(pp)
    pp.pp_hash self
  end
end

class Struct
  def pretty_print(pp)
    pp.object_group(self) {
      self.members.each {|member|
        pp.text "," unless pp.first?
        pp.breakable
        pp.text member.to_s
        pp.text '='
        pp.group(1) {
          pp.breakable ''
          pp.pp self[member]
        }
      }
    }
  end

  def pretty_print_cycle(pp)
    pp.text sprintf("#<%s:...>", self.class.name)
  end
end

class Range
  def pretty_print(pp)
    pp.pp self.begin
    pp.breakable ''
    pp.text(self.exclude_end? ? '...' : '..')
    pp.breakable ''
    pp.pp self.end
  end
end

class File
  class Stat
    def pretty_print(pp)
      require 'etc.so'
      pp.object_group(self) {
        pp.breakable
        pp.text sprintf("dev=0x%x", self.dev); pp.comma_breakable
        pp.text "ino="; pp.pp self.ino; pp.comma_breakable
        pp.group {
          m = self.mode
          pp.text sprintf("mode=0%o", m)
          pp.breakable
          pp.text sprintf("(%s %c%c%c%c%c%c%c%c%c)",
            self.ftype,
            (m & 0400 == 0 ? ?- : ?r),
            (m & 0200 == 0 ? ?- : ?w),
            (m & 0100 == 0 ? (m & 04000 == 0 ? ?- : ?S) :
                             (m & 04000 == 0 ? ?x : ?s)),
            (m & 0040 == 0 ? ?- : ?r),
            (m & 0020 == 0 ? ?- : ?w),
            (m & 0010 == 0 ? (m & 02000 == 0 ? ?- : ?S) :
                             (m & 02000 == 0 ? ?x : ?s)),
            (m & 0004 == 0 ? ?- : ?r),
            (m & 0002 == 0 ? ?- : ?w),
            (m & 0001 == 0 ? (m & 01000 == 0 ? ?- : ?T) :
                             (m & 01000 == 0 ? ?x : ?t)))
        }
        pp.comma_breakable
        pp.text "nlink="; pp.pp self.nlink; pp.comma_breakable
        pp.group {
          pp.text "uid="; pp.pp self.uid
          begin
            name = Etc.getpwuid(self.uid).name
            pp.breakable; pp.text "(#{name})"
          rescue ArgumentError
          end
        }
        pp.comma_breakable
        pp.group {
          pp.text "gid="; pp.pp self.gid
          begin
            name = Etc.getgrgid(self.gid).name
            pp.breakable; pp.text "(#{name})"
          rescue ArgumentError
          end
        }
        pp.comma_breakable
        pp.group {
          pp.text sprintf("rdev=0x%x", self.rdev)
          pp.breakable
          pp.text sprintf('(%d, %d)', self.rdev_major, self.rdev_minor)
        }
        pp.comma_breakable
        pp.text "size="; pp.pp self.size; pp.comma_breakable
        pp.text "blksize="; pp.pp self.blksize; pp.comma_breakable
        pp.text "blocks="; pp.pp self.blocks; pp.comma_breakable
        pp.group {
          t = self.atime
          pp.text "atime="; pp.pp t
          pp.breakable; pp.text "(#{t.tv_sec})"
        }
        pp.comma_breakable
        pp.group {
          t = self.mtime
          pp.text "mtime="; pp.pp t
          pp.breakable; pp.text "(#{t.tv_sec})"
        }
        pp.comma_breakable
        pp.group {
          t = self.ctime
          pp.text "ctime="; pp.pp t
          pp.breakable; pp.text "(#{t.tv_sec})"
        }
      }
    end
  end
end

class << ARGF
  def pretty_print(pp)
    pp.text self.to_s
  end
end

class Object
  include PP::ObjectMixin
end

[Numeric, Symbol, FalseClass, TrueClass, NilClass, Module].each {|c|
  c.class_eval {
    alias :pretty_print_cycle :pretty_print
  }
}

if __FILE__ == $0
  require 'runit/testcase'
  require 'runit/cui/testrunner'

  class PPTest < RUNIT::TestCase
    def test_list0123_12
      assert_equal("[0, 1, 2, 3]\n", PP.pp([0,1,2,3], '', 12))
    end

    def test_list0123_11
      assert_equal("[0,\n 1,\n 2,\n 3]\n", PP.pp([0,1,2,3], '', 11))
    end
  end

  class HasInspect
    def initialize(a)
      @@a = a
    end

    def inspect
      return "<inspect:#{@@a.inspect}>"
    end
  end

  class HasPrettyPrint
    def initialize(a)
      @@a = a
    end

    def pretty_print(pp)
      pp.text "<pretty_print:"
      pp.pp @@a
      pp.text ">"
    end
  end

  class HasBoth
    def initialize(a)
      @@a = a
    end

    def inspect
      return "<inspect:#{@@a.inspect}>"
    end

    def pretty_print(pp)
      pp.text "<pretty_print:"
      pp.pp @@a
      pp.text ">"
    end
  end

  class PPInspectTest < RUNIT::TestCase
    def test_hasinspect
      a = HasInspect.new(1)
      assert_equal("<inspect:1>\n", PP.pp(a, ''))
    end

    def test_hasprettyprint
      a = HasPrettyPrint.new(1)
      assert_equal("<pretty_print:1>\n", PP.pp(a, ''))
    end

    def test_hasboth
      a = HasBoth.new(1)
      assert_equal("<pretty_print:1>\n", PP.pp(a, ''))
    end
  end

  class PPCycleTest < RUNIT::TestCase
    def test_array
      a = []
      a << a
      assert_equal("[[...]]\n", PP.pp(a, ''))
    end

    def test_hash
      a = {}
      a[0] = a
      assert_equal("{0=>{...}}\n", PP.pp(a, ''))
    end

    S = Struct.new("S", :a, :b)
    def test_struct
      a = S.new(1,2)
      a.b = a
      assert_equal("#<Struct::S a=1, b=#<Struct::S:...>>\n", PP.pp(a, ''))
    end

    def test_object
      a = Object.new
      a.instance_eval {@@a = a}
      assert_equal(a.inspect + "\n", PP.pp(a, ''))
    end

    def test_withinspect
      a = []
      a << HasInspect.new(a)
      assert_equal("[<inspect:[...]>]\n", PP.pp(a, ''))
    end
  end

  RUNIT::CUI::TestRunner.run(PPTest.suite)
  RUNIT::CUI::TestRunner.run(PPInspectTest.suite)
  RUNIT::CUI::TestRunner.run(PPCycleTest.suite)
end
@


1.15
log
@* pp.rb (ARGF.pretty_print): implemented.
(PP.pp): arguments reordered.
@
text
@d82 1
a82 1
    returns the sharing detection flag as boolean value.
@


1.14
log
@* lib/time.rb (Time.rfc2822, Time#rfc2822): preserve localtimeness.

* lib/pp.rb: pretty_print_cycled is renamed to pretty_print_cycle.
@
text
@d72 1
a72 1
--- PP.pp(obj[, width[, out]])
d76 5
d124 1
a124 2
    is a method to list instance variables used by the default implementation
    of (({pretty_print})).
d143 1
a143 1
  def PP.pp(obj, width=79, out=$>)
d441 6
d463 1
a463 1
      assert_equal("[0, 1, 2, 3]\n", PP.pp([0,1,2,3], 12, ''))
d467 1
a467 1
      assert_equal("[0,\n 1,\n 2,\n 3]\n", PP.pp([0,1,2,3], 11, ''))
d512 1
a512 1
      assert_equal("<inspect:1>\n", PP.pp(a, 79, ''))
d517 1
a517 1
      assert_equal("<pretty_print:1>\n", PP.pp(a, 79, ''))
d522 1
a522 1
      assert_equal("<pretty_print:1>\n", PP.pp(a, 79, ''))
d530 1
a530 1
      assert_equal("[[...]]\n", PP.pp(a, 79, ''))
d536 1
a536 1
      assert_equal("{0=>{...}}\n", PP.pp(a, 79, ''))
d543 1
a543 1
      assert_equal("#<Struct::S a=1, b=#<Struct::S:...>>\n", PP.pp(a, 79, ''))
d549 1
a549 1
      assert_equal(a.inspect + "\n", PP.pp(a, 79, ''))
d555 1
a555 1
      assert_equal("[<inspect:[...]>]\n", PP.pp(a, 79, ''))
@


1.13
log
@expand TABs.
@
text
@d86 1
a86 1
    using Object#pretty_print or Object#pretty_print_cycled.
d88 1
a88 1
    Object#pretty_print_cycled is used when ((|obj|)) is already
d114 1
a114 1
--- pretty_print_cycled(pp)
d182 1
a182 1
      group {obj.pretty_print_cycled self}
d276 1
a276 1
    def pretty_print_cycled(pp)
d307 1
a307 1
  def pretty_print_cycled(pp)
d317 1
a317 1
  def pretty_print_cycled(pp)
d344 1
a344 1
  def pretty_print_cycled(pp)
d443 1
a443 1
    alias :pretty_print_cycled :pretty_print
@


1.12
log
@made object address test to compare inspect's result.
@
text
@d17 25
a41 25
	@@buf=
	 [#<PrettyPrint::Text:0x40d0598 @@tail=2, @@text="[", @@width=1>,
	  #<PrettyPrint::Group:0x40d0534
	   @@buf=[#<PrettyPrint::Text:0x40d04f8 @@tail=1, @@text="1", @@width=1>],
	   @@group=2,
	   @@singleline_width=1,
	   @@tail=1>,
	  #<PrettyPrint::Text:0x40d053e @@tail=0, @@text=",", @@width=1>,
	  #<PrettyPrint::Breakable:0x40d0516
	   @@genspace=#<Proc:0x40d0656>,
	   @@group=2,
	   @@indent=1,
	   @@newline="\n",
	   @@sep=" ",
	   @@tail=2,
	   @@width=1>,
	  #<PrettyPrint::Group:0x40d04e4
	   @@buf=[#<PrettyPrint::Text:0x40d04a8 @@tail=1, @@text="2", @@width=1>],
	   @@group=2,
	   @@singleline_width=1,
	   @@tail=1>,
	  #<PrettyPrint::Text:0x40d057a @@tail=0, @@text="]", @@width=1>],
	@@group=1,
	@@singleline_width=6,
	@@tail=0>],
d210 9
a218 9
	v = v.to_s if Symbol === v
	text ',' unless first?
	breakable
	text v
	text '='
	group(1) {
	  breakable ''
	  pp(obj.instance_eval(v))
	}
d226 9
a234 9
	comma_breakable unless first?
	group {
	  pp k
	  text '=>'
	  group(1) {
	    breakable ''
	    pp v
	  }
	}
d250 1
a250 1
	result1 = sprintf('#<%s:0x%x pretty_printed>', self.class.name, self.__id__ * 2)
d252 1
a252 1
	result2 = ObjectMixin.pp_call_inspect(self)
d267 4
a270 4
	# specific inspect is also not defined, use generic pretty_print. 
	pp, result = Thread.current[Key]
	pp.pp_object(self)
	result
d272 1
a272 1
	super
d278 2
a279 2
	pp.breakable
	pp.text '...'
d301 2
a302 2
	pp.comma_breakable unless pp.first?
	pp.pp v
d332 8
a339 8
	pp.text "," unless pp.first?
	pp.breakable
	pp.text member.to_s
	pp.text '='
	pp.group(1) {
	  pp.breakable ''
	  pp.pp self[member]
	}
d364 68
a431 68
	pp.breakable
	pp.text sprintf("dev=0x%x", self.dev); pp.comma_breakable
	pp.text "ino="; pp.pp self.ino; pp.comma_breakable
	pp.group {
	  m = self.mode
	  pp.text sprintf("mode=0%o", m)
	  pp.breakable
	  pp.text sprintf("(%s %c%c%c%c%c%c%c%c%c)",
	    self.ftype,
	    (m & 0400 == 0 ? ?- : ?r),
	    (m & 0200 == 0 ? ?- : ?w),
	    (m & 0100 == 0 ? (m & 04000 == 0 ? ?- : ?S) :
	                     (m & 04000 == 0 ? ?x : ?s)),
	    (m & 0040 == 0 ? ?- : ?r),
	    (m & 0020 == 0 ? ?- : ?w),
	    (m & 0010 == 0 ? (m & 02000 == 0 ? ?- : ?S) :
	                     (m & 02000 == 0 ? ?x : ?s)),
	    (m & 0004 == 0 ? ?- : ?r),
	    (m & 0002 == 0 ? ?- : ?w),
	    (m & 0001 == 0 ? (m & 01000 == 0 ? ?- : ?T) :
	                     (m & 01000 == 0 ? ?x : ?t)))
	}
	pp.comma_breakable
	pp.text "nlink="; pp.pp self.nlink; pp.comma_breakable
	pp.group {
	  pp.text "uid="; pp.pp self.uid
	  begin
	    name = Etc.getpwuid(self.uid).name
	    pp.breakable; pp.text "(#{name})"
	  rescue ArgumentError
	  end
	}
	pp.comma_breakable
	pp.group {
	  pp.text "gid="; pp.pp self.gid
	  begin
	    name = Etc.getgrgid(self.gid).name
	    pp.breakable; pp.text "(#{name})"
	  rescue ArgumentError
	  end
	}
	pp.comma_breakable
	pp.group {
	  pp.text sprintf("rdev=0x%x", self.rdev)
	  pp.breakable
	  pp.text sprintf('(%d, %d)', self.rdev_major, self.rdev_minor)
	}
	pp.comma_breakable
	pp.text "size="; pp.pp self.size; pp.comma_breakable
	pp.text "blksize="; pp.pp self.blksize; pp.comma_breakable
	pp.text "blocks="; pp.pp self.blocks; pp.comma_breakable
	pp.group {
	  t = self.atime
	  pp.text "atime="; pp.pp t
	  pp.breakable; pp.text "(#{t.tv_sec})"
	}
	pp.comma_breakable
	pp.group {
	  t = self.mtime
	  pp.text "mtime="; pp.pp t
	  pp.breakable; pp.text "(#{t.tv_sec})"
	}
	pp.comma_breakable
	pp.group {
	  t = self.ctime
	  pp.text "ctime="; pp.pp t
	  pp.breakable; pp.text "(#{t.tv_sec})"
	}
@


1.11
log
@fix object address test.
@
text
@d539 1
a539 2
      hex = '0x' + ('%x' % (a.id * 2))
      assert_equal("#<Object:#{hex} @@a=#<Object:#{hex} ...>>\n", PP.pp(a, 79, ''))
@


1.10
log
@* re.c (rb_reg_expr_str): need to process backslashes properly.

* object.c (rb_any_to_a): declare Object#to_a to be obsolete.

* object.c (rb_Array): do not convert nil into [] automagically.

* object.c (rb_Integer): use "to_int" instead of
  "to_i". [experimental]

* object.c (nil_to_f): new method.

* object.c (rb_Integer): Symbols and nil should cause error.

* object.c (rb_Float): nil should cause error.
@
text
@d539 1
a539 1
      hex = '0x' + ('%x'%a.id)
@


1.9
log
@lib/pp.rb: fix object address.
@
text
@d217 1
a217 1
	  pp(obj.instance_eval v)
@


1.8
log
@* lib/prettyprint.rb, lib/pp.rb: convenience methods added.
@
text
@d80 1
a80 1
--- PP.sharing_detection = value
d198 4
d208 1
a208 2
    object_group(obj) {
      text sprintf(':0x%x', obj.__id__)
d250 1
a250 1
	result1 = sprintf('#<%s:0x%x pretty_printed>', self.class.name, self.__id__)
d277 4
a280 3
      pp.text sprintf("#<%s:0x%x", self.class.name, self.__id__)
      pp.breakable
      pp.text sprintf("...>")
@


1.7
log
@* lib/prettyprint.rb: re-implemented for incremental output to handle
huge data.  API is changed a bit.

* lib/pp.rb: adapt new pretty printing API.
@
text
@d91 11
d105 1
d117 7
d194 9
d204 11
a214 22
    group {
      text '#<'
      nest(1) {
	text obj.class.name
	text ':'
	text sprintf('0x%x', obj.__id__)
	first = true
	obj.instance_variables.sort.each {|v|
	  if first
	    first = false
	  else
	    text ','
	  end
	  breakable
	  group {
	    text v
	    text '='
	    nest(1) {
	      breakable ''
	      pp(obj.instance_eval v)
	    }
	  }
a216 1
      text '>'
d221 9
a229 20
    group {
      text '{'
      nest(1) {
	first = true
	obj.each {|k, v|
	  if first
	    first = false
	  else
	    text ","
	    breakable
	  end
	  group {
	    pp k
	    text '=>'
	    nest(1) {
	      group {
		breakable ''
		pp v
	      }
	    }
a232 1
      text '}'
d278 4
d295 1
a295 3
    pp.text "["
    pp.nest(1) {
      first = true
d297 1
a297 6
	if first
	  first = false
	else
	  pp.text ","
	  pp.breakable
	end
a300 1
    pp.text "]"
d326 1
a326 3
    pp.text sprintf("#<%s", self.class.name)
    pp.nest(1) {
      first = true
d328 1
a328 5
	if first
	  first = false
	else
	  pp.text ","
	end
d330 5
a334 7
	pp.group {
	  pp.text member.to_s
	  pp.text '='
	  pp.nest(1) {
	    pp.breakable ''
	    pp.pp self[member]
	  }
a337 1
    pp.text ">"
d359 1
a359 5
      pp.nest(1) {
	pp.text "#<"
	pp.text self.class.name
	pp.breakable; pp.text sprintf("dev=0x%x", self.dev); pp.text ','
	pp.breakable; pp.text "ino="; pp.pp self.ino; pp.text ','
d361 2
a380 1
	  pp.text ','
d382 2
a383 2
	pp.breakable; pp.text "nlink="; pp.pp self.nlink; pp.text ','
	pp.breakable
a390 1
	  pp.text ','
d392 1
a392 1
	pp.breakable
a399 1
	  pp.text ','
d401 1
a401 1
	pp.breakable
a405 1
	  pp.text ','
d407 4
a410 4
	pp.breakable; pp.text "size="; pp.pp self.size; pp.text ','
	pp.breakable; pp.text "blksize="; pp.pp self.blksize; pp.text ','
	pp.breakable; pp.text "blocks="; pp.pp self.blocks; pp.text ','
	pp.breakable
a414 1
	  pp.text ','
d416 1
a416 1
	pp.breakable
a420 1
	  pp.text ','
d422 1
a422 1
	pp.breakable
a427 1
	pp.text ">"
@


1.6
log
@* lib/pp.rb (pp): return nil like p.
@
text
@d60 2
a61 2
== Customized output
To define your customized pretty printing function for your class,
d121 1
a121 1
    pp = PP.new
d123 1
a123 1
    pp.format(out, width)
d137 1
a137 1
  def initialize
@


1.5
log
@* prettyprint.rb: FillGroup implemented.
@
text
@d58 2
d115 1
@


1.4
log
@refine previous change.
@
text
@d9 1
a9 1
  #<PP:0x806486c @@stack=[], @@nest=[0], @@buf=#<PP::Group:0x8064844 @@tail=0, @@singleline_length=9, @@buf=[#<PP::Group:0x80647cc @@tail=0, @@singleline_length=9, @@buf=[#<PP::Text:0x8064768 @@text="[">, #<PP::Group:0x80646c8 @@tail=1, @@singleline_length=1, @@buf=[#<PP::Text:0x8064664 @@text="1">]>, #<PP::Text:0x80646b4 @@text=",">, #<PP::Breakable:0x8064650 @@indent=1, @@sep=" ">, #<PP::Group:0x8064614 @@tail=1, @@singleline_length=1, @@buf=[#<PP::Text:0x80645b0 @@text="2">]>, #<PP::Text:0x8064600 @@text=",">, #<PP::Breakable:0x806459c @@indent=1, @@sep=" ">, #<PP::Group:0x8064560 @@tail=1, @@singleline_length=1, @@buf=[#<PP::Text:0x80644fc @@text="3">]>, #<PP::Text:0x806472c @@text="]">]>]>>
d12 1
a12 1
  #<PP:0x403279c
d14 1
a14 1
    #<PP::Group:0x4032666
d16 28
a43 23
      [#<PP::Group:0x4032666
        @@buf=
         [#<PP::Text:0x40326de @@text="[">,
          #<PP::Group:0x4032666
           @@buf=[#<PP::Text:0x40326de @@text="1">],
           @@singleline_length=1,
           @@tail=1>,
          #<PP::Text:0x40326de @@text=",">,
          #<PP::Breakable:0x40326b6 @@indent=1, @@sep=" ">,
          #<PP::Group:0x4032666
           @@buf=[#<PP::Text:0x40326de @@text="2">],
           @@singleline_length=1,
           @@tail=1>,
          #<PP::Text:0x40326de @@text=",">,
          #<PP::Breakable:0x40326b6 @@indent=1, @@sep=" ">,
          #<PP::Group:0x4032666
           @@buf=[#<PP::Text:0x40326de @@text="3">],
           @@singleline_length=1,
           @@tail=1>,
          #<PP::Text:0x40326de @@text="]">],
        @@singleline_length=9,
        @@tail=0>],
     @@singleline_length=9,
d45 1
d47 2
d121 1
@


1.3
log
@* lib/pp.rb (File::Stat#pretty_print): print rdev_major and rdev_minor.
@
text
@d359 1
a359 1
	pp.breakable; pp.text "dev="; pp.pp self.dev; pp.text ','
@


1.2
log
@* lib/pp.rb: don't print a mode File::Stat as decimal number.
@
text
@d364 1
a364 1
	  pp.text "mode="; pp.text sprintf("0%o", m)
d403 7
a409 1
	pp.breakable; pp.text "rdev="; pp.pp self.rdev; pp.text ','
@


1.1
log
@lib/pp.rb lib/prettyprint.rb: new file.
@
text
@d364 1
a364 1
	  pp.text "mode="; pp.pp m
d366 2
a367 2
	  pp.text sprintf("(0%o %s %c%c%c%c%c%c%c%c%c)",
	    m, self.ftype,
@
