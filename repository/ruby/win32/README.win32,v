head	1.3;
access;
symbols
	v1_6_7:1.1
	v1_6_6:1.1
	v1_6_5:1.1
	v1_6_4:1.1
	v1_7_1:1.1
	v1_6_4_preview4:1.1
	v1_6_4_preview3:1.1
	v1_6_4_preview2:1.1
	v1_6_4_preview1:1.1
	v1_6_3:1.1
	ruby_m17n:1.1.0.4
	ruby_1_6:1.1.0.2
	v1_6_2:1.1
	v1_6_1:1.1
	v1_6_0:1.1;
locks; strict;
comment	@# @;


1.3
date	2002.09.10.08.24.11;	author usa;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.29.06.49.58;	author usa;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.03.09.55.54;	author matz;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* win32/Makefile.sub (miniruby): shouldn't link $(EXTOBJS).

* win32/Makefile.sub ($(LIBRUBY_A), $(LIBRUBY)): avoid lib.exe's
  warning.

* win32/Makefile.sub: remove unnecessary rules.

* win32/configure.bat, win32/setup.mak, win32/README.win32: enable to
  pass some arguments to configure.
@
text
@=begin

= How to build ruby using Visual C++

== Requirement

(1) Visual C++ 5.0 or later.

(2) If you want to run `((%nmake clean%))' or `((%nmake distclean%))'
    properly, you must install UNIX compatible `((%rm%))' command on
    your ((|PATH|)) if you want to clean after compile.

(3) Please set environment variable (({INCLUDE})), (({LIB})), (({PATH}))
    to run required commands properly from the command line.

    Note: building ruby requires following commands.
     * nmake
     * cl
     * lib
     * dumpbin

== How to compile and install

(1) Execute win32\configure.bat on your build directory.
    You can specify the target platform as an argument.
    For example, run `((%configure i686-mswin32%))'

(2) Change ((|RUBY_INSTALL_NAME|)) and ((|RUBY_SO_NAME|)) in (({Makefile}))
    if you want to change the name of the executable files. 
    And add ((|RUBYW_INSTALL_NAME|)) to change the name of the
    executable without console window if also you want.

(3) Run `((%nmake%))'

(4) If you want to make rubyw.exe, run `((%nmake rubyw.exe%))'

(5) Run `((%nmake test%))'

(6) Run `((%nmake DESTDIR=<install_directory> install%))'

    This command will create following directories and install files onto them.
      * <install_directory>\bin
      * <install_directory>\lib
      * <install_directory>\lib\ruby
      * <install_directory>\lib\ruby\<MAJOR>.<MINOR>
      * <install_directory>\lib\ruby\<MAJOR>.<MINOR>\<PLATFORM>
      * <install_directory>\lib\ruby\site_ruby
      * <install_directory>\lib\ruby\site_ruby\<MAJOR>.<MINOR>
      * <install_directory>\lib\ruby\site_ruby\<MAJOR>.<MINOR>\<PLATFORM>
      * <install_directory>\man\man1
    If Ruby's version is `x.y.z', the ((|<MAJOR>|)) is `x' and the ((|<MINOR>|)) is `y'.
    The default ((|<PLATFORM>|)) is `(({i386-mswin32}))'.

== Icons

Any icon files(*.ico) in the build directory, directories specified with
((|icondirs|)) make variable and (({win32})) directory under the ruby
source directory will be included in DLL or executable files, according
to their base names.
    $(RUBY_INSTALL_NAME).ico or ruby.ico   --> $(RUBY_INSTALL_NAME).exe
    $(RUBYW_INSTALL_NAME).ico or rubyw.ico --> $(RUBYW_INSTALL_NAME).exe
    the others                             --> $(RUBY_SO_NAME).dll

Although no icons are distributed with the ruby source or in the official 
site, you can use anything you like. For example, followings are written 
in Japanese, but you can download at least.

* ((<URL:http://member.nifty.ne.jp/ueivu/rubyico.html>)) or
  ((<zipped icons|URL:http://member.nifty.ne.jp/ueivu/Ruby_ico.zip>))
* ((<URL:http://homepage1.nifty.com/a_nakata/ruby/>)) or
  ((<icon itself|URL:http://homepage1.nifty.com/a_nakata/ruby/RubyIcon.ico>))

== Build examples

* Build on the ruby source directory.

  ex.)
    ruby source directory:  C:\ruby
    build directory:        C:\ruby
    install directory:      C:\usr\local

    C:
    cd \ruby
    win32\configure
    nmake
    nmake test
    nmake DESTDIR=/usr/local install

* Build on the relative directory from the ruby source directory.

  ex.)
    ruby source directory:  C:\ruby
    build directory:        C:\ruby\mswin32
    install directory:      C:\usr\local

    C:
    cd \ruby
    mkdir mswin32
    cd mswin32
    ..\win32\configure
    nmake
    nmake test
    nmake DESTDIR=/usr/local install

* Build on the different drive.

  ex.)
    ruby source directory:  C:\src\ruby
    build directory:        D:\build\ruby
    install directory:      C:\usr\local

    D:
    cd D:\build\ruby
    C:\src\ruby\win32\configure
    nmake
    nmake test
    nmake DESTDIR=C:/usr/local install

== Bugs

You can ((*NOT*)) use a path name contains any white space characters as
the ruby source directory, this restriction comes from the behavior of
(({!INCLUDE})) directives of (({NMAKE})).
((- you may call it a bug. -))

=end
@


1.2
log
@* win32/README.win32: follow recent changes.
@
text
@d7 1
a7 1
(1) Visual C++ 4.0 or later.
d11 1
a11 1
    your ((|PATH|)).
d25 2
d52 1
a52 1
    The ((|<PLATFORM>|)) is `(({i386-mswin32}))'.
@


1.1
log
@matz - add/remove files
@
text
@a20 1
     * rm
d33 1
a33 1
(4) Run `((%nmake test%))'
d35 3
a37 1
(5) Run `((%nmake DESTDIR=<install_directory> install%))'
d50 1
a50 1
    The ((|<PLATFORM>|)) is usually `(({i586-mswin32}))'.
@
