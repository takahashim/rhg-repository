head	1.2;
access;
symbols
	v1_6_3:1.2
	ruby_1_6:1.2.0.2
	v1_2_6repack:1.1.1.1.4.2
	v1_2_6:1.1.1.1.4.2
	v1_2_5:1.1.1.1.4.2
	v1_2_4:1.1.1.1.4.2
	v1_3_1_990215:1.1.1.2
	v1_3_1_990212:1.1.1.2
	v1_3_1_990210:1.1.1.2
	v1_3_1_:1.1.1.2
	v1_3_1_990209:1.1.1.2
	v1_3_1_990205:1.1.1.2
	v1_3_1_990203:1.1.1.2
	v1_3_1_990201:1.1.1.2
	v1_3_1"_990201:1.1.1.2
	v1_3_1_990128:1.1.1.2
	v1_3_1_990127:1.1.1.2
	v1_3_1_990126:1.1.1.2
	ruby_1_3:1.1.1.2.0.2
	v1_2_2:1.1.1.1.4.2
	RUBY_1_3:1.1.1.2
	v1_2_2_pr1:1.1.1.1.4.2
	v1_2_1repack:1.1.1.1.4.2
	v1_2_1:1.1.1.1.4.2
	v1_2_stable:1.1.1.1.4.2
	v1_1d1:1.1.1.1.4.2
	v1_1d0:1.1.1.1.4.2
	v1_1c9_1:1.1.1.1.4.2
	v1_1c9:1.1.1.1.4.2
	v1_1c8:1.1.1.1.4.2
	v1_1c7:1.1.1.1.4.2
	v1_1c6:1.1.1.1.4.2
	v1_1d-start:1.1.1.1.4.2
	v1_1c5:1.1.1.1.4.2
	v1_1dev:1.1.1.1.4.2.0.2
	v1_1c4:1.1.1.1.4.2
	v1_1c3:1.1.1.1.4.2
	v1_1c2:1.1.1.1.4.2
	v1_1c1:1.1.1.1.4.2
	v1_1c0:1.1.1.1.4.2
	v1_1b9_31:1.1.1.1.4.2
	v1_1b9_30:1.1.1.1.4.2
	v1_1b9_28:1.1.1.1.4.2
	v1_1b9_27:1.1.1.1.4.2
	v1_1b9_26:1.1.1.1.4.2
	r1_1b9_25:1.1.1.1.4.2
	r1_1b9_24:1.1.1.1.4.2
	v1_1b9_23:1.1.1.1.4.2
	v1_1b9_22:1.1.1.1.4.2
	v1_1b9_20:1.1.1.1.4.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	99.08.13.05.45.05;	author matz;	state dead;
branches;
next	1.1;

1.1
date	98.01.16.12.13.06;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.06;	author matz;	state Exp;
branches
	1.1.1.1.4.1;
next	1.1.1.2;

1.1.1.2
date	99.01.20.04.59.23;	author matz;	state Exp;
branches
	1.1.1.2.2.1;
next	;

1.1.1.2.2.1
date	99.02.24.04.31.20;	author matz;	state dead;
branches;
next	;

1.1.1.1.4.1
date	98.05.13.07.26.14;	author matz;	state Exp;
branches;
next	1.1.1.1.4.2;

1.1.1.1.4.2
date	98.05.15.09.36.48;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@1.4.0
@
text
@/* Copyright (C) 1991 Free Software Foundation, Inc.
This file is part of the GNU C Library.

The GNU C Library is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The GNU C Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with the GNU C Library; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 675 Mass Ave,
Cambridge, MA 02139, USA.  */

#include "config.h"
#include <errno.h>
#include "fnmatch.h"

#if !defined (__GNU_LIBRARY__) && !defined (STDC_HEADERS)
#  if !defined (errno)
extern int errno;
#  endif /* !errno */
#endif

/* Match STRING against the filename pattern PATTERN, returning zero if
   it matches, FNM_NOMATCH if not.  */
int
fnmatch (pattern, string, flags)
     char *pattern;
     char *string;
     int flags;
{
  register char *p = pattern, *n = string;
  register char c;

  if ((flags & ~__FNM_FLAGS) != 0)
    {
      errno = EINVAL;
      return (-1);
    }

  while ((c = *p++) != '\0')
    {
      switch (c)
	{
	case '?':
	  if (*n == '\0')
	    return (FNM_NOMATCH);
	  else if ((flags & FNM_PATHNAME) && *n == '/')
	    return (FNM_NOMATCH);
	  else if ((flags & FNM_PERIOD) && *n == '.' &&
		   (n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	    return (FNM_NOMATCH);
	  break;

	case '\\':
	  if (!(flags & FNM_NOESCAPE))
	    c = *p++;
	  if (*n != c)
	    return (FNM_NOMATCH);
	  break;

	case '*':
	  if ((flags & FNM_PERIOD) && *n == '.' &&
	      (n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	    return (FNM_NOMATCH);

	  for (c = *p++; c == '?' || c == '*'; c = *p++, ++n)
	    if (((flags & FNM_PATHNAME) && *n == '/') ||
		(c == '?' && *n == '\0'))
	      return (FNM_NOMATCH);

	  if (c == '\0')
	    return (0);

	  {
	    char c1 = (!(flags & FNM_NOESCAPE) && c == '\\') ? *p : c;
	    for (--p; *n != '\0'; ++n)
	      if ((c == '[' || *n == c1) &&
		  fnmatch (p, n, flags & ~FNM_PERIOD) == 0)
		return (0);
	    return (FNM_NOMATCH);
	  }

	case '[':
	  {
	    /* Nonzero if the sense of the character class is inverted.  */
	    register int not;

	    if (*n == '\0')
	      return (FNM_NOMATCH);

	    if ((flags & FNM_PERIOD) && *n == '.' &&
		(n == string || ((flags & FNM_PATHNAME) && n[-1] == '/')))
	      return (FNM_NOMATCH);

	    /* Make sure there is a closing `]'.  If there isn't, the `['
	       is just a character to be matched. */
	    {
	      register char *np;

	      for (np = p; np && *np && *np != ']'; np++);

	      if (np && !*np)
		{
		  if (*n != '[')
		    return (FNM_NOMATCH);
		  goto next_char;
		}
	    }
	      
	    not = (*p == '!' || *p == '^');
	    if (not)
	      ++p;

	    c = *p++;
	    for (;;)
	      {
		register char cstart = c, cend = c;

		if (!(flags & FNM_NOESCAPE) && c == '\\')
		  cstart = cend = *p++;

		if (c == '\0')
		  /* [ (unterminated) loses.  */
		  return (FNM_NOMATCH);

		c = *p++;

		if ((flags & FNM_PATHNAME) && c == '/')
		  /* [/] can never match.  */
		  return (FNM_NOMATCH);

		if (c == '-' && *p != ']')
		  {
		    cend = *p++;
		    if (!(flags & FNM_NOESCAPE) && cend == '\\')
		      cend = *p++;
		    if (cend == '\0')
		      return (FNM_NOMATCH);
		    c = *p++;
		  }

		if (*n >= cstart && *n <= cend)
		  goto matched;

		if (c == ']')
		  break;
	      }
	    if (!not)
	      return (FNM_NOMATCH);

	  next_char:
	    break;

	  matched:
	    /* Skip the rest of the [...] that already matched.  */
	    while (c != ']')
	      {
		if (c == '\0')
		  /* [... (unterminated) loses.  */
		  return (FNM_NOMATCH);

		c = *p++;
		if (!(flags & FNM_NOESCAPE) && c == '\\')
		  /* 1003.2d11 is unclear if this is right.  %%% */
		  ++p;
	      }
	    if (not)
	      return (FNM_NOMATCH);
	  }
	  break;

	default:
	  if (c != *n)
	    return (FNM_NOMATCH);
	}

      ++n;
    }

  if (*n == '\0')
    return (0);

  return (FNM_NOMATCH);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@ruby 1.3 cycle
@
text
@a22 4
#ifdef USE_CWGUSI
#include <sys/errno.h>
#endif

a53 1
	    /* If we are matching a pathname, `?' can never match a `/'. */
a56 3
	    /* `?' cannot match a `.' if it is the first character of the
	       string or if it is the first character following a slash and
	       we are matching a pathname. */
d62 1
a62 5
	    {
	      c = *p++;
	      if (c == '\0')
		return (FNM_NOMATCH);
	    }
a69 3
	    /* `*' cannot match a `.' if it is the first character of the
	       string or if it is the first character following a slash and
	       we are matching a pathname. */
d72 4
a75 17
	  /* Collapse multiple consecutive, `*' and `?', but make sure that
	     one character of the string is consumed for each `?'. */
	  for (c = *p++; c == '?' || c == '*'; c = *p++)
	    {
	      if ((flags & FNM_PATHNAME) && *n == '/')
		/* A slash does not match a wildcard under FNM_PATHNAME. */
		return (FNM_NOMATCH);
	      else if (c == '?')
		{
		  if (*n == '\0')
		    return (FNM_NOMATCH);
		  /* One character of the string is consumed in matching
		     this ? wildcard, so *??? won't match if there are
		     fewer than three characters. */
		  n++;
		}
	    }
a79 1
	  /* General case, use recursion. */
a82 2
	      /* Only call fnmatch if the first character indicates a
		 possible match. */
a96 3
	    /* A character class cannot match a `.' if it is the first
	       character of the string or if it is the first character
	       following a slash and we are matching a pathname. */
d101 2
a102 6
	    /* POSIX.2 2.8.3.1.2 says: `An expression containing a `[' that
	       is not preceded by a backslash and is not part of a bracket
	       expression produces undefined results.'  This implementation
	       treats the `[' as just a character to be matched if there is
	       not a closing `]'.  This code will have to be changed when
	       POSIX.2 character classes are implemented. */
d106 1
a106 2
	      for (np = p; np && *np && *np != ']'; np++)
		;
d112 1
a112 1
		  break;
d123 1
a123 5
		register char cstart, cend;

		/* Initialize cstart and cend in case `-' is the last
		   character of the pattern. */
		cstart = cend = c;
d126 1
a126 5
		  {
		    if (*p == '\0')
		      return FNM_NOMATCH;
		    cstart = cend = *p++;
		  }
a137 3
		/* This introduces a range, unless the `-' is the last
		   character of the class.  Find the end of the range
		   and move past it. */
a144 1

d156 2
d170 2
a171 6
		  {
		    if (*p == '\0')
		      return FNM_NOMATCH;
		    /* XXX 1003.2d11 is unclear if this is right. */
		    ++p;
		  }
@


1.1.1.2.2.1
log
@990224
@
text
@@


1.1.1.1.4.1
log
@1.1b9_19
@
text
@a22 4
#ifdef USE_CWGUSI
#include <sys/errno.h>
#endif

@


1.1.1.1.4.2
log
@glob/fnmatch
@
text
@a57 1
	    /* If we are matching a pathname, `?' can never match a `/'. */
a60 3
	    /* `?' cannot match a `.' if it is the first character of the
	       string or if it is the first character following a slash and
	       we are matching a pathname. */
d66 1
a66 5
	    {
	      c = *p++;
	      if (c == '\0')
		return (FNM_NOMATCH);
	    }
a73 3
	    /* `*' cannot match a `.' if it is the first character of the
	       string or if it is the first character following a slash and
	       we are matching a pathname. */
d76 4
a79 17
	  /* Collapse multiple consecutive, `*' and `?', but make sure that
	     one character of the string is consumed for each `?'. */
	  for (c = *p++; c == '?' || c == '*'; c = *p++)
	    {
	      if ((flags & FNM_PATHNAME) && *n == '/')
		/* A slash does not match a wildcard under FNM_PATHNAME. */
		return (FNM_NOMATCH);
	      else if (c == '?')
		{
		  if (*n == '\0')
		    return (FNM_NOMATCH);
		  /* One character of the string is consumed in matching
		     this ? wildcard, so *??? won't match if there are
		     fewer than three characters. */
		  n++;
		}
	    }
a83 1
	  /* General case, use recursion. */
a86 2
	      /* Only call fnmatch if the first character indicates a
		 possible match. */
a100 3
	    /* A character class cannot match a `.' if it is the first
	       character of the string or if it is the first character
	       following a slash and we are matching a pathname. */
d105 2
a106 6
	    /* POSIX.2 2.8.3.1.2 says: `An expression containing a `[' that
	       is not preceded by a backslash and is not part of a bracket
	       expression produces undefined results.'  This implementation
	       treats the `[' as just a character to be matched if there is
	       not a closing `]'.  This code will have to be changed when
	       POSIX.2 character classes are implemented. */
d110 1
a110 2
	      for (np = p; np && *np && *np != ']'; np++)
		;
d116 1
a116 1
		  break;
d127 1
a127 5
		register char cstart, cend;

		/* Initialize cstart and cend in case `-' is the last
		   character of the pattern. */
		cstart = cend = c;
d130 1
a130 5
		  {
		    if (*p == '\0')
		      return FNM_NOMATCH;
		    cstart = cend = *p++;
		  }
a141 3
		/* This introduces a range, unless the `-' is the last
		   character of the class.  Find the end of the range
		   and move past it. */
a148 1

d160 2
d174 2
a175 6
		  {
		    if (*p == '\0')
		      return FNM_NOMATCH;
		    /* XXX 1003.2d11 is unclear if this is right. */
		    ++p;
		  }
@


