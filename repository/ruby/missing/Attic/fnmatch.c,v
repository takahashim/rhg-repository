head	1.3;
access;
symbols
	v1_6_3:1.3
	ruby_1_6:1.3.0.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.2.3
	v1_3_6_repack:1.1.2.3
	v1_3_6:1.1.2.3
	v1_3_5:1.1.2.3
	v1_3_4_990625:1.1.2.3
	v1_3_4_990624:1.1.2.3
	v1_3_4_990611:1.1.2.3
	v1_3_4_990531:1.1.2.3
	v1_3_3_990518:1.1.2.3
	v1_3_3_990513:1.1.2.3
	v1_3_3_990507:1.1.2.3
	v1_3_1_990225:1.1.2.2
	v1_3_1_990224:1.1.2.1
	ruby_1_3:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	99.10.21.07.52.15;	author matz;	state dead;
branches;
next	1.2;

1.2
date	99.08.13.05.45.18;	author matz;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.02.24.04.31.29;	author matz;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	99.02.24.04.31.29;	author matz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	99.02.25.06.39.12;	author matz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	99.03.24.08.52.35;	author matz;	state Exp;
branches;
next	;

1.2.2.1
date	99.11.25.05.09.39;	author matz;	state dead;
branches;
next	;


desc
@@


1.3
log
@RUBYOPT
@
text
@/*
 * Copyright (c) 1989, 1993, 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Guido van Rossum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)fnmatch.c	8.2 (Berkeley) 4/16/94";
#endif /* LIBC_SCCS and not lint */

/*
 * Function fnmatch() as specified in POSIX 1003.2-1992, section B.6.
 * Compares a filename or pathname to a pattern.
 */

#include "missing/fnmatch.h"
#include <string.h>

#define	EOS	'\0'

static char *rangematch();

int
fnmatch(pattern, string, flags)
    char *pattern;
    char *string;
    int flags;
{
    char *stringstart;
    char c, test;

    for (stringstart = string;;) {
	switch (c = *pattern++) {
	case EOS:
	    return (*string == EOS ? 0 : FNM_NOMATCH);
	case '?':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && (flags & FNM_PATHNAME)) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '*':
	    c = *pattern;
	    /* Collapse multiple stars. */
	    while (c == '*') {
		c = *++pattern;
	    }

	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }

	    /* Optimize for pattern with * at end or before /. */
	    if (c == EOS) {
		if (flags & FNM_PATHNAME) {
		    return (strchr(string, '/') == NULL ? 0 : FNM_NOMATCH);
		}
		else {
		    return (0);
		}
	    }
	    else if (c == '/' && flags & FNM_PATHNAME) {
	        if ((string = strchr(string, '/')) == NULL) {
		    return (FNM_NOMATCH);
		}
		break;
	    }

	    /* General case, use recursion. */
	    while ((test = *string) != EOS) {
	        if (!fnmatch(pattern, string, flags & ~FNM_PERIOD)) {
		    return (0);
		}
		if (test == '/' && flags & FNM_PATHNAME) {
		    break;
		}
		++string;
	    }
	    return (FNM_NOMATCH);
	case '[':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && flags & FNM_PATHNAME) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
	        return (FNM_NOMATCH);
	    }
	    if ((pattern = rangematch(pattern, *string, flags)) == NULL) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '\\':
	    if (!(flags & FNM_NOESCAPE)) {
		if ((c = *pattern++) == EOS) {
		    c = '\\';
		    --pattern;
		}
	    }
	    /* FALLTHROUGH */
	default:
	    if (c != *string) {
	        return (FNM_NOMATCH);
	    }
	    string++;
	    break;
	}
    /* NOTREACHED */
    }
}

static char*
rangematch(pattern, test, flags)
    char *pattern;
    int test, flags;
{
    int negate, ok;
    char c, c2;

    /*
     * A bracket expression starting with an unquoted circumflex
     * character produces unspecified results (IEEE 1003.2-1992,
     * 3.13.2).  This implementation treats it like '!', for
     * consistency with the regular expression syntax.
     * J.T. Conklin (conklin@@ngai.kaleida.com)
     */
    if ((negate = (*pattern == '!' || *pattern == '^'))) {
	++pattern;
    }

    for (ok = 0; (c = *pattern++) != ']';) {
        if (c == '\\' && !(flags & FNM_NOESCAPE)) {
	    c = *pattern++;
	}
	if (c == EOS) {
	    return (NULL);
	}
	if (*pattern == '-' && (c2 = *(pattern + 1)) != EOS && c2 != ']') {
	    pattern += 2;
	    if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
		c2 = *pattern++;
	    }
	    if (c2 == EOS) {
		return (NULL);
	    }
	    if (c <= test && test <= c2) {
		ok = 1;
	    }
	}
	else if (c == test) {
	    ok = 1;
	}
    }
    return (ok == negate ? NULL : pattern);
}
@


1.2
log
@1.4.0
@
text
@@


1.2.2.1
log
@19991125
@
text
@@


1.1
log
@file fnmatch.c was initially added on branch ruby_1_3.
@
text
@d1 199
@


1.1.2.1
log
@990224
@
text
@a0 192
/*
 * Copyright (c) 1989, 1993, 1994
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Guido van Rossum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)fnmatch.c	8.2 (Berkeley) 4/16/94";
#endif /* LIBC_SCCS and not lint */

/*
 * Function fnmatch() as specified in POSIX 1003.2-1992, section B.6.
 * Compares a filename or pathname to a pattern.
 */

#include "missing/fnmatch.h"
#include <string.h>

#define	EOS	'\0'

static const char *rangematch(const char *, int, int);

int fnmatch(const char *pattern, const char *string, int flags)
{
    const char *stringstart;
    char c, test;

    for (stringstart = string;;) {
	switch (c = *pattern++) {
	case EOS:
	    return (*string == EOS ? 0 : FNM_NOMATCH);
	case '?':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && (flags & FNM_PATHNAME)) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '*':
	    c = *pattern;
	    /* Collapse multiple stars. */
	    while (c == '*') {
		c = *++pattern;
	    }

	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
		return (FNM_NOMATCH);
	    }

	    /* Optimize for pattern with * at end or before /. */
	    if (c == EOS) {
		if (flags & FNM_PATHNAME) {
		    return (strchr(string, '/') == NULL ? 0 : FNM_NOMATCH);
		}
		else {
		    return (0);
		}
	    }
	    else if (c == '/' && flags & FNM_PATHNAME) {
	        if ((string = strchr(string, '/')) == NULL) {
		    return (FNM_NOMATCH);
		}
		break;
	    }

	    /* General case, use recursion. */
	    while ((test = *string) != EOS) {
	        if (!fnmatch(pattern, string, flags & ~FNM_PERIOD)) {
		    return (0);
		}
		if (test == '/' && flags & FNM_PATHNAME) {
		    break;
		}
		++string;
	    }
	    return (FNM_NOMATCH);
	case '[':
	    if (*string == EOS) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '/' && flags & FNM_PATHNAME) {
		return (FNM_NOMATCH);
	    }
	    if (*string == '.' && (flags & FNM_PERIOD) &&
		(string == stringstart ||
		 ((flags & FNM_PATHNAME) && *(string - 1) == '/'))) {
	        return (FNM_NOMATCH);
	    }
	    if ((pattern = rangematch(pattern, *string, flags)) == NULL) {
		return (FNM_NOMATCH);
	    }
	    ++string;
	    break;
	case '\\':
	    if (!(flags & FNM_NOESCAPE)) {
		if ((c = *pattern++) == EOS) {
		    c = '\\';
		    --pattern;
		}
	    }
	    /* FALLTHROUGH */
	default:
	    if (c != *string) {
	        return (FNM_NOMATCH);
	    }
	    string++;
	    break;
	}
    /* NOTREACHED */
    }
}

static const char *rangematch(const char *pattern, int test, int flags)
{
    int negate, ok;
    char c, c2;

    /*
     * A bracket expression starting with an unquoted circumflex
     * character produces unspecified results (IEEE 1003.2-1992,
     * 3.13.2).  This implementation treats it like '!', for
     * consistency with the regular expression syntax.
     * J.T. Conklin (conklin@@ngai.kaleida.com)
     */
    if ((negate = (*pattern == '!' || *pattern == '^'))) {
	++pattern;
    }

    for (ok = 0; (c = *pattern++) != ']';) {
        if (c == '\\' && !(flags & FNM_NOESCAPE)) {
	    c = *pattern++;
	}
	if (c == EOS) {
	    return (NULL);
	}
	if (*pattern == '-' && (c2 = *(pattern + 1)) != EOS && c2 != ']') {
	    pattern += 2;
	    if (c2 == '\\' && !(flags & FNM_NOESCAPE)) {
		c2 = *pattern++;
	    }
	    if (c2 == EOS) {
		return (NULL);
	    }
	    if (c <= test && test <= c2) {
		ok = 1;
	    }
	}
	else if (c == test) {
	    ok = 1;
	}
    }
    return (ok == negate ? NULL : pattern);
}
@


1.1.2.2
log
@990225
@
text
@d51 1
a51 1
static char *rangematch(const char *, int, int);
d53 1
a53 5
int
fnmatch(pattern, string, flags)
    char *pattern;
    char *string;
    int flags;
d55 1
a55 1
    char *stringstart;
d152 1
a152 4
static char*
rangematch(pattern, test, flags)
    char *pattern;
    int test, flags;
@


1.1.2.3
log
@990324
@
text
@d51 1
a51 1
static char *rangematch();
@


