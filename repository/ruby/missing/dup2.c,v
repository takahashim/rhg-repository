head	1.2;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.2
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1.8.1
	v1_3_6_repack:1.1.1.1.8.1
	v1_3_6:1.1.1.1.8.1
	v1_3_5:1.1.1.1.8.1
	v1_2_6repack:1.1.1.1
	v1_3_4_990625:1.1.1.1.8.1
	v1_3_4_990624:1.1.1.1.8.1
	v1_2_6:1.1.1.1
	v1_3_4_990611:1.1.1.1.8.1
	v1_3_4_990531:1.1.1.1.8.1
	v1_3_3_990518:1.1.1.1.8.1
	v1_3_3_990513:1.1.1.1.8.1
	v1_3_3_990507:1.1.1.1.8.1
	v1_2_5:1.1.1.1
	v1_2_4:1.1.1.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.8
	v1_2_2:1.1.1.1
	RUBY_1_3:1.1.1.1
	v1_2_2_pr1:1.1.1.1
	v1_2_1repack:1.1.1.1
	v1_2_1:1.1.1.1
	v1_2_stable:1.1.1.1
	v1_1d1:1.1.1.1
	v1_1d0:1.1.1.1
	v1_1c9_1:1.1.1.1
	v1_1c9:1.1.1.1
	v1_1c8:1.1.1.1
	v1_1c7:1.1.1.1
	v1_1c6:1.1.1.1
	v1_1d-start:1.1.1.1
	v1_1c5:1.1.1.1
	v1_1dev:1.1.1.1.0.6
	v1_1c4:1.1.1.1
	v1_1c3:1.1.1.1
	v1_1c2:1.1.1.1
	v1_1c1:1.1.1.1
	v1_1c0:1.1.1.1
	v1_1b9_31:1.1.1.1
	v1_1b9_30:1.1.1.1
	v1_1b9_28:1.1.1.1
	v1_1b9_27:1.1.1.1
	v1_1b9_26:1.1.1.1
	r1_1b9_25:1.1.1.1
	r1_1b9_24:1.1.1.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.08.13.05.45.18;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1.8.1;
next	;

1.1.1.1.8.1
date	99.03.24.08.52.35;	author matz;	state Exp;
branches;
next	;


desc
@@


1.2
log
@1.4.0
@
text
@/*
 * Public domain dup2() lookalike
 * by Curtis Jackson @@ AT&T Technologies, Burlington, NC
 * electronic address:  burl!rcj
 *
 * dup2 performs the following functions:
 *
 * Check to make sure that fd1 is a valid open file descriptor.
 * Check to see if fd2 is already open; if so, close it.
 * Duplicate fd1 onto fd2; checking to make sure fd2 is a valid fd.
 * Return fd2 if all went well; return BADEXIT otherwise.
 */

#include "config.h"

#if defined(HAVE_FCNTL)
# include <fcntl.h>
#endif

#if !defined(HAVE_FCNTL) || !defined(F_DUPFD)
# include <errno.h>
#endif

#define BADEXIT -1

int
dup2(fd1, fd2)
int fd1, fd2;
{
#if defined(HAVE_FCNTL) && defined(F_DUPFD)
	if (fd1 != fd2) {
#ifdef F_GETFL
		if (fcntl(fd1, F_GETFL) < 0)
			return BADEXIT;
		if (fcntl(fd2, F_GETFL) >= 0)
			close(fd2);
#else
		close(fd2);
#endif
		if (fcntl(fd1, F_DUPFD, fd2) < 0)
			return BADEXIT;
	}
	return fd2;
#else
	extern int errno;
	int i, fd, fds[256];

	if (fd1 == fd2) return 0;
	close(fd2);
	for (i=0; i<256; i++) {
		fd = fds[i] = dup(fd1);
		if (fd == fd2) break;
	}
	while (i) {
	    	close(fds[i--]);
	}
	if (fd == fd2) return 0;
	errno = EMFILE;
	return BADEXIT;
#endif
}
@


1.1
log
@Initial revision
@
text
@d1 4
a4 2
/* 
 *    Copyright (c) 1991, Larry Wall
d6 6
a11 2
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
d14 1
a14 1
#include "defines.h"
d16 1
a16 1
#if defined(HAVE_FCNTL) && defined(F_DUPFD)
d20 6
d27 2
a28 3
dup2(oldfd,newfd)
int oldfd;
int newfd;
d31 13
a43 2
    close(newfd);
    return fcntl(oldfd, F_DUPFD, newfd);
d45 15
a59 12
    int fdtmp[256];
    int fdx = 0;
    int fd;

    if (oldfd == newfd)
	return 0;
    close(newfd);
    while ((fd = dup(oldfd)) != newfd)	/* good enough for low fd's */
	fdtmp[fdx++] = fd;
    while (fdx > 0)
	close(fdtmp[--fdx]);
    return 0;
@


1.1.1.1
log
@
@
text
@@


1.1.1.1.8.1
log
@990324
@
text
@d1 2
a2 4
/*
 * Public domain dup2() lookalike
 * by Curtis Jackson @@ AT&T Technologies, Burlington, NC
 * electronic address:  burl!rcj
d4 2
a5 6
 * dup2 performs the following functions:
 *
 * Check to make sure that fd1 is a valid open file descriptor.
 * Check to see if fd2 is already open; if so, close it.
 * Duplicate fd1 onto fd2; checking to make sure fd2 is a valid fd.
 * Return fd2 if all went well; return BADEXIT otherwise.
d8 1
a8 1
#include "config.h"
d10 1
a10 1
#if defined(HAVE_FCNTL)
a13 6
#if !defined(HAVE_FCNTL) || !defined(F_DUPFD)
# include <errno.h>
#endif

#define BADEXIT -1

d15 3
a17 2
dup2(fd1, fd2)
int fd1, fd2;
d20 2
a21 13
	if (fd1 != fd2) {
#ifdef F_GETFL
		if (fcntl(fd1, F_GETFL) < 0)
			return BADEXIT;
		if (fcntl(fd2, F_GETFL) >= 0)
			close(fd2);
#else
		close(fd2);
#endif
		if (fcntl(fd1, F_DUPFD, fd2) < 0)
			return BADEXIT;
	}
	return fd2;
d23 12
a34 15
	extern int errno;
	int i, fd, fds[256];

	if (fd1 == fd2) return 0;
	close(fd2);
	for (i=0; i<256; i++) {
		fd = fds[i] = dup(fd1);
		if (fd == fd2) break;
	}
	while (i) {
	    	close(fds[i--]);
	}
	if (fd == fd2) return 0;
	errno = EMFILE;
	return BADEXIT;
@

