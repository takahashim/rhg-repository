head	1.2;
access;
symbols
	v1_6_7:1.1.1.1.12.1
	v1_6_6:1.1.1.1.12.1
	v1_6_5:1.1.1.1.12.1
	v1_6_4:1.1.1.1
	v1_7_1:1.2
	v1_6_4_preview4:1.1.1.1
	v1_6_4_preview3:1.1.1.1
	v1_6_4_preview2:1.1.1.1
	v1_6_4_preview1:1.1.1.1
	v1_6_3:1.1.1.1
	ruby_m17n:1.1.1.1.0.14
	ruby_1_6:1.1.1.1.0.12
	v1_6_2:1.1.1.1
	v1_6_1:1.1.1.1
	v1_6_0:1.1.1.1
	v1_4_6:1.1.1.1
	v1_4_5:1.1.1.1
	v1_4_4:1.1.1.1
	ruby_1_4_3:1.1.1.1
	ruby1_4_3:1.1.1.1
	v1_4_3:1.1.1.1
	v1_5_0:1.1.1.1
	ruby_1_4_3_pre1:1.1.1.1
	ruby_1_4:1.1.1.1.0.10
	v1_4_2:1.1.1.1
	v1_4_1:1.1.1.1
	v1_4_0:1.1.1.1
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.1.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.1.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.1.1
	v1_2_4:1.1.1.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.8
	v1_2_2:1.1.1.1
	RUBY_1_3:1.1.1.1
	v1_2_2_pr1:1.1.1.1
	v1_2_1repack:1.1.1.1
	v1_2_1:1.1.1.1
	v1_2_stable:1.1.1.1
	v1_1d1:1.1.1.1
	v1_1d0:1.1.1.1
	v1_1c9_1:1.1.1.1
	v1_1c9:1.1.1.1
	v1_1c8:1.1.1.1
	v1_1c7:1.1.1.1
	v1_1c6:1.1.1.1
	v1_1d-start:1.1.1.1
	v1_1c5:1.1.1.1
	v1_1dev:1.1.1.1.0.6
	v1_1c4:1.1.1.1
	v1_1c3:1.1.1.1
	v1_1c2:1.1.1.1
	v1_1c1:1.1.1.1
	v1_1c0:1.1.1.1
	v1_1b9_31:1.1.1.1
	v1_1b9_30:1.1.1.1
	v1_1b9_28:1.1.1.1
	v1_1b9_27:1.1.1.1
	v1_1b9_26:1.1.1.1
	r1_1b9_25:1.1.1.1
	r1_1b9_24:1.1.1.1
	v1_1b9_23:1.1.1.1
	v1_1b9_22:1.1.1.1
	v1_1b9_20:1.1.1.1
	v1_1b9_18:1.1.1.1
	v1_1b9_16:1.1.1.1
	v1_1b9_15:1.1.1.1
	v1_1b9_13:1.1.1.1
	v1_1b9_12:1.1.1.1
	v1_1b9_11:1.1.1.1
	v1_1b9_08:1.1.1.1
	v1_1b9_07:1.1.1.1
	r1_1b9:1.1.1.1
	v1_1b8:1.1.1.1
	v1_1b7:1.1.1.1
	v1_1b6:1.1.1.1
	v1_1r:1.1.1.1.0.4
	v1_1:1.1.1.1
	v1_0r:1.1.1.1.0.2
	v1_0:1.1.1.1
	RUBY:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2001.03.06.08.17.18;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.16.12.13.08;	author matz;	state Exp;
branches
	1.1.1.1.12.1;
next	;

1.1.1.1.12.1
date	2001.07.13.10.20.14;	author knu;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* parse.y (primary): rescue and ensure clauses should be allowed
  to appear in singleton method body.
@
text
@/* public domain rewrite of strtol(3) */

#include <ctype.h>

long
strtol(nptr, endptr, base)
    char *nptr;
    char **endptr;
    int base;
{
    long result;
    char *p = nptr;

    while (isspace(*p)) {
	p++;
    }
    if (*p == '-') {
	p++;
	result = -strtoul(p, endptr, base);
    }
    else {
	if (*p == '+') p++;
	result = strtoul(p, endptr, base);
    }
    if (endptr != 0 && *endptr == p) {
	*endptr = nptr;
    }
    return result;
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 14
/* 
 * strtol.c --
 *
 *	Source code for the "strtol" library procedure.
 *
 * Copyright 1988 Regents of the University of California
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies.  The University of California
 * makes no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without
 * express or implied warranty.
 */
d5 5
a9 36

/*
 *----------------------------------------------------------------------
 *
 * strtol --
 *
 *	Convert an ASCII string into an integer.
 *
 * Results:
 *	The return value is the integer equivalent of string.  If endPtr
 *	is non-NULL, then *endPtr is filled in with the character
 *	after the last one that was part of the integer.  If string
 *	doesn't contain a valid integer value, then zero is returned
 *	and *endPtr is set to string.
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

long int
strtol(string, endPtr, base)
    char *string;		/* String of ASCII digits, possibly
				 * preceded by white space.  For bases
				 * greater than 10, either lower- or
				 * upper-case digits may be used.
				 */
    char **endPtr;		/* Where to store address of terminating
				 * character, or NULL. */
    int base;			/* Base for conversion.  Must be less
				 * than 37.  If 0, then the base is chosen
				 * from the leading characters of string:
				 * "0x" means hex, "0" means octal, anything
				 * else means decimal.
				 */
d11 2
a12 6
    register char *p;
    int result;

    /*
     * Skip any leading blanks.
     */
a13 1
    p = string;
d15 1
a15 1
	p += 1;
a16 5

    /*
     * Check for a sign.
     */

d18 6
a23 7
	p += 1;
	result = -(strtoul(p, endPtr, base));
    } else {
	if (*p == '+') {
	    p += 1;
	}
	result = strtoul(p, endPtr, base);
d25 2
a26 2
    if ((result == 0) && (endPtr != 0) && (*endPtr == p)) {
	*endPtr = string;
@


1.1.1.1
log
@
@
text
@@


1.1.1.1.12.1
log
@Merge from 1.7: replace with public-domain ones.
@
text
@d1 14
a14 1
/* public domain rewrite of strtol(3) */
d18 36
a53 5
long
strtol(nptr, endptr, base)
    char *nptr;
    char **endptr;
    int base;
d55 6
a60 2
    long result;
    char *p = nptr;
d62 1
d64 1
a64 1
	p++;
d66 5
d72 7
a78 6
	p++;
	result = -strtoul(p, endptr, base);
    }
    else {
	if (*p == '+') p++;
	result = strtoul(p, endptr, base);
d80 2
a81 2
    if (endptr != 0 && *endptr == p) {
	*endptr = nptr;
@

