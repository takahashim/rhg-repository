head	1.1;
access;
symbols
	v1_6_7:1.1.2.1
	v1_6_6:1.1.2.1
	v1_6_5:1.1.2.1
	v1_6_4:1.1.2.1
	v1_7_1:1.1
	v1_6_4_preview4:1.1.2.1
	ruby_1_6:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2001.03.13.05.45.13;	author matz;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.25.15.01.40;	author matz;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* io.c (argf_seek_m): wrong calling sequence of rb_io_seek().

* parse.y (cond0): no special treatment of string literal in
  condition.

* math.c: add acos, asin, atan, conh, sinh, tanh and hypot to Math.

* configure.in: check hypot availablility.

* missing/hypot.c: public domain rewrite of hypot.

* parse.y (warn_unless_e_option): warning condition was wrong.

* parse.y (warning_unless_e_option): ditto.

* enum.c (enum_all): new method 'all?', which returns true if
  block returns true for all elements.

* enum.c (enum_any): new method 'any?', which returns true if
  block retruns true for any of elements.

* marshal.c (marshal_load): do not give warning unless explicitly
  set to verbose.

* eval.c (rb_exit): give string value "exit" to SystemExit.

* ruby.c (proc_options): -v should not print version if
  proc_options called via moreswitches().

* parse.y (stmt): while/until modifier must work for empty body.
@
text
@/* public domain rewrite of hypot */

#include <math.h>

double hypot(x,y)
    double x, y;
{
    if (x < 0) x = -x;
    if (y < 0) y = -y;
    if (x < y) {
	double tmp = x;
	x = y; y = tmp;
    }
    if (y == 0.0) return x;
    y /= x;
    return x * sqrt(1.0+y*y);
}
@


1.1.2.1
log
@* string.c (rb_str_replace): add taint status infection
  (OBJ_INFECT()).

* string.c (rb_str_crypt): ditto.

* string.c (rb_str_ljust): ditto.

* string.c (rb_str_rjust): ditto.

* string.c (rb_str_center): ditto.
@
text
@@

