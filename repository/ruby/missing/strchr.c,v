head	1.3;
access;
symbols
	v1_6_7:1.2
	v1_6_6:1.2
	v1_6_5:1.2
	v1_6_4:1.2
	v1_7_1:1.3
	v1_6_4_preview4:1.2
	v1_6_4_preview3:1.2
	v1_6_4_preview2:1.2
	v1_6_4_preview1:1.2
	v1_6_3:1.2
	ruby_m17n:1.2.0.6
	ruby_1_6:1.2.0.4
	v1_6_2:1.2
	v1_6_1:1.2
	v1_6_0:1.2
	v1_4_6:1.2
	v1_4_5:1.2
	v1_4_4:1.2
	ruby_1_4_3:1.2
	ruby1_4_3:1.2
	v1_4_3:1.2
	v1_5_0:1.2
	ruby_1_4_3_pre1:1.2
	ruby_1_4:1.2.0.2
	v1_4_2:1.2
	v1_4_1:1.2
	v1_4_0:1.2
	v1_3_7:1.1.1.1
	v1_3_6_repack:1.1.1.1
	v1_3_6:1.1.1.1
	v1_3_5:1.1.1.1
	v1_2_6repack:1.1.2.1
	v1_3_4_990625:1.1.1.1
	v1_3_4_990624:1.1.1.1
	v1_2_6:1.1.2.1
	v1_3_4_990611:1.1.1.1
	v1_3_4_990531:1.1.1.1
	v1_3_3_990518:1.1.1.1
	v1_3_3_990513:1.1.1.1
	v1_3_3_990507:1.1.1.1
	v1_2_5:1.1.2.1
	v1_2_4:1.1.2.1
	v1_3_1_990225:1.1.1.1
	v1_3_1_990224:1.1.1.1
	v1_3_1_990215:1.1.1.1
	v1_3_1_990212:1.1.1.1
	v1_3_1_990210:1.1.1.1
	v1_3_1_:1.1.1.1
	v1_3_1_990205:1.1.1.1
	v1_3_1_990201:1.1.1.1
	v1_3_1"_990201:1.1.1.1
	v1_3_1_990128:1.1.1.1
	v1_3_1_990127:1.1.1.1
	v1_3_1_990126:1.1.1.1
	ruby_1_3:1.1.1.1.0.2
	v1_2_2:1.1.2.1
	RUBY_1_3:1.1.1.1
	RUBY:1.1.1
	v1_2_2_pr1:1.1.2.1
	v1_2_1repack:1.1.2.1
	v1_2_1:1.1.2.1
	v1_2_stable:1.1.2.1
	v1_1d1:1.1.2.1
	v1_1d0:1.1.2.1
	v1_1c9_1:1.1.2.1
	v1_1c9:1.1.2.1
	v1_1c8:1.1.2.1
	v1_1c7:1.1.2.1
	v1_1c6:1.1.2.1
	v1_1d-start:1.1.2.1
	v1_1c5:1.1.2.1
	v1_1dev:1.1.2.1.0.2
	v1_1c4:1.1.2.1
	v1_1c3:1.1.2.1
	v1_1c2:1.1.2.1
	v1_1c1:1.1.2.1
	v1_1c0:1.1.2.1
	v1_1b9_31:1.1.2.1
	v1_1b9_30:1.1.2.1
	v1_1b9_28:1.1.2.1
	v1_1b9_27:1.1.2.1
	v1_1b9_26:1.1.2.1
	r1_1b9_25:1.1.2.1
	r1_1b9_24:1.1.2.1
	v1_1b9_23:1.1.2.1
	v1_1b9_22:1.1.2.1
	v1_1b9_20:1.1.2.1
	v1_1b9_18:1.1.2.1
	v1_1b9_16:1.1.2.1
	v1_1b9_15:1.1.2.1
	v1_1b9_13:1.1.2.1
	v1_1b9_12:1.1.2.1
	v1_1b9_11:1.1.2.1
	v1_1b9_08:1.1.2.1
	v1_1b9_07:1.1.2.1
	v1_1r:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2001.03.06.08.17.18;	author matz;	state Exp;
branches;
next	1.2;

1.2
date	99.08.13.05.45.19;	author matz;	state Exp;
branches;
next	1.1;

1.1
date	98.03.11.07.33.07;	author matz;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	99.01.20.04.59.37;	author matz;	state Exp;
branches;
next	;

1.1.2.1
date	98.03.11.07.33.08;	author matz;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* parse.y (primary): rescue and ensure clauses should be allowed
  to appear in singleton method body.
@
text
@/* public domain rewrite of strchr(3) and strrchr(3) */

char *
strchr(s, c)
    char *s;
    int c;
{
    if (c == 0) return s + strlen(s);
    while (*s) {
	if (*s == c)
	    return s;
	s++;
    }
    return 0;
}

char *
strrchr(s, c)
    char *s;
    int c;
{
    char *save = 0;

    while (*s) {
	if (*s == c)
	    save = s;
	s++;
    }
    return save;
}
@


1.2
log
@1.4.0
@
text
@d1 1
a1 7
/*
 * strchr --- search a string for a character
 *
 * We supply this routine for those systems that aren't standard yet.
 */

#include <stdio.h>
d4 3
a6 2
strchr(str, c)
register const char *str, c;
d8 7
a14 13
	if (c == '\0') {
		/* thanks to Mike Brennan ... */
		do {
			if (*str == c)
				return (char *) str;
		} while (*str++);
	} else {
		for (; *str; str++)
			if (*str == c)
				return (char *) str;
	}

	return NULL;
a16 6
/*
 * strrchr --- find the last occurrence of a character in a string
 *
 * We supply this routine for those systems that aren't standard yet.
 */

d18 3
a20 2
strrchr(str, c)
register const char *str, c;
d22 1
a22 5
	register const char *save = NULL;

	for (; *str; str++)
		if (*str == c)
			save = str;
d24 6
a29 1
	return (char *) save;
@


1.1
log
@file strchr.c was initially added on branch v1_1r.
@
text
@d1 45
@


1.1.1.1
log
@ruby 1.3 cycle
@
text
@a0 45
/*
 * strchr --- search a string for a character
 *
 * We supply this routine for those systems that aren't standard yet.
 */

#include <stdio.h>

char *
strchr(str, c)
register const char *str, c;
{
	if (c == '\0') {
		/* thanks to Mike Brennan ... */
		do {
			if (*str == c)
				return (char *) str;
		} while (*str++);
	} else {
		for (; *str; str++)
			if (*str == c)
				return (char *) str;
	}

	return NULL;
}

/*
 * strrchr --- find the last occurrence of a character in a string
 *
 * We supply this routine for those systems that aren't standard yet.
 */

char *
strrchr(str, c)
register const char *str, c;
{
	register const char *save = NULL;

	for (; *str; str++)
		if (*str == c)
			save = str;

	return (char *) save;
}
@


1.1.2.1
log
@gets speed up patch
@
text
@a0 45
/*
 * strchr --- search a string for a character
 *
 * We supply this routine for those systems that aren't standard yet.
 */

#include <stdio.h>

char *
strchr(str, c)
register const char *str, c;
{
	if (c == '\0') {
		/* thanks to Mike Brennan ... */
		do {
			if (*str == c)
				return (char *) str;
		} while (*str++);
	} else {
		for (; *str; str++)
			if (*str == c)
				return (char *) str;
	}

	return NULL;
}

/*
 * strrchr --- find the last occurrence of a character in a string
 *
 * We supply this routine for those systems that aren't standard yet.
 */

char *
strrchr(str, c)
register const char *str, c;
{
	register const char *save = NULL;

	for (; *str; str++)
		if (*str == c)
			save = str;

	return (char *) save;
}
@
