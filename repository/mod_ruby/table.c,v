head	1.10;
access;
symbols
	release_1_0_1:1.10
	version_1_0-branch:1.10.0.2
	root-of-version_1_0:1.10
	release_1_0_0:1.10
	release_0_9_9:1.10
	release_0_9_8:1.9
	release_0_9_7:1.7
	release_0_9_6:1.7
	release_0_9_5:1.6
	autoconfiscation-branch:1.6.0.2
	root-of-autoconfiscation:1.6
	release_0_9_4:1.6
	release_0_9_3:1.5
	release_0_9_2:1.5
	release_0_9_1:1.5
	release_0_9_0:1.4
	release_0_8_6:1.4
	release_0_8_5:1.4
	release_0_8_4:1.4
	release_0_8_3:1.3
	release_0_8_2:1.3
	release_0_8_1:1.1;
locks; strict;
comment	@ * @;


1.10
date	2002.05.07.07.35.09;	author shugo;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.05.05.57.35;	author shugo;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.04.07.36.57;	author shugo;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.16.05.39.28;	author shugo;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.15.03.27.46;	author shugo;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.06.05.39.37;	author shugo;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.11.02.14.15;	author shugo;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.04.03.07.20;	author shugo;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.02.08.45.26;	author shugo;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.27.04.51.59;	author shugo;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* table.c (table_set): use ap_pstrndup().
* table.c (table_merge): ditto.
* table.c (table_add): ditto.
@
text
@/*
 * $Id: table.c,v 1.9 2002/03/05 05:57:35 shugo Exp $
 * Copyright (C) 2001  Shugo Maeda <shugo@@modruby.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "mod_ruby.h"
#include "apachelib.h"

VALUE rb_cApacheTable;
VALUE rb_cApacheRestrictedTable;

VALUE rb_apache_table_new(VALUE klass, table *tbl)
{
    return Data_Wrap_Struct(klass, NULL, NULL, tbl);
}

static VALUE table_clear(VALUE self)
{
    table *tbl;

    Data_Get_Struct(self, table, tbl);
    ap_clear_table(tbl);
    return Qnil;
}

static VALUE table_get(VALUE self, VALUE name)
{
    table *tbl;
    const char *key, *res;

    key = STR2CSTR(name);
    Data_Get_Struct(self, table, tbl);
    res = ap_table_get(tbl, key);
    if (res)
	return rb_tainted_str_new2(res);
    else
	return Qnil;
}

static VALUE table_set(VALUE self, VALUE name, VALUE val)
{
    table *tbl;
    char *s;

    Check_Type(val, T_STRING);
    Data_Get_Struct(self, table, tbl);
    s = ap_pstrndup(ap_table_elts(tbl)->pool, RSTRING(val)->ptr, RSTRING(val)->len);
    ap_table_setn(tbl, STR2CSTR(name), s);
    return val;
}

static VALUE table_merge(VALUE self, VALUE name, VALUE val)
{
    table *tbl;
    char *s;

    Check_Type(val, T_STRING);
    Data_Get_Struct(self, table, tbl);
    s = ap_pstrndup(ap_table_elts(tbl)->pool, RSTRING(val)->ptr, RSTRING(val)->len);
    ap_table_mergen(tbl, STR2CSTR(name), s);
    return val;
}

static VALUE table_unset(VALUE self, VALUE name)
{
    table *tbl;

    Data_Get_Struct(self, table, tbl);
    ap_table_unset(tbl, STR2CSTR(name));
    return Qnil;
}

static VALUE table_add(VALUE self, VALUE name, VALUE val)
{
    table *tbl;
    char *s;

    Check_Type(val, T_STRING);
    Data_Get_Struct(self, table, tbl);
    s = ap_pstrndup(ap_table_elts(tbl)->pool, RSTRING(val)->ptr, RSTRING(val)->len);
    ap_table_addn(tbl, STR2CSTR(name), s);
    return val;
}

static VALUE table_each(VALUE self)
{
    VALUE key, val, assoc;
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	key = rb_tainted_str_new2(hdrs[i].key);
	val = hdrs[i].val ? rb_tainted_str_new2(hdrs[i].val) : Qnil;
	assoc = rb_assoc_new(key, val);
	rb_yield(assoc);
    }
    return Qnil;
}

static VALUE table_each_key(VALUE self)
{
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	rb_yield(rb_tainted_str_new2(hdrs[i].key));
    }
    return Qnil;
}

static VALUE table_each_value(VALUE self)
{
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	rb_yield(hdrs[i].val ? rb_tainted_str_new2(hdrs[i].val) : Qnil);
    }
    return Qnil;
}

static VALUE restricted_table_get(VALUE self, VALUE name)
{
    table *tbl;
    const char *key, *res;

    key = STR2CSTR(name);
    if (strcasecmp(key, "authorization") == 0 ||
	strcasecmp(key, "proxy-authorization") == 0)
	return Qnil;
    Data_Get_Struct(self, table, tbl);
    res = ap_table_get(tbl, key);
    if (res)
	return rb_tainted_str_new2(res);
    else
	return Qnil;
}

static VALUE restricted_table_each(VALUE self)
{
    VALUE assoc;
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	if (strcasecmp(hdrs[i].key, "authorization") == 0 ||
	    strcasecmp(hdrs[i].key, "proxy-authorization") == 0)
	    continue;
	assoc = rb_assoc_new(rb_tainted_str_new2(hdrs[i].key),
			     hdrs[i].val ? rb_tainted_str_new2(hdrs[i].val) : Qnil);
	rb_yield(assoc);
    }
    return Qnil;
}

static VALUE restricted_table_each_key(VALUE self)
{
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	if (strcasecmp(hdrs[i].key, "authorization") == 0 ||
	    strcasecmp(hdrs[i].key, "proxy-authorization") == 0)
	    continue;
	rb_yield(rb_tainted_str_new2(hdrs[i].key));
    }
    return Qnil;
}

static VALUE restricted_table_each_value(VALUE self)
{
    table *tbl;
    const array_header *hdrs_arr;
    table_entry *hdrs;
    int i;

    Data_Get_Struct(self, table, tbl);
    hdrs_arr = ap_table_elts(tbl);
    hdrs = (table_entry *) hdrs_arr->elts;
    for (i = 0; i < hdrs_arr->nelts; i++) {
	if (hdrs[i].key == NULL)
	    continue;
	if (strcasecmp(hdrs[i].key, "authorization") == 0 ||
	    strcasecmp(hdrs[i].key, "proxy-authorization") == 0)
	    continue;
	rb_yield(hdrs[i].val ? rb_tainted_str_new2(hdrs[i].val) : Qnil);
    }
    return Qnil;
}

void rb_init_apache_table()
{
    rb_cApacheTable = rb_define_class_under(rb_mApache, "Table", rb_cObject);
    rb_include_module(rb_cApacheTable, rb_mEnumerable);
    rb_undef_method(CLASS_OF(rb_cApacheTable), "new");
    rb_define_method(rb_cApacheTable, "clear", table_clear, 0);
    rb_define_method(rb_cApacheTable, "get", table_get, 1);
    rb_define_method(rb_cApacheTable, "[]", table_get, 1);
    rb_define_method(rb_cApacheTable, "set", table_set, 2);
    rb_define_method(rb_cApacheTable, "[]=", table_set, 2);
    rb_define_method(rb_cApacheTable, "merge", table_merge, 2);
    rb_define_method(rb_cApacheTable, "unset", table_unset, 1);
    rb_define_method(rb_cApacheTable, "add", table_add, 2);
    rb_define_method(rb_cApacheTable, "each", table_each, 0);
    rb_define_method(rb_cApacheTable, "each_key", table_each_key, 0);
    rb_define_method(rb_cApacheTable, "each_value", table_each_value, 0);

    rb_cApacheRestrictedTable = rb_define_class_under(rb_mApache,
						      "RestrictedTable",
						      rb_cApacheTable);
    rb_define_method(rb_cApacheRestrictedTable, "get", restricted_table_get, 1);
    rb_define_method(rb_cApacheRestrictedTable, "[]", restricted_table_get, 1);
    rb_define_method(rb_cApacheRestrictedTable, "each", restricted_table_each, 0);
    rb_define_method(rb_cApacheRestrictedTable, "each_key",
		     restricted_table_each_key, 0);
    rb_define_method(rb_cApacheRestrictedTable, "each_value",
		     restricted_table_each_value, 0);
}
@


1.9
log
@* supports Apache 2.0.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.8 2002/03/04 07:36:57 shugo Exp $
d65 1
d67 1
d69 2
a70 1
    ap_table_set(tbl, STR2CSTR(name), STR2CSTR(val));
d77 1
d79 1
d81 2
a82 1
    ap_table_merge(tbl, STR2CSTR(name), STR2CSTR(val));
d98 1
d100 1
d102 2
a103 1
    ap_table_add(tbl, STR2CSTR(name), STR2CSTR(val));
@


1.8
log
@* table.c (table_setn): removed.
* table.c (table_mergen): ditto.
* table.c (table_addn): ditto.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.7 2002/01/16 05:39:28 shugo Exp $
d28 1
a28 12
#include "httpd.h"
#include "http_config.h"
#include "http_core.h"
#include "http_log.h"
#include "http_main.h"
#include "http_protocol.h"
#include "util_script.h"
#include "multithread.h"

#include "ruby.h"
#include "version.h"

a70 11
/*
static VALUE table_setn(VALUE self, VALUE name, VALUE val)
{
    table *tbl;

    Data_Get_Struct(self, table, tbl);
    ap_table_setn(tbl, STR2CSTR(name), STR2CSTR(val));
    return val;
}
*/

a79 11
/*
static VALUE table_mergen(VALUE self, VALUE name, VALUE val)
{
    table *tbl;

    Data_Get_Struct(self, table, tbl);
    ap_table_mergen(tbl, STR2CSTR(name), STR2CSTR(val));
    return val;
}
*/

a97 11
/*
static VALUE table_addn(VALUE self, VALUE name, VALUE val)
{
    table *tbl;

    Data_Get_Struct(self, table, tbl);
    ap_table_addn(tbl, STR2CSTR(name), STR2CSTR(val));
    return val;
}
*/

d102 1
a102 1
    array_header *hdrs_arr;
d123 1
a123 1
    array_header *hdrs_arr;
d141 1
a141 1
    array_header *hdrs_arr;
d177 1
a177 1
    array_header *hdrs_arr;
d200 1
a200 1
    array_header *hdrs_arr;
d221 1
a221 1
    array_header *hdrs_arr;
a248 1
    /* rb_define_method(rb_cApacheTable, "setn", table_setn, 2); */
a249 1
    /* rb_define_method(rb_cApacheTable, "mergen", table_mergen, 2); */
a251 1
    /* rb_define_method(rb_cApacheTable, "addn", table_addn, 2); */
@


1.7
log
@* apachelib.h (CSTR2OBJ): use rb_tainted_str_new2().
* array_header.c: ditto.
* table.c: ditto.
* server.c: ditto.
* lib/apache/ruby-run.rb: use untaint.
* lib/apache/eruby-run.rb: ditto.
* lib/apache/erb-run.rb: ditto.
* lib/apache/rd2html.rb: ditto.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.6 2001/10/15 03:27:46 shugo Exp $
d82 1
d91 1
d102 1
d111 1
d131 1
d140 1
d293 1
a293 1
    rb_define_method(rb_cApacheTable, "setn", table_setn, 2);
d295 1
a295 1
    rb_define_method(rb_cApacheTable, "mergen", table_mergen, 2);
d298 1
a298 1
    rb_define_method(rb_cApacheTable, "addn", table_addn, 2);
@


1.6
log
@* mod_ruby.c (ruby_startup): call Init_stack().
* request.c (cleanup_request_object): free RDATA(reqobj)->data.
* request.c (request_headers_in): allow non-auth handlers to
access Authorization header fields.
* request.c (request_get_basic_auth_pw): allow non-auth handlers.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.5 2001/08/06 05:39:37 shugo Exp $
d68 1
a68 1
	return rb_str_new2(res);
d138 1
a138 1
    VALUE assoc;
d150 3
a152 2
	assoc = rb_assoc_new(rb_str_new2(hdrs[i].key),
			     hdrs[i].val ? rb_str_new2(hdrs[i].val) : Qnil);
d171 1
a171 1
	rb_yield(rb_str_new2(hdrs[i].key));
d189 1
a189 1
	rb_yield(hdrs[i].val ? rb_str_new2(hdrs[i].val) : Qnil);
d206 1
a206 1
	return rb_str_new2(res);
d228 2
a229 2
	assoc = rb_assoc_new(rb_str_new2(hdrs[i].key),
			     hdrs[i].val ? rb_str_new2(hdrs[i].val) : Qnil);
d251 1
a251 1
	rb_yield(rb_str_new2(hdrs[i].key));
d272 1
a272 1
	rb_yield(hdrs[i].val ? rb_str_new2(hdrs[i].val) : Qnil);
@


1.5
log
@* version 0.9.1 released.
@
text
@d2 2
a3 2
 * $Id$
 * Copyright (C) 2000  Shugo Maeda <shugo@@modruby.net>
@


1.4
log
@* mod_ruby.c (ruby_handler_0): handle SystemExit correctly.
* array_header.c (array_length): new method.
* table.c: renamed ApacheInTable to ApacheRestrictedTable.
* request.c (rb_apache_request_new): don't set content_type.
* request.c (request_headers_in): return non-restricted table for
RubyAuthenHandler.
* request.c (request_notes): removed.
* request.c (request_allow_options): new method.
* request.c (request_allow_overrides): ditto.
* request.c (request_default_type): ditto.
* request.c (request_construct_url): ditto.
* request.c (request_auth_type): ditto.
* request.c (request_auth_name): ditto.
* request.c (request_satisfies): ditto.
* request.c (request_requires): ditto.
* request.c (request_note_auth_failure): ditto.
* request.c (request_note_basic_auth_failure): ditto.
* request.c (request_note_digest_auth_failure): ditto.
* request.c (request_basic_auth_pw): ditto.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.3 2001/06/04 03:07:20 shugo Exp $
d4 1
d6 8
a13 1
 * Author: Shugo Maeda <shugo@@modruby.net>
d15 11
a25 16
 * This file is part of mod_ruby.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
@


1.3
log
@* lib/auto-reload: new file.
* lib/apache/ruby-run.rb: renamed from ruby/apache/ruby.rb.
* lib/apache/eruby-run.rb: renamed from ruby/apache/eruby.rb.
* lib/apache/rd2html.rb: renamed from ruby/apache/rd2html.rb.
* lib/apache/eruby-run.rb (handler): specify filename for backtrace.
* changed license from GPL to LGPL.
* COPYING: new file.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.2 2001/05/02 08:45:26 shugo Exp $
d40 1
a40 1
VALUE rb_cApacheInTable;
d190 1
a190 1
static VALUE in_table_get(VALUE self, VALUE name)
d207 1
a207 1
static VALUE in_table_each(VALUE self)
d231 1
a231 1
static VALUE in_table_each_key(VALUE self)
d252 1
a252 1
static VALUE in_table_each_value(VALUE self)
d292 11
a302 7
    rb_cApacheInTable = rb_define_class_under(rb_mApache, "InTable",
					      rb_cApacheTable);
    rb_define_method(rb_cApacheInTable, "get", in_table_get, 1);
    rb_define_method(rb_cApacheInTable, "[]", in_table_get, 1);
    rb_define_method(rb_cApacheInTable, "each", in_table_each, 0);
    rb_define_method(rb_cApacheInTable, "each_key", in_table_each_key, 0);
    rb_define_method(rb_cApacheInTable, "each_value", in_table_each_value, 0);
@


1.2
log
@* fixed copyright notice.
* array_header.c: new file for Apache::ArrayHeader.
* server.c: added some methods.
@
text
@d2 1
a2 1
 * $Id: table.c,v 1.1 2001/04/27 04:51:59 shugo Exp $
d9 4
a12 4
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
d16 2
a17 2
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
d19 4
a22 4
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA
@


1.1
log
@* ruby/apache/ruby.rb (emulate_cgi): new method.
* ruby/apache/eruby.rb: inherit Apache::Ruby.
* table.c: new file for Apache::Table.
* connection.c: new file for Apache::Connection.
* server.c: new file for Apache::Server.
* request.c: new file for Apache::Request.
* request.c (request_setup_cgi_env): new method.
* mod_ruby.c (script_handler): resotre original $stdin, $stdout
and $>.
@
text
@d2 2
a3 3
 * $Id$
 * Copyright (C) 2000  ZetaBITS, Inc.
 * Copyright (C) 2000  Information-technology Promotion Agency, Japan
a23 2

#include <string.h>
@
