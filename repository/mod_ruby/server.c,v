head	1.11;
access;
symbols
	release_1_0_1:1.11
	version_1_0-branch:1.11.0.2
	root-of-version_1_0:1.11
	release_1_0_0:1.11
	release_0_9_9:1.10
	release_0_9_8:1.10
	release_0_9_7:1.8
	release_0_9_6:1.8
	release_0_9_5:1.7
	autoconfiscation-branch:1.7.0.2
	root-of-autoconfiscation:1.7
	release_0_9_4:1.7
	release_0_9_3:1.6
	release_0_9_2:1.6
	release_0_9_1:1.6
	release_0_9_0:1.4
	release_0_8_6:1.4
	release_0_8_5:1.4
	release_0_8_4:1.3
	release_0_8_3:1.3
	release_0_8_2:1.3
	release_0_8_1:1.1;
locks; strict;
comment	@ * @;


1.11
date	2002.07.03.05.13.11;	author shugo;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.27.05.17.20;	author shugo;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.05.05.57.35;	author shugo;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.16.05.39.28;	author shugo;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.15.03.27.46;	author shugo;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.06.05.39.37;	author shugo;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.06.05.14.57;	author shugo;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.21.07.50.33;	author shugo;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.04.03.07.20;	author shugo;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.02.08.45.26;	author shugo;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.27.04.51.59;	author shugo;	state Exp;
branches;
next	;


desc
@@


1.11
log
@* server.c (server_log_emerge): new method.
* server.c (server_log_alert): ditto.
* server.c (server_log_crit): ditto.
* server.c (server_log_info): ditto.
@
text
@/*
 * $Id: server.c,v 1.10 2002/03/27 05:17:20 shugo Exp $
 * Copyright (C) 2001  Shugo Maeda <shugo@@modruby.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* for core_module */
#define CORE_PRIVATE

#include "mod_ruby.h"
#include "apachelib.h"

VALUE rb_cApacheServer;

VALUE rb_apache_server_new(server_rec *server)
{
    return Data_Wrap_Struct(rb_cApacheServer, NULL, NULL, server);
}

DEFINE_STRING_ATTR_READER(server_defn_name, server_rec, defn_name);
DEFINE_UINT_ATTR_READER(server_defn_line_number, server_rec, defn_line_number);
#ifdef APACHE2
static VALUE server_srm_confname(VALUE self)
{
    rb_notimplement();
    return Qnil;
}

static VALUE server_access_confname(VALUE self)
{
    rb_notimplement();
    return Qnil;
}
#else /* Apache 1.x */
DEFINE_STRING_ATTR_READER(server_srm_confname, server_rec, srm_confname);
DEFINE_STRING_ATTR_READER(server_access_confname, server_rec, access_confname);
#endif
DEFINE_STRING_ATTR_READER(server_admin, server_rec, server_admin);
DEFINE_STRING_ATTR_READER(server_hostname, server_rec, server_hostname);
DEFINE_UINT_ATTR_READER(server_port, server_rec, port);
DEFINE_STRING_ATTR_READER(server_error_fname, server_rec, error_fname);
DEFINE_INT_ATTR_READER(server_loglevel, server_rec, loglevel);
DEFINE_BOOL_ATTR_READER(server_is_virtual, server_rec, is_virtual);
DEFINE_INT_ATTR_READER(server_timeout, server_rec, timeout);
DEFINE_INT_ATTR_READER(server_keep_alive_timeout, server_rec,
		       keep_alive_timeout);
DEFINE_INT_ATTR_READER(server_keep_alive_max, server_rec, keep_alive_max);
DEFINE_BOOL_ATTR_READER(server_keep_alive, server_rec, keep_alive);
#ifdef APACHE2
static VALUE server_send_buffer_size(VALUE self)
{
    rb_notimplement();
    return Qnil;
}
#else /* Apache 1.x */
DEFINE_INT_ATTR_READER(server_send_buffer_size, server_rec, send_buffer_size);
#endif
DEFINE_STRING_ATTR_READER(server_path, server_rec, path);
#ifdef APACHE2
static VALUE server_uid(VALUE self)
{
    rb_notimplement();
    return Qnil;
}

static VALUE server_gid(VALUE self)
{
    rb_notimplement();
    return Qnil;
}
#else /* Apache 1.x */
DEFINE_INT_ATTR_READER(server_uid, server_rec, server_uid);
DEFINE_INT_ATTR_READER(server_gid, server_rec, server_gid);
#endif
DEFINE_INT_ATTR_READER(server_limit_req_line, server_rec, limit_req_line);
DEFINE_INT_ATTR_READER(server_limit_req_fieldsize, server_rec,
		       limit_req_fieldsize);
DEFINE_INT_ATTR_READER(server_limit_req_fields, server_rec, limit_req_fields);

static VALUE server_names(VALUE self)
{
    server_rec *server;

    Data_Get_Struct(self, server_rec, server);
    if (server->names) {
	return rb_apache_array_new(server->names);
    }
    else {
	return Qnil;
    }
}

static VALUE server_wild_names(VALUE self)
{
    server_rec *server;

    Data_Get_Struct(self, server_rec, server);
    if (server->wild_names) {
	return rb_apache_array_new(server->wild_names);
    }
    else {
	return Qnil;
    }
}

static VALUE server_log(int type, int argc, VALUE *argv, VALUE self)
{
    server_rec *server;
    VALUE s;

    Data_Get_Struct(self, server_rec, server);
    s = rb_f_sprintf(argc, argv);
    ap_log_error(APLOG_MARK, type | APLOG_NOERRNO, APLOG_STATUS(0) server,
		 "%s", STR2CSTR(s));
    return Qnil;
}

static VALUE server_log_emerg(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_EMERG, argc, argv, self);
}

static VALUE server_log_alert(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_ALERT, argc, argv, self);
}

static VALUE server_log_crit(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_CRIT, argc, argv, self);
}

static VALUE server_log_error(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_ERR, argc, argv, self);
}

static VALUE server_log_warn(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_WARNING, argc, argv, self);
}

static VALUE server_log_notice(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_NOTICE, argc, argv, self);
}

static VALUE server_log_info(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_INFO, argc, argv, self);
}

static VALUE server_log_debug(int argc, VALUE *argv, VALUE self)
{
    return server_log(APLOG_DEBUG, argc, argv, self);
}

static VALUE server_document_root(VALUE self)
{
    server_rec *server;
    core_server_config *conf;

    Data_Get_Struct(self, server_rec, server);
    conf = (core_server_config *)
	ap_get_module_config(server->module_config, &core_module);
    if (conf->ap_document_root) {
	return rb_tainted_str_new2(conf->ap_document_root);
    }
    else {
	return Qnil;
    }
}

void rb_init_apache_server()
{
    rb_cApacheServer = rb_define_class_under(rb_mApache, "Server", rb_cObject);
    rb_undef_method(CLASS_OF(rb_cApacheConnection), "new");
    rb_define_method(rb_cApacheServer, "defn_name", server_defn_name, 0);
    rb_define_method(rb_cApacheServer, "defn_line_number",
		     server_defn_line_number, 0);
    rb_define_method(rb_cApacheServer, "srm_confname", server_srm_confname, 0);
    rb_define_method(rb_cApacheServer, "access_confname", server_access_confname, 0);
    rb_define_method(rb_cApacheServer, "admin", server_admin, 0);
    rb_define_method(rb_cApacheServer, "hostname", server_hostname, 0);
    rb_define_method(rb_cApacheServer, "port", server_port, 0);
    rb_define_method(rb_cApacheServer, "error_fname", server_error_fname, 0);
    rb_define_method(rb_cApacheServer, "loglevel", server_loglevel, 0);
    rb_define_method(rb_cApacheServer, "is_virtual", server_is_virtual, 0);
    rb_define_method(rb_cApacheServer, "virtual?", server_is_virtual, 0);
    rb_define_method(rb_cApacheServer, "timeout", server_timeout, 0);
    rb_define_method(rb_cApacheServer, "keep_alive_timeout",
		     server_keep_alive_timeout, 0);
    rb_define_method(rb_cApacheServer, "keep_alive_max",
		     server_keep_alive_max, 0);
    rb_define_method(rb_cApacheServer, "keep_alive", server_keep_alive, 0);
    rb_define_method(rb_cApacheServer, "keep_alive?", server_keep_alive, 0);
    rb_define_method(rb_cApacheServer, "send_buffer_size",
		     server_send_buffer_size, 0);
    rb_define_method(rb_cApacheServer, "path", server_path, 0);
    rb_define_method(rb_cApacheServer, "names", server_names, 0);
    rb_define_method(rb_cApacheServer, "wild_names", server_wild_names, 0);
    rb_define_method(rb_cApacheServer, "uid", server_uid, 0);
    rb_define_method(rb_cApacheServer, "gid", server_gid, 0);
    rb_define_method(rb_cApacheServer, "limit_req_line",
		     server_limit_req_line, 0);
    rb_define_method(rb_cApacheServer, "limit_req_fieldsize",
		     server_limit_req_fieldsize, 0);
    rb_define_method(rb_cApacheServer, "limit_req_fields",
		     server_limit_req_fields, 0);
    rb_define_method(rb_cApacheServer, "log_emerg",
		     server_log_emerg, -1);
    rb_define_method(rb_cApacheServer, "log_alert",
		     server_log_alert, -1);
    rb_define_method(rb_cApacheServer, "log_crit",
		     server_log_crit, -1);
    rb_define_method(rb_cApacheServer, "log_error",
		     server_log_error, -1);
    rb_define_method(rb_cApacheServer, "log_warn",
		     server_log_warn, -1);
    rb_define_method(rb_cApacheServer, "log_notice",
		     server_log_notice, -1);
    rb_define_method(rb_cApacheServer, "log_info",
		     server_log_info, -1);
    rb_define_method(rb_cApacheServer, "log_debug",
		     server_log_debug, -1);
    rb_define_method(rb_cApacheServer, "document_root",
		     server_document_root, 0);
}
@


1.10
log
@* request.c (request_set_user): new method.

* request.c (request_set_auth_type): ditto.

* request.c (request_set_auth_name): ditto.

* connection.c (connection_set_user): ditto.

* connection.c (connection_set_auth_type): ditto.

* connection.c (connection_remote_port): fix for Apache2.

* connection.c (connection_local_port): ditto.

* connection.c (connection_remote_port): new method.

* connection.c (connection_local_port): ditto.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.9 2002/03/05 05:57:35 shugo Exp $
d139 15
d169 5
d231 6
d243 2
@


1.9
log
@* supports Apache 2.0.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.8 2002/01/16 05:39:28 shugo Exp $
d43 1
a43 1
#ifdef STANDARD20_MODULE_STUFF /* Apache 2.x */
d70 1
a70 1
#ifdef STANDARD20_MODULE_STUFF /* Apache 2.x */
d80 1
a80 1
#ifdef STANDARD20_MODULE_STUFF /* Apache 2.x */
@


1.8
log
@* apachelib.h (CSTR2OBJ): use rb_tainted_str_new2().
* array_header.c: ditto.
* table.c: ditto.
* server.c: ditto.
* lib/apache/ruby-run.rb: use untaint.
* lib/apache/eruby-run.rb: ditto.
* lib/apache/erb-run.rb: ditto.
* lib/apache/rd2html.rb: ditto.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.7 2001/10/15 03:27:46 shugo Exp $
d31 1
a31 12
#include "httpd.h"
#include "http_config.h"
#include "http_core.h"
#include "http_log.h"
#include "http_main.h"
#include "http_protocol.h"
#include "util_script.h"
#include "multithread.h"

#include "ruby.h"
#include "version.h"

d43 13
d58 1
d70 7
d78 1
d80 13
d95 1
d134 1
a134 1
    ap_log_error(APLOG_MARK, type | APLOG_NOERRNO, server,
@


1.7
log
@* mod_ruby.c (ruby_startup): call Init_stack().
* request.c (cleanup_request_object): free RDATA(reqobj)->data.
* request.c (request_headers_in): allow non-auth handlers to
access Authorization header fields.
* request.c (request_get_basic_auth_pw): allow non-auth handlers.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.6 2001/08/06 05:39:37 shugo Exp $
d142 6
a147 1
    return conf->ap_document_root ? rb_str_new2(conf->ap_document_root) : Qnil;
@


1.6
log
@* version 0.9.1 released.
@
text
@d2 2
a3 2
 * $Id$
 * Copyright (C) 2000  Shugo Maeda <shugo@@modruby.net>
@


1.5
log
@* mod_ruby.c (ruby_handler): flush rb_request only in RubyHandler.
* server.c (server_document_root): new method.
Thanks to Sean Chittenden.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.4 2001/06/21 07:50:33 shugo Exp $
d4 1
d6 8
a13 1
 * Author: Shugo Maeda <shugo@@modruby.net>
d15 11
a25 16
 * This file is part of mod_ruby.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
@


1.4
log
@* mod_ruby.c (ruby_startup): removed Ruby version from version
	component.
* mod_ruby.c (ruby_startup): log error if ruby_require() fails.
* mod_ruby.c (ruby_handler): don't call rb_apache_request_flush()
on error.
* request.c (rb_apache_request_new): should initialize data->server.
* lib/apache/ruby-run.rb (handler): require ExecCGI and exec
permission.
* lib/apache/eruby-run.rb (handler): require ExecCGI.
* lib/apache/cgi-support.rb: new file.
* lib/apache/erb-run.rb: new file, supports ERb.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.3 2001/06/04 03:07:20 shugo Exp $
d25 3
d131 11
d186 2
@


1.3
log
@* lib/auto-reload: new file.
* lib/apache/ruby-run.rb: renamed from ruby/apache/ruby.rb.
* lib/apache/eruby-run.rb: renamed from ruby/apache/eruby.rb.
* lib/apache/rd2html.rb: renamed from ruby/apache/rd2html.rb.
* lib/apache/eruby-run.rb (handler): specify filename for backtrace.
* changed license from GPL to LGPL.
* COPYING: new file.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.2 2001/05/02 08:45:26 shugo Exp $
d96 32
d164 8
@


1.2
log
@* fixed copyright notice.
* array_header.c: new file for Apache::ArrayHeader.
* server.c: added some methods.
@
text
@d2 1
a2 1
 * $Id: server.c,v 1.1 2001/04/27 04:51:59 shugo Exp $
d9 4
a12 4
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
d16 2
a17 2
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
d19 4
a22 4
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA
@


1.1
log
@* ruby/apache/ruby.rb (emulate_cgi): new method.
* ruby/apache/eruby.rb: inherit Apache::Ruby.
* table.c: new file for Apache::Table.
* connection.c: new file for Apache::Connection.
* server.c: new file for Apache::Server.
* request.c: new file for Apache::Request.
* request.c (request_setup_cgi_env): new method.
* mod_ruby.c (script_handler): resotre original $stdin, $stdout
and $>.
@
text
@d2 2
a3 3
 * $Id$
 * Copyright (C) 2000  ZetaBITS, Inc.
 * Copyright (C) 2000  Information-technology Promotion Agency, Japan
d56 39
d112 20
@
