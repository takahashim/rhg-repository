head	1.5;
access;
symbols
	V0_3_2:1.4
	V0_1_4:1.1
	V0_1_3:1.1
	V0_1_2:1.1
	V0_1_1:1.1
	V0_1:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.01.05.14.35.05;	author chad;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.10.04.53.16;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.25.05.25.28;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.06.15.47;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.30.21.14.10;	author dave;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Replaced $rubyVersion global with Version class methods.  Replaced references to the former with the latter.  Deprecated tests for #indexes and #indices where appropriate.  Removed some duplication in several tests in ArrayBase and HashBase.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestScope < Rubicon::TestCase

  # $_ is a local variable but not be shared by threads.
  def wakeup(t)
    t.run
  end
  private :wakeup

  def test_scope_uscore_string
    sub = proc {|x| "#{x, $_ = $_, x; x}"}
    assert_equal("", sub.call("first"))
    assert_equal("first", sub.call("second"))
  end

  def test_scope_match_string
    sub = proc {|x| "#{tmp = $&; /.*/ =~ x; tmp}"}
    assert_equal("", sub.call("first"))
    assert_equal("first", sub.call("second"))
  end

  def test_threadscope_uscore
    # shares local scope
    t = Thread.start do
      $_ = "sub"
      loop do
	Thread.stop
	assert_equal("sub", $_)
      end
    end

    begin
      $_ = "main"
      # another thread may change?
      t.run
      assert_equal("main", $_)
    ensure
      t.kill
      t.join
    end
  end

  def test_threadscope_match
    # shares local scope
    t = Thread.start do
      /.*/ =~ "sub"
      loop do
	Thread.stop
	assert_equal("sub", $&)
      end
    end

    begin
      /.*/ =~ "main"
      # another thread may change?
      t.run
      assert_equal("main", $&)
    ensure
      t.kill
      t.join
    end
  end

  Version.greater_or_equal("1.7.2") do

    def test_threadscope_uscore_sub
      t = Thread.start do
        $_ = "sub"
        loop do
          Thread.stop
          assert_equal("sub", $_)
        end
      end
      
      begin
        $_ = "main"
        # another thread waked in function may change?
        wakeup(t)
        assert_equal("main", $_)
      ensure
        t.kill
        t.join
      end
    end

    def test_threadscope_match_sub
      t = Thread.start do
        /.*/ =~ "sub"
        loop do
          Thread.stop
          assert_equal("sub", $&)
        end
      end
      
      begin
        /.*/ =~ "main"
        # another thread waked in function may change?
        wakeup(t)
        assert_equal("main", $&)
      ensure
        t.kill
        t.join
      end
    end
    
    def test_threadscope_uscore_main
      t = Thread.new(Thread.current) do |main|
        $_ = "sub"
        loop do
          assert_equal("sub", $_)
          Thread.stop
          wakeup(main)
        end
      end
      
      begin
        $_ = "main"
        # another thread waked in function may change while this thread
        # is absent this scope?
        wakeup(t)
        assert_equal("main", $_)
      ensure
        t.kill
        t.join
      end
    end

    def test_threadscope_match_main
      t = Thread.new(Thread.current) do |main|
        /.*/ =~ "sub"
        loop do
          assert_equal("sub", $&)
          Thread.stop
          wakeup(main)
        end
      end
      
      begin
        /.*/ =~ "main"
        wakeup(t)
        assert_equal("main", $&)
      ensure
        t.kill
        t.join
      end
    end
    
    def test_threadscope_uscore_proc
      sub = nil
      Thread.start do
        $_ = "sub"
        sub = proc {$_}
      end.join
      
      $_ = "main"
      assert_equal("main", $_)
      assert_equal("sub", sub.call)
      assert_equal("main", $_)
    end
    
    def test_threadscope_match_proc
      sub = nil
      Thread.start do
        /.*/ =~ "sub"
        sub = proc {$&}
      end.join
      
      /.*/ =~ "main"
      assert_equal("main", $&)
      assert_equal("sub", sub.call)
      assert_equal("main", $&)
    end
  end

  
  def test_threadscope_local
    sub = nil
    Thread.start do
      var = "sub"
      sub = proc {var}
    end.join

    var = "main"
    assert_equal("main", var)
    assert_equal("sub", sub.call)
    assert_equal("main", var)
  end

  def test_threadscope_shared
    sub = nil
    var = "main"
    Thread.start do
      sub = proc {
	tmp, var = var, "sub"
	tmp
      }
    end.join

    assert_equal("main", sub.call)
    assert_equal("sub", var)
  end
end

# Run these tests if invoked directly

Rubicon::handleTests(TestScope) if $0 == __FILE__
@


1.4
log
@Give up on abort_on_exception for a while.

TestScope had the wrong Ruby version dependency.
@
text
@d66 1
a66 1
  if $rubyVersion >= "1.7.2"
@


1.3
log
@Added many patches from Nobu Nakad for 1.7 features (plus some bug fixes)
@
text
@d66 1
a66 1
  if $rubyVersion >= "1.7"
@


1.2
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d6 198
@


1.1
log
@Initial load of files
@
text
@d1 2
a2 13
#!/usr/bin/env ruby
# $Id$
#
# This file is part of Rubicon, a set of regression tests for the Ruby
# language and its built-in classes and modules.
#
# Initial development by Dave Thomas and Andy Hunt.
#
# Copyright (c) 2000 The Pragmatic Programmers, LLC (www.pragmaticprogrammer.com)
# Distributed according to the terms specified in the Ruby distribution README file.
#

require '../rubicon'
@

