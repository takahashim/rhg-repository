head	1.6;
access;
symbols
	V0_3_2:1.5
	V0_1_4:1.1
	V0_1_3:1.1
	V0_1_2:1.1
	V0_1_1:1.1
	V0_1:1.1;
locks; strict;
comment	@# @;


1.6
date	2002.01.28.19.09.36;	author nobu;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.14.05.31.05;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.11.04.00.10;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.10.07.05.22;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.30.21.14.10;	author dave;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* builtin/TestFile.rb (TestFile::test_s_expand_path): avoid
  warnings in 1.7.

* builtin/TestKernel.rb (TestKernel::test_s_open1): 1.7 feature.

* language/TestBlocksProcs.rb (TestBlocksProcs::testYield): ditto.

* language/TestFloats.rb (TestFloats::test_number_to_string):
  strict number check.

* language/TestFloats.rb (TestFloats::test_malformed): ditto.

* language/TestFloats.rb (TestFloats::test_string_to_number): ditto.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestBlocksProcs < Rubicon::TestCase

  def testBasicProc
    proc = proc {|i| i}
    assert_equal(2, proc.call(2))
    assert_equal(3, proc.call(3))
    
    proc = proc {|i| i*2}
    assert_equal(4, proc.call(2))
    assert_equal(6, proc.call(3))
  end

  def testProcScoping
    my_proc1 = nil
    my_proc2 = nil
    x = 0
    proc { 
      iii=5	
      my_proc1 = proc{|i|
        iii = i
      }
      my_proc2 = proc {
        x = iii			# nested variables shared by procs
      }
      # scope of nested variables
      assert_not_nil(defined?(iii))
    }.call
    assert(!defined?(iii))		# out of scope

    my_proc1.call(5)
    my_proc2.call
    assert_equal(5, x)
  end

  def testYield
    o = "dummy object"
    def o.f; yield nil; end;       o.f {|a| assert_nil(a)}
    def o.f; yield 1; end;         o.f {|a| assert_equal(1, a)}
    def o.f; yield []; end;        o.f {|a| assert_equal([], a)}
    def o.f; yield [1]; end;       o.f {|a| assert_equal([1], a)}
    def o.f; yield [nil]; end;     o.f {|a| assert_equal([nil], a)}
    def o.f; yield [[]]; end;      o.f {|a| assert_equal([[]], a)}
    def o.f; yield [*[]]; end;     o.f {|a| assert_equal([], a)}
    Version.greater_or_equal("1.7") do
      def o.f; yield [*[1]]; end;    o.f {|a| assert_equal([1], a)}
    end
    def o.f; yield [*[1,2]]; end;  o.f {|a| assert_equal([1,2], a)}
    
    Version.greater_or_equal("1.7") do
      def o.f; yield *nil; end;      o.f {|a| assert_nil(a)}
    end
    def o.f; yield *1; end;        o.f {|a| assert_equal(1, a)}
    def o.f; yield *[]; end;       o.f {|a| assert_nil(a)}
    def o.f; yield *[1]; end;      o.f {|a| assert_equal(1, a)}
    def o.f; yield *[nil]; end;    o.f {|a| assert_nil(a)}
    def o.f; yield *[[]]; end;     o.f {|a| assert_equal([], a)}
    def o.f; yield *[*[]]; end;    o.f {|a| assert_nil(a)}
    def o.f; yield *[*[1]]; end;   o.f {|a| assert_equal(1, a)}
    def o.f; yield *[*[1,2]]; end; o.f {|a| assert_equal([1,2], a)}
    
    def o.f; yield nil; end;       o.f {|*a| assert_equal([], a)}
    def o.f; yield 1; end;         o.f {|*a| assert_equal([1], a)}
    def o.f; yield []; end;        o.f {|*a| assert_equal([], a)}
    def o.f; yield [1]; end;       o.f {|*a| assert_equal([1], a)}
    def o.f; yield [nil]; end;     o.f {|*a| assert_equal([nil], a)}
    def o.f; yield [[]]; end;      o.f {|*a| assert_equal([[]], a)}
    def o.f; yield [*[]]; end;     o.f {|*a| assert_equal([], a)}
    def o.f; yield [*[1]]; end;    o.f {|*a| assert_equal([1], a)}
    def o.f; yield [*[1,2]]; end;  o.f {|*a| assert_equal([1,2], a)}
    
    def o.f; yield *nil; end;      o.f {|*a| assert_equal([], a)}
    def o.f; yield *1; end;        o.f {|*a| assert_equal([1], a)}
    def o.f; yield *[]; end;       o.f {|*a| assert_equal([], a)}
    def o.f; yield *[1]; end;      o.f {|*a| assert_equal([1], a)}
    def o.f; yield *[nil]; end;    o.f {|*a| assert_equal([], a)}
    def o.f; yield *[[]]; end;     o.f {|*a| assert_equal([], a)}
    def o.f; yield *[*[]]; end;    o.f {|*a| assert_equal([], a)}
    def o.f; yield *[*[1]]; end;   o.f {|*a| assert_equal([1], a)}
    def o.f; yield *[*[1,2]]; end; o.f {|*a| assert_equal([1,2], a)}
    
    def o.f; yield nil; end;       o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield 1; end;         o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield []; end;        o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield [1]; end;       o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield [nil]; end;     o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield [[]]; end;      o.f {|a,b,*c| assert([a,b,c] == [[], nil, []])}
    def o.f; yield [*[]]; end;     o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield [*[1]]; end;    o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield [*[1,2]]; end;  o.f {|a,b,*c| assert([a,b,c] == [1, 2, []])}
    
    def o.f; yield *nil; end;      o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield *1; end;        o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield *[]; end;       o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield *[1]; end;      o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield *[nil]; end;    o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield *[[]]; end;     o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield *[*[]]; end;    o.f {|a,b,*c| assert([a,b,c] == [nil, nil, []])}
    def o.f; yield *[*[1]]; end;   o.f {|a,b,*c| assert([a,b,c] == [1, nil, []])}
    def o.f; yield *[*[1,2]]; end; o.f {|a,b,*c| assert([a,b,c] == [1, 2, []])}

  end

end

# Run these tests if invoked directly

Rubicon::handleTests(TestBlocksProcs) if $0 == __FILE__
@


1.5
log
@Change many asserts to work with rubyunit-0.4.5.

RubyUnit changed to only allow true or false as the first parameter
to assert(). This means that tests such as

   assert(defined? Array)

failed.
@
text
@d47 3
a49 1
    def o.f; yield [*[1]]; end;    o.f {|a| assert_equal([1], a)}
d52 3
a54 1
    def o.f; yield *nil; end;      o.f {|a| assert_nil(a)}
@


1.4
log
@Added ts's regexp tests, Matt's array tests. Tidy a tad
@
text
@d29 1
a29 1
      assert(defined?(iii))
@


1.3
log
@Add in the Ruby 1.7 tests
@
text
@d58 1
a58 1
    def o.f; yield *[*[1,2]]; end; o.f {|a| assert([1,2], a)}
d68 1
a68 1
    def o.f; yield [*[1,2]]; end;  o.f {|*a| assert([1,2], a)}
d78 1
a78 1
    def o.f; yield *[*[1,2]]; end; o.f {|*a| assert([1,2], a)}
@


1.2
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d37 65
@


1.1
log
@Initial load of files
@
text
@d1 2
a2 11
#!/usr/bin/env ruby
# $Id$
#
# This file is part of Rubicon, a set of regression tests for the Ruby
# language and its built-in classes and modules.
#
# Initial development by Dave Thomas and Andy Hunt.
#
# Copyright (c) 2000 The Pragmatic Programmers, LLC (www.pragmaticprogrammer.com)
# Distributed according to the terms specified in the Ruby distribution README file.
#
d4 11
a14 1
require '../rubicon'
d16 16
a31 1
class TestBlocksProcs < Rubicon::TestCase
d33 4
@

