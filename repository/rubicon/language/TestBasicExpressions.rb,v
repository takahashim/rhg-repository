head	1.3;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.1
	V0_1_3:1.1
	V0_1_2:1.1
	V0_1_1:1.1
	V0_1:1.1;
locks; strict;
comment	@# @;


1.3
date	2001.11.14.05.31.05;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.30.21.14.10;	author dave;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Change many asserts to work with rubyunit-0.4.5.

RubyUnit changed to only allow true or false as the first parameter
to assert(). This means that tests such as

   assert(defined? Array)

failed.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestBasicExpressions < Rubicon::TestCase

  # ------------------------------------------------------ Alias
  class Alias0
    def foo; "foo" end
  end
  class Alias1<Alias0
    alias bar foo
    def foo; "foo+" + super end
  end
  class Alias2<Alias1
    alias baz foo
    undef foo
  end

  def testAlias1
    x = Alias2.new
    assert_equal("foo", x.bar)
    assert_equal("foo+foo", x.baz)

    # test_check for cache
    assert_equal("foo+foo", x.baz)
  end

  class Alias3<Alias2
    def foo
      defined? super
    end
    def bar
      defined? super
    end
    def quux
      defined? super
    end
  end

  def testAlias2
    x = Alias3.new
    assert(!x.foo)
    assert_not_nil(x.bar)
    assert(!x.quux)
  end

  # ------------------------------------------------------ defined?

  def definedHelper
    return !defined?(yield)
  end

  def testDefined?
    $x = 123
    assert_not_nil(defined?($x))
    assert_equal('global-variable', defined?($x))

    foo=5
    assert_not_nil(defined?(foo))

    assert_not_nil(defined?(Array))
    assert_not_nil(defined?(Object.new))
    assert(!defined?(Object.print))	# private method
    assert_not_nil(defined?(1 == 2))		# operator expression

    assert_not_nil(definedHelper)		# not iterator
    assert_not_nil(!definedHelper {})		# not iterator
  end

end

# Run these tests if invoked directly

Rubicon::handleTests(TestBasicExpressions) if $0 == __FILE__
@


1.2
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d43 1
a43 1
    assert(x.bar)
d55 1
a55 1
    assert(defined?($x))
d59 1
a59 1
    assert(defined?(foo))
d61 2
a62 2
    assert(defined?(Array))
    assert(defined?(Object.new))
d64 1
a64 1
    assert(defined?(1 == 2))		# operator expression
d66 2
a67 2
    assert(definedHelper)		# not iterator
    assert(!definedHelper {})		# not iterator
@


1.1
log
@Initial load of files
@
text
@d1 2
a2 11
#!/usr/bin/env ruby
# $Id$
#
# This file is part of Rubicon, a set of regression tests for the Ruby
# language and its built-in classes and modules.
#
# Initial development by Dave Thomas and Andy Hunt.
#
# Copyright (c) 2000 The Pragmatic Programmers, LLC (www.pragmaticprogrammer.com)
# Distributed according to the terms specified in the Ruby distribution README file.
#
d4 42
a45 1
require '../rubicon'
d47 22
a68 1
class TestBasicExpressions < Rubicon::TestCase
@

