head	1.3;
access;
symbols
	V0_3_2:1.2
	V0_1_4:1.1
	V0_1_3:1.1
	V0_1_2:1.1
	V0_1_1:1.1
	V0_1:1.1;
locks; strict;
comment	@# @;


1.3
date	2001.12.27.15.13.52;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.06.15.47;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.30.21.14.10;	author dave;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Additional tests for #sub, and new tests for string literals. Both courtesy of
Matt Armstrong.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

# Tests of functions in the String class are mostly in ../builtins/TestString.rb

class TestStrings < Rubicon::TestCase

  def testCompileTimeStringConcatenation
    assert_equal("abcd", "ab" "cd")
    assert_equal("abcd", 'ab' "cd")
    assert_equal("abcd", 'ab' 'cd')
    assert_equal("abcd", "ab" 'cd')
    assert_equal("22aacd44", "#{22}aa" "cd#{44}")
    assert_equal("22aacd445566", "#{22}aa" "cd#{44}" "55" "#{66}")
  end

  # ------------------------------------------------------------

  def testInterpolationOfGlobal
    $foo = "abc"
    assert_equal("abc = abc", "#$foo = abc")
    assert_equal("abc = abc", "#{$foo} = abc")
    
    foo = "abc"
    assert_equal("abc = abc", "#{foo} = abc")
  end

  # ------------------------------------------------------------

  def testSingleQuoteStringLiterals
    assert_equal("abc\"def\#{abc}", 'abc"def#{abc}')
    assert_equal('abc"def#{abc}', %q/abc"def#{abc}/)
    assert_equal('abc"def#{abc}', %q{abc"def#{abc}})
    assert_equal('abc"def#{abc}', %q(abc"def#{abc}))
    assert_equal('abc"def#{abc}', %q
abc"def#{abc}
)
  end

  # ------------------------------------------------------------
  
  def testDoubleQuoteStringLiterals
    foo = "abc"
    assert_equal('"abc#{foo}"', "\"#{foo}\#{foo}\"")
    assert_equal('"abc#{foo}"', "\"#{foo}\#{foo}\"")
    assert_equal('/"abc/#{foo}"/', %/\/"#{foo}\/\#{foo}"\//)
    assert_equal('/"abc/#{foo}"/', %Q/\/"#{foo}\/\#{foo}"\//)
    assert_equal('/"abc/#{foo}"/', %Q{/"abc/\#{foo}"/})
    assert_equal("abc\ndef", %Q{abc
def})
  end

  # ------------------------------------------------------------

  def testHereDocuments
    assert_equal("abc\n", <<EOF)
abc
EOF

    foo = "abc"
    assert_equal("abc\n", <<EOF)
#{foo}
EOF
    assert_equal("abc\n", <<"EOF")
#{foo}
EOF
    assert_equal("\#{foo}\n", <<'EOF')
#{foo}
EOF

    assert_equal(<<EOF1, <<EOF2)
a
EOF1
a
EOF2
    
    assert_equal("foo\n", <<"")
foo

    # Test that <<-EOF does not strip leading whitespace
    assert_equal("    foo\n    bar\n", <<-EOF)
    foo
    bar
    EOF
  end

  # ------------------------------------------------------------

end

# Run these tests if invoked directly

Rubicon::handleTests(TestStrings) if $0 == __FILE__
@


1.2
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d30 23
d55 33
@


1.1
log
@Initial load of files
@
text
@d1 2
a2 11
#!/usr/bin/env ruby
# $Id$
#
# This file is part of Rubicon, a set of regression tests for the Ruby
# language and its built-in classes and modules.
#
# Initial development by Dave Thomas and Andy Hunt.
#
# Copyright (c) 2000 The Pragmatic Programmers, LLC (www.pragmaticprogrammer.com)
# Distributed according to the terms specified in the Ruby distribution README file.
#
d4 1
a4 1
require '../rubicon'
d7 25
@

