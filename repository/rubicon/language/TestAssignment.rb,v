head	1.4;
access;
symbols
	V0_3_2:1.3;
locks; strict;
comment	@# @;


1.4
date	2002.01.05.14.35.05;	author chad;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.25.05.25.28;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.10.07.05.22;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replaced $rubyVersion global with Version class methods.  Replaced references to the former with the latter.  Deprecated tests for #indexes and #indices where appropriate.  Removed some duplication in several tests in ArrayBase and HashBase.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestAssignment < Rubicon::TestCase

  def testBasicAssignment
    a = nil;      assert_nil(a)
    a = 1;        assert_equal(1, a)
    a = [];       assert_equal([], a)
    a = [1];      assert_equal([1], a)
    a = [nil];    assert_equal([nil], a)
    a = [[]];     assert_equal([[]], a)
    a = [*[]];    assert_equal([], a)
    a = [*[1]];   assert_equal([1], a)
    a = [*[1,2]]; assert_equal([1,2], a)

    a = *nil;      assert_nil(a)
    a = *1;        assert_equal(1, a)
    Version.less_than("1.7") do
      a = *[];       assert_equal([], a)
      a = *[1];      assert_equal([1], a)
      a = *[nil];    assert_equal([nil], a)
      a = *[[]];     assert_equal([[]], a)
      a = *[*[]];    assert_equal([], a)
      a = *[*[1]];   assert_equal([1], a)
      *a = nil;      assert_equal([nil], a)
    end
    Version.greater_or_equal("1.7") do
      a = *[];       assert_nil(a)
      a = *[1];      assert_equal(1, a)
      a = *[nil];    assert_nil(a)
      a = *[[]];     assert_equal([], a)
      a = *[*[]];    assert_nil(a)
      a = *[*[1]];   assert_equal(1, a)
      *a = nil;      assert_equal([], a)
    end
    a = *[*[1,2]]; assert_equal([1,2], a)

    *a = 1;        assert_equal([1], a)
    *a = [];       assert_equal([], a)
    *a = [1];      assert_equal([1], a)
    *a = [nil];    assert_equal([nil], a)
    *a = [[]];     assert_equal([[]], a)
    *a = [*[]];    assert_equal([], a)
    *a = [*[1]];   assert_equal([1], a)
    *a = [*[1,2]]; assert_equal([1,2], a)

    Version.less_than("1.7") do
      *a = *nil;      assert_equal([nil], a)
      *a = *[nil];    assert_equal([nil], a)
      *a = *[[]];     assert_equal([[]], a)
    end
    Version.greater_or_equal("1.7") do
      *a = *nil;      assert_equal([], a)
      *a = *[nil];    assert_equal([], a)
      *a = *[[]];     assert_equal([], a)
    end
    *a = *1;        assert_equal([1], a)
    *a = *[];       assert_equal([], a)
    *a = *[1];      assert_equal([1], a)
    *a = *[*[]];    assert_equal([], a)
    *a = *[*[1]];   assert_equal([1], a)
    *a = *[*[1,2]]; assert_equal([1,2], a)

    a,b,*c = nil;       assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = 1;         assert_equal([1, nil, []], [a,b,c])
    a,b,*c = [];        assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = [1];       assert_equal([1, nil, []], [a,b,c])
    a,b,*c = [nil];     assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = [[]];      assert_equal([[], nil, []], [a,b,c])
    a,b,*c = [*[]];     assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = [*[1]];    assert_equal([1, nil, []], [a,b,c])
    a,b,*c = [*[1,2]];  assert_equal([1, 2, []], [a,b,c])
    
    a,b,*c = *nil;      assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = *1;        assert_equal([1, nil, []], [a,b,c])
    a,b,*c = *[];       assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = *[1];      assert_equal([1, nil, []], [a,b,c])
    a,b,*c = *[nil];    assert_equal([nil, nil, []], [a,b,c])

    Version.less_than("1.7") do
      a,b,*c = *[[]];     assert_equal([[], nil, []], [a,b,c])
    end
    Version.greater_or_equal("1.7") do
      a,b,*c = *[[]];     assert_equal([nil, nil, []], [a,b,c])
    end

    a,b,*c = *[*[]];    assert_equal([nil, nil, []], [a,b,c])
    a,b,*c = *[*[1]];   assert_equal([1, nil, []], [a,b,c])
    a,b,*c = *[*[1,2]]; assert_equal([1, 2, []], [a,b,c])
  end

  def testExpansionWithNoConversion
    *x = (1..7).to_a
    assert_equal(7, x.size)
    assert_equal([1, 2, 3, 4, 5, 6, 7], x)

    assert_equal(7, x.size)
    assert_equal([1, 2, 3, 4, 5, 6, 7], x)
  end

  def testMultipleAssignment
    a, b = 1, 2
    assert_equal(1, a)
    assert_equal(2, b)
    
    a, b = b, a
    assert_equal(2, a)
    assert_equal(1, b)
    
    a, = 1,2
    assert_equal(1, a)
    
    a, *b = 1, 2, 3
    assert_equal(1, a)
    assert_equal([2, 3], b)
    
    a, (b, c), d = 1, [2, 3], 4
    assert_equal(1, a)
    assert_equal(2, b)
    assert_equal(3, c)
    assert_equal(4, d)
    
    *a = 1, 2, 3
    assert_equal([1, 2, 3], a)
    
    *a = 4
    assert_equal([4], a)
    
    *a = nil
    Version.less_than("1.7") do
      assert_equal([nil], a)
    end
    Version.greater_or_equal("1.7") do
      assert_equal([], a)
    end
  end

  def testConditionalAssignment
    a=[]
    a[0] ||= "bar"
    assert_equal("bar", a[0])

    h={}
    h["foo"] ||= "bar"
    assert_equal("bar", h["foo"])
    
    aa = 5
    aa ||= 25
    assert_equal(5, aa)

    bb ||= 25
    assert_equal(25, bb)

    cc &&=33
    assert_nil(cc)

    cc = 5
    cc &&=44
    assert_equal(44, cc)
  end

end

# Run these tests if invoked directly

Rubicon::handleTests(TestAssignment) if $0 == __FILE__

@


1.3
log
@Added many patches from Nobu Nakad for 1.7 features (plus some bug fixes)
@
text
@d19 1
a19 1
    if $rubyVersion < "1.7"
d27 2
a28 1
    else
d48 1
a48 1
    if $rubyVersion < "1.7"
d52 2
a53 1
    else
d81 1
a81 1
    if $rubyVersion < "1.7"
d83 2
a84 1
    else
d131 1
a131 1
    if $rubyVersion < "1.7"
d133 2
a134 1
    else
@


1.2
log
@Add in the Ruby 1.7 tests
@
text
@d19 17
a35 6
    a = *[];       assert_nil(a)
    a = *[1];      assert_equal(1, a)
    a = *[nil];    assert_nil(a)
    a = *[[]];     assert_equal([], a)
    a = *[*[]];    assert_nil(a)
    a = *[*[1]];   assert_equal(1, a)
a37 1
    *a = nil;      assert_equal([], a)
d47 9
a55 1
    *a = *nil;      assert_equal([], a)
a58 2
    *a = *[nil];    assert_equal([], a)
    *a = *[[]];     assert_equal([], a)
d78 7
a84 1
    a,b,*c = *[[]];     assert_equal([nil, nil, []], [a,b,c])
d128 5
a132 1
    assert_equal([], a)
@


1.1
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d6 62
d106 1
a106 1
    assert_equal([nil], a)
@

