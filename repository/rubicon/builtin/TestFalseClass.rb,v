head	1.5;
access;
symbols
	V0_3_2:1.4
	V0_1_4:1.3
	V0_1_3:1.3
	V0_1_2:1.3
	V0_1_1:1.3
	V0_1:1.3
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.06.17.14.24;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.06.16.44.20;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestFalseClass < Rubicon::TestCase

  def test_00_sanity
    assert_equal(false, FALSE)
  end

  def test_AND # '&'
    truth_table(false.method("&"), false, false)
  end

  def test_OR # '|'
    truth_table(false.method("|"), false, true)
  end

  def test_XOR # '^'
    truth_table(false.method("^"), false, true)
  end

  def test_to_s
    assert_equal("false", false.to_s)
    assert_equal("false", FALSE.to_s)
  end

  def test_type
    assert_equal(FalseClass, false.class)
    assert_equal(FalseClass, FALSE.class)
  end

end

Rubicon::handleTests(TestFalseClass) if $0 == __FILE__
@


1.4
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d29 2
a30 2
    assert_equal(FalseClass, false.type)
    assert_equal(FalseClass, FALSE.type)
@


1.3
log
@Archive
@
text
@d1 2
a2 1
require '../rubicon'
@


1.2
log
@And another one bites (the dust)
@
text
@a9 6
  def truth_table(method, *result)
    for a in [ false, true ]
        assert_equal(method.call(a), result.shift)
    end
  end

@


1.1
log
@Initial revision
@
text
@d6 10
d17 1
a17 1
    assert_fail("untested")
d21 1
a21 1
    assert_fail("untested")
d25 1
a25 1
    assert_fail("untested")
d29 2
a30 1
    assert_fail("untested")
d34 2
a35 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
