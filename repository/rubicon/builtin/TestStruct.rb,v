head	1.9;
access;
symbols
	V0_3_2:1.8
	V0_1_4:1.4
	V0_1_3:1.4
	V0_1_2:1.4
	V0_1_1:1.4
	V0_1:1.4
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.25.03.21.22;	author dave;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.11.12.39.32;	author dave;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.14.02.40.12;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.15.13.57.20;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.15.01.35.52;	author andy;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.12.20.38.42;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.9
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestStruct < Rubicon::TestCase

  def setup
    if !defined? Struct::TestStruct
      @@@@myclass = Struct.new("TestStruct", :alpha, :bravo)
    end
  end

  def test_00s_new
    assert_equal(Struct::TestStruct, @@@@myclass)
    t1 = @@@@myclass.new
    t1.alpha = 1
    t1.bravo = 2
    assert_equals(1,t1.alpha)
    assert_equals(2,t1.bravo)
    t2 = Struct::TestStruct.new
    assert_equals(t1.class, t2.class)
    t2.alpha = 3
    t2.bravo = 4
    assert_equals(3,t2.alpha)
    assert_equals(4,t2.bravo)
    assert_exception(ArgumentError) { Struct::TestStruct.new(1,2,3) }

    t3 = @@@@myclass.new(5,6)
    assert_equals(5,t3.alpha)
    assert_equals(6,t3.bravo)
  end

  def test_AREF # '[]'
    t = Struct::TestStruct.new
    t.alpha = 64
    t.bravo = 112
    assert_equals(64,  t["alpha"])
    assert_equals(64,  t[0])
    assert_equals(112, t[1])
    assert_equals(112, t[-1])
    assert_equals(t["alpha"], t[:alpha])
  
    assert_exception(NameError)  { p t["gamma"] }
    assert_exception(IndexError) { p t[2] }
  end

  def test_ASET # '[]='
    t = Struct::TestStruct.new
    t.alpha = 64
    assert_equals(64,t["alpha"])
    assert_equals(t["alpha"],t[:alpha])
    assert_exception(NameError) { t["gamma"]=1 }
    assert_exception(IndexError) { t[2]=1 }
  end

  def test_EQUAL # '=='
    t1 = Struct::TestStruct.new
    t1.alpha = 64
    t1.bravo = 42
    t2 = Struct::TestStruct.new
    t2.alpha = 64
    t2.bravo = 42
    assert_equals(t1,t2)
  end

  def test_clone
    for taint in [ false, true ]
      for frozen in [ false, true ]
        a = Struct::TestStruct.new
        a.alpha = 112
        a.taint  if taint
        a.freeze if frozen
        b = a.clone

        assert_equal(a, b)
        assert(a.id != b.id)
        assert_equal(a.frozen?,  b.frozen?)
        assert_equal(a.tainted?, b.tainted?)
        assert_equal(a.alpha,    b.alpha)
      end
    end
  end

  def test_each
    a=[]
    Struct::TestStruct.new('a', 'b').each {|x|
      a << x
    }
    assert_equal(['a','b'], a)
  end

  def test_length
    t = Struct::TestStruct.new
    assert_equal(2,t.length)
  end

  def test_members
    assert_equal(Struct::TestStruct.members, [ "alpha", "bravo" ])
  end

  def test_size
    t = Struct::TestStruct.new
    assert_equal(2, t.length)
  end

  def test_to_a
    t = Struct::TestStruct.new('a','b')
    assert_equal(['a','b'], t.to_a)
  end

  def test_values
    t = Struct::TestStruct.new('a','b')
    assert_equal(['a','b'], t.values)
  end


end

Rubicon::handleTests(TestStruct) if $0 == __FILE__
@


1.8
log
@iTestStruct relied on the ordering of tests
@
text
@d20 1
a20 1
    assert_equals(t1.type, t2.type)
@


1.7
log
@* Fixed a couple of warnings resulting from running tests in one pass.

* Makefile: changed default target to run library and builtins tests in a
  single pass, so we now get just one summary table
@
text
@d5 7
d13 2
a14 3
    myclass = Struct.new("TestStruct", :alpha, :bravo)
    assert_equal(Struct::TestStruct, myclass)
    t1 = myclass.new
d27 1
a27 1
    t3 = myclass.new(5,6)
@


1.6
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d7 1
d30 5
a34 5
    assert_equals(64,t["alpha"])
    assert_equals(64,t[0])
    assert_equals(112,t[1])
    assert_equals(112,t[-1])
    assert_equals(t["alpha"],t[:alpha])
d36 1
a36 1
    assert_exception(NameError) { p t["gamma"] }
d70 1
a70 1
        assert_equal(a.frozen?, b.frozen?)
d72 1
a72 1
        assert_equal(a.alpha, b.alpha)
d79 1
a79 1
    Struct::TestStruct.new('a','b').each {|x|
d82 1
a82 1
    assert_equal(['a','b'],a)
d96 1
a96 1
    assert_equal(2,t.length)
d101 1
a101 1
    assert_equal(['a','b'],t.to_a)
d106 1
a106 1
    assert_equal(['a','b'],t.values)
@


1.5
log
@Many contributions from members of the ml
@
text
@d1 2
a2 1
require '../rubicon'
@


1.4
log
@Trap bad exception handling
@
text
@d62 1
a63 1
        a.taint  if taint
@


1.3
log
@Added warning
@
text
@d33 2
a34 2
    $stderr.puts "Can't catch nameError with this RubyUnit"
    #assert_exception(NameError) { p t["gamma"] }
d43 1
a43 2
    $stderr.puts "Can't catch nameError with this RubyUnit"
    #assert_exception(NameError) { t["gamma"]=1 }
@


1.2
log
@Odds and Sods.
@
text
@d33 1
d43 1
@


1.1
log
@Initial revision
@
text
@a2 1

d4 19
d25 10
a34 1
    assert_fail("untested")
d38 6
a43 1
    assert_fail("untested")
d47 7
a53 1
    assert_fail("untested")
d57 15
a71 1
    assert_fail("untested")
d75 5
a79 5
    assert_fail("untested")
  end

  def test_inspect
    assert_fail("untested")
d83 2
a84 1
    assert_fail("untested")
d88 1
a88 1
    assert_fail("untested")
d92 2
a93 1
    assert_fail("untested")
d97 2
a98 5
    assert_fail("untested")
  end

  def test_to_s
    assert_fail("untested")
d102 2
a103 1
    assert_fail("untested")
a105 3
  def test_s_new
    assert_fail("untested")
  end
@


1.1.1.1
log
@Initial Import
@
text
@@
