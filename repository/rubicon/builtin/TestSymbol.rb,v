head	1.9;
access;
symbols
	V0_3_2:1.7
	V0_1_4:1.5
	V0_1_3:1.5
	V0_1_2:1.5
	V0_1_1:1.5
	V0_1:1.5
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.10.03.30.41;	author dave;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.25.03.40.40;	author dave;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.12.20.38.42;	author andy;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.09.04.13.58;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.09.02.28.56;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.08.21.24.01;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.9
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestSymbol < Rubicon::TestCase

# v---------- test --------------v
  class Fred
    $f1 = :Fred
    def Fred
      $f3 = :Fred
    end
  end
  
  module Test
    Fred = 1
    $f2 = :Fred
  end
  
# ^----------- test ------------^

  Fred.new.Fred

  def test_00sanity
    assert_equals($f1.id,$f2.id)
    assert_equals($f2.id,$f3.id)
  end

  def test_id2name
    assert_equals("Fred",:Fred.id2name)
    assert_equals("Barney",:Barney.id2name)
    assert_equals("wilma",:wilma.id2name)
  end

  def test_to_i
    assert_equals($f1.to_i,$f2.to_i)
    assert_equals($f2.to_i,$f3.to_i)
    assert(:wilma.to_i != :Fred.to_i)
    assert(:Barney.to_i != :wilma.to_i)
  end

  def test_to_s
    assert_equals("Fred",:Fred.id2name)
    assert_equals("Barney",:Barney.id2name)
    assert_equals("wilma",:wilma.id2name)
  end

  def test_type
    assert_equals(Symbol, :Fred.class)
    assert_equals(Symbol, :fubar.class)
  end

  def test_taint
    assert_same(:Fred, :Fred.taint)
    assert(! :Fred.tainted?)
  end

  def test_freeze
    assert_same(:Fred, :Fred.freeze)
    assert(! :Fred.frozen?)
  end

  def test_dup
    assert_exception(TypeError) { :Fred.clone }
    assert_exception(TypeError) { :Fred.dup }
  end
end

Rubicon::handleTests(TestSymbol) if $0 == __FILE__
@


1.8
log
@Add tests for tainting, freezing, dup and clone. Written by Anders Bengtsson
<ndrsbngtssn@@yahoo.se>
@
text
@d49 2
a50 2
    assert_equals(Symbol, :Fred.type)
    assert_equals(Symbol, :fubar.type)
@


1.7
log
@iRemove order dependency in Symbol
@
text
@d53 14
@


1.6
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d22 2
a24 1
    Fred.new.Fred
@


1.5
log
@Odds and Sods.
@
text
@d1 2
a2 1
require '../rubicon'
@


1.4
log
@Move test stuff inside class
@
text
@a3 1

a32 4
  def test_inspect
    assert_fail("untested")
  end

d34 4
a37 1
    assert_fail("untested")
d41 3
a43 1
    assert_fail("untested")
d47 2
a48 1
    assert_fail("untested")
@


1.3
log
@Fix prioriy test
@
text
@a2 3
class Fred
  $f1 = :Fred
end
a3 8
module Test
  Fred = 1
  $f2 = :Fred
end

def Fred
$f3 = :Fred
end
d5 1
d7 14
a20 1
class TestSymbol < Rubicon::TestCase
d23 1
@


1.2
log
@Added join all
@
text
@d13 1
a15 1
$f3 = :Fred
@


1.1
log
@Initial revision
@
text
@d3 13
d19 5
d25 3
a27 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
