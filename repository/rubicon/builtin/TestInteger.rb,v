head	1.3;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.2
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.09.20.34.55;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.3
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestInteger < Rubicon::TestCase

  def test_chr
    a = " " * 256
    0.upto(255) { |i| a[i] = i }

    0.upto(255) { |i| assert_equal(a[i,1], i.chr) }
  end

  def test_downto
    count = 0
    0.downto(1) { count += 1 }
    assert_equal(0, count)

    count = 0
    0.downto(0) { count += 1 }
    assert_equal(1, count)

    count = 0
    9.downto(0) { |i| count += i }
    assert_equal(45, count)

    count = 0
    0.downto(-9) { |i| count += i }
    assert_equal(-45, count)
  end

  def test_integer?
    assert(1.integer?)
    assert((10**50).integer?)
    assert(!1.0.integer?)
  end

  def test_next
    for i in -10..10 do assert_equal(i+1, i.next) end
    for i in [-(10**40), -(2**38), 10**40, 2**38 ]
      assert_equal(i+1, i.next) 
    end
  end

  def test_step
    vals = [1, 4, 7, 10 ]
    1.step(10, 3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [1, 4, 7, 10 ]
    1.step(12, 3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [10, 7, 4, 1 ]
    10.step(1, -3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [10, 7, 4, 1 ]
    10.step(-1, -3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [ 1 ]
    1.step(1, 3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [ 1 ]
    1.step(1, -3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)

    vals = [  ]
    1.step(0, 3) { |i| assert_equal(i, vals.shift) }
    assert_equal(0, vals.length)
  end

  def test_succ
    for i in -10..10 do assert_equal(i+1, i.succ) end
    for i in [-(10**40), -(2**38), 10**40, 2**38 ]
      assert_equal(i+1, i.succ) 
    end
  end

  def test_times
    count = 0
    (-1).times { count += 1 }
    assert_equal(0, count)

    count = 0
    0.times { count += 1 }
    assert_equal(0, count)

    count = 0
    10.times { |i| count += i }
    assert_equal(45, count)
  end

  def test_upto
    count = 0
    0.upto(-1)   { count += 1 }
    assert_equal(0, count)

    count = 0
    0.upto(0)    { count += 1 }
    assert_equal(1, count)

    count = 0
    0.upto(9)    { |i| count += i }
    assert_equal(45, count)

    count = 0
    (-9).upto(0) { |i| count += i }
    assert_equal(-45, count)
  end

  def test_s_induced_from
    assert_equal(1, Integer.induced_from(1))
    assert_equal(1, Integer.induced_from(1.0))
  end

end

Rubicon::handleTests(TestInteger) if $0 == __FILE__
@


1.2
log
@Finish integer
@
text
@d1 2
a2 1
require '../rubicon'
@


1.1
log
@Initial revision
@
text
@d7 4
a10 1
    assert_fail("untested")
d14 15
a28 1
    assert_fail("untested")
d32 3
a34 1
    assert_fail("untested")
d38 4
a41 1
    assert_fail("untested")
d45 27
a71 1
    assert_fail("untested")
d75 4
a78 1
    assert_fail("untested")
d82 11
a92 1
    assert_fail("untested")
d96 15
a110 1
    assert_fail("untested")
d114 2
a115 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
