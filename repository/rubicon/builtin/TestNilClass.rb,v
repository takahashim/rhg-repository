head	1.3;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.2
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.21.22.12;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.3
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestNilClass < Rubicon::TestCase

  def test_AND # '&'
    truth_table(nil.method("&"), false, false)
  end

  def sideEffect
    $global = 1
  end

  def test_OR # '|'
    truth_table(nil.method("|"), false, true)
    $global = 0
    assert_equal(true,  nil | sideEffect)
    assert_equal(1, $global)
  end

  def test_XOR # '^'
    truth_table(nil.method("^"), false, true)
    $global = 0
    assert_equal(true,  nil ^ sideEffect)
    assert_equal(1, $global)
  end

  def test_nil?
    assert(nil.nil?)
  end

  def test_to_a
    assert_equal([], nil.to_a)
  end

  def test_to_i
    assert_equal(0, nil.to_i)
  end

  def test_to_s
    assert_equal("", nil.to_s)
  end
end

Rubicon::handleTests(TestNilClass) if $0 == __FILE__
@


1.2
log
@'nother one bites the dust
@
text
@d1 2
a2 1
require '../rubicon'
@


1.1
log
@Initial revision
@
text
@d7 5
a11 1
    assert_fail("untested")
d15 4
a18 1
    assert_fail("untested")
d22 4
a25 5
    assert_fail("untested")
  end

  def test_inspect
    assert_fail("untested")
d29 1
a29 1
    assert_fail("untested")
d33 1
a33 1
    assert_fail("untested")
d37 1
a37 1
    assert_fail("untested")
d41 1
a41 1
    assert_fail("untested")
a42 5

  def test_type
    assert_fail("untested")
  end

@


1.1.1.1
log
@Initial Import
@
text
@@
