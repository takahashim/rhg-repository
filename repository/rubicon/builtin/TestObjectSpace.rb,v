head	1.6;
access;
symbols
	V0_3_2:1.6
	V0_1_4:1.3
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2;
locks; strict;
comment	@# @;


1.6
date	2001.11.04.15.19.05;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.03.04.15.17;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.16.19.05.23;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.01.03.12.40;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.19.31.57;	author dave;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Continue makig the tests Windows-agnostic. Include patch from Masaki
Suketa which fixes some bad tests (assert(...) being used in place
of assert_equals(...))
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestObjectSpace < Rubicon::TestCase

  def test_s__id2ref
    s = "hello"
    t = ObjectSpace._id2ref(s.id)
    assert_equal(s, t)
    assert_equal(s.id, t.id)
  end


  # finalizer manipulation
  def test_s_finalizers
    tf = Tempfile.new("tf")
    begin
      tf.puts %{
	a = "string"
	ObjectSpace.define_finalizer(a) { puts "OK" }
      }
      tf.close
      IO.popen("#$interpreter #{tf.path}") do |p|
	assert_equal("OK", p.gets.chomp)
      end
    ensure
      tf.close(true)
    end
  end

  class A;      end
  class B < A;  end
  class C < A;  end
  class D < C;  end

  def test_s_each_object
    a = A.new
    b = B.new
    c = C.new
    d = D.new

    res = []
    ObjectSpace.each_object(TestObjectSpace::A) { |o| res << o }
    assert_set_equal([a, b, c, d], res)

    res = []
    ObjectSpace.each_object(B) { |o| res << o }
    assert_set_equal([b], res)

    res = []
    ObjectSpace.each_object(C) { |o| res << o }
    assert_set_equal([c, d], res)
  end

  def test_s_garbage_collect
    skipping("how to test")
  end

#  Tested in finalizers
#  def test_s_finalizers
#    assert_fail("untested")
#  end

# Tested in finalizers
#  def test_s_remove_finalizer
#    assert_fail("untested")
#  end

end

Rubicon::handleTests(TestObjectSpace) if $0 == __FILE__
@


1.5
log
@Win32 changes to Kernel, etc... Thread is incomplete: we'll do something of
a rewrite under Linux.
@
text
@a6 2
  WORKED = "It Worked!\n"

d21 2
a22 4
	ObjectSpace.define_finalizer(a) { puts(WORKED) }
	a = "another string"
	GC.start
	exit}
d24 2
a25 5
      p = IO.popen("#$interpreter #{tf.path}")
      begin
	assert_equal(WORKED, p.gets)
      ensure
	p.close
@


1.4
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@a15 5
  class CollectMe
    def initialize(f)
      ObjectSpace.define_finalizer(self) { f.puts(WORKED) }
    end
  end
d19 1
a19 5
    pipe = File.pipe
    Process.fork {
      CollectMe.new(pipe[1])
      exit
    }
d21 15
a35 2
      Process.wait
    rescue Exception
a36 1
    assert_equal(WORKED, pipe[0].gets)
@


1.3
log
@Fix bugs based on Matz's comments
@
text
@d1 2
a2 1
require '../rubicon'
@


1.2
log
@Track the language
@
text
@d6 2
d15 6
d23 10
a32 1
    skipping("How to test")
@


1.1
log
@Archive save
@
text
@d15 1
a15 35
    p1 = proc {|o| 1; }
    p2 = proc {|o| 2; }
    assert_set_equal([], ObjectSpace.finalizers)
    ObjectSpace.add_finalizer(p1)
    assert_set_equal([p1], ObjectSpace.finalizers)
    ObjectSpace.add_finalizer(p2)
    assert_set_equal([p1, p2], ObjectSpace.finalizers)
    ObjectSpace.remove_finalizer(p2)
    assert_set_equal([p1], ObjectSpace.finalizers)
    ObjectSpace.remove_finalizer(p1)
    assert_set_equal([], ObjectSpace.finalizers)
  end

  def test_s_call_finalizer
    IO.popen("-") do |pipe|
      if !pipe
        ObjectSpace.add_finalizer(proc {|id| puts "f: #{id}" })
        a = "a"
        b = "b"
        c = "c"
        puts a.id
        puts c.id
        ObjectSpace.call_finalizer(a)
        ObjectSpace.call_finalizer(c)
        exit
      end
      expected = []
      2.times do
        id = pipe.gets
        expected << "f: #{id}"
      end

      result = pipe.readlines
      assert_set_equal(expected, result)
    end
@

