head	1.4;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.2
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.05.30.06.10.56;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.20.42.15;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* builtin/TestRange.rb (TestRange::test_length): 1.7 no longer
  provides Range#length.

* builtin/TestRange.rb (TestRange::test_size): check should be
  done for "size", not "length".
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestRange < Rubicon::TestCase

  def test_VERY_EQUAL # '==='
    gotit = false
    case 52
      when 0..49
        assert_fail("Shouldn't have matched")
      when 50..75
        gotit = true
      else
        assert_fail("Shouldn't have matched")
    end
    assert_equal(true,gotit)

    gotit = false
    case 50
      when 0..49
        assert_fail("Shouldn't have matched")
      when 50..75
        gotit = true
      else
        assert_fail("Shouldn't have matched")
    end
    assert_equal(true,gotit)

    gotit = false
    case 75
      when 0..49
        assert_fail("Shouldn't have matched")
      when 50..75
        gotit = true
      else
        assert_fail("Shouldn't have matched")
    end
    assert_equal(true,gotit)
  end

  def test_begin
    assert_equal(1, (1..10).begin)
    assert_equal("a", ("a".."z").begin)
    assert_equal(1, (1...10).begin)
    assert_equal("a", ("a"..."z").begin)
  end

  def test_each
    index = 1
    count = 0
    (1..10).each {|x| assert_equal(index, x)
      index += 1
      count += 1 }
    assert_equal(10,count)

    index = "A"
    count = 0
    ("A".."J").each {|x| assert_equal(index, x)
      index.succ!
      count += 1 }
    assert_equal(10,count)

  end

  def test_end
    assert_equal(10, (1..10).end)
    assert_equal(11, (1...11).end)
    assert_equal("z", ("a".."z").end)
    assert_equal("A", ("a"..."A").end)
  end

  def test_exclude_end?
    assert_equal(true, (1...10).exclude_end?)
    assert_equal(false,(1..10).exclude_end?)
    assert_equal(true, ("A"..."Z").exclude_end?)
    assert_equal(false,("A".."Z").exclude_end?)
  end

  def test_first
    assert_equal(1, (1..10).first)
    assert_equal("a", ("a".."z").first)
    assert_equal(1, (1...10).first)
    assert_equal("a", ("a"..."z").first)
  end

  def test_last
    assert_equal(10, (1..10).last)
    assert_equal(11, (1...11).last)
    assert_equal("z", ("a".."z").last)
    assert_equal("A", ("a"..."A").last)
  end

  def test_length
    Version.less_than("1.7") do
      assert_equal(10, (1..10).length)
      assert_equal(10, (1...11).length)
      assert_equal(1000, (1..1000).length)
      assert_equal(26, ("A".."Z").length)
    end
  end

  def test_size
    Version.less_than("1.7") do
      assert_equal(10, (1..10).size)
      assert_equal(10, (1...11).size)
      assert_equal(1000, (1..1000).size)
      assert_equal(26, ("A".."Z").size)
    end
  end

  def test_to_s
    assert_equal("1..10",(1..10).to_s)
  end

end

Rubicon::handleTests(TestRange) if $0 == __FILE__
@


1.3
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d95 6
a100 4
    assert_equal(10, (1..10).length)
    assert_equal(10, (1...11).length)
    assert_equal(1000, (1..1000).length)
    assert_equal(26, ("A".."Z").length)
d104 6
a109 4
    assert_equal(10, (1..10).length)
    assert_equal(10, (1...11).length)
    assert_equal(1000, (1..1000).length)
    assert_equal(26, ("A".."Z").length)
@


1.2
log
@done.
@
text
@d1 2
a2 1
require '../rubicon'
@


1.1
log
@Initial revision
@
text
@d7 32
a38 1
    assert_fail("untested")
d42 4
a45 1
    assert_fail("untested")
d49 14
a62 1
    assert_fail("untested")
d66 4
a69 1
    assert_fail("untested")
d73 4
a76 1
    assert_fail("untested")
d80 4
a83 5
    assert_fail("untested")
  end

  def test_inspect
    assert_fail("untested")
d87 4
a90 1
    assert_fail("untested")
d94 4
a97 1
    assert_fail("untested")
d101 4
a104 1
    assert_fail("untested")
d108 1
a108 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
