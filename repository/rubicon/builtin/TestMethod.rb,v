head	1.4;
access;
symbols
	V0_3_2:1.4
	V0_1_4:1.3
	V0_1_3:1.3
	V0_1_2:1.3
	V0_1_1:1.3
	V0_1:1.3
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.21.16.08;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.03.20.42;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestMethod < Rubicon::TestCase

  def setup
    @@m1 = 12.method("+")
  end

  def test_AREF # '[]'
    assert_equal(15, @@m1[3])
    assert_equal(9,  @@m1[-3])
  end

  def dummy1(a, b=0, c=1)
  end

  def test_arity
    assert_equal(1, @@m1.arity)
    assert_equal(0, self.method("test_arity").arity)
    assert_equal(-2, self.method("dummy1").arity)
    assert_equal(-1, @@m1.method("call").arity)
    assert_equal(-1, @@m1.method("respond_to?").arity)
  end

  def test_call
    assert_equal(15, @@m1.call(3))
    assert_equal(9,  @@m1.call(-3))
  end

  def test_to_proc
    p = @@m1.to_proc
    assert_instance_of(Proc, p)
    assert_equal(15, p.call(3))
  end

end

Rubicon::handleTests(TestMethod) if $0 == __FILE__
@


1.3
log
@Archive save
@
text
@d1 2
a2 1
require '../rubicon'
@


1.2
log
@Added Method
@
text
@d33 1
a33 1
    assert_instance_of(p, Proc)
@


1.1
log
@Initial revision
@
text
@d6 2
a7 2
  def test_AREF # '[]'
    assert_fail("untested")
d10 3
a12 2
  def test_arity
    assert_fail("untested")
d15 1
a15 2
  def test_call
    assert_fail("untested")
d18 6
a23 2
  def test_clone
    assert_fail("untested")
d26 3
a28 2
  def test_inspect
    assert_fail("untested")
d32 3
a34 5
    assert_fail("untested")
  end

  def test_to_s
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
