head	1.7;
access;
symbols
	V0_3_2:1.6
	V0_1_4:1.3
	V0_1_3:1.3
	V0_1_2:1.3
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2002.01.05.14.35.05;	author chad;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.04.04.43.55;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.14.16.38.20;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.20.18.04.44;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.20.46.48;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Replaced $rubyVersion global with Version class methods.  Replaced references to the former with the latter.  Deprecated tests for #indexes and #indices where appropriate.  Removed some duplication in several tests in ArrayBase and HashBase.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestProc < Rubicon::TestCase

  def procFrom
    Proc.new
  end

  def test_AREF # '[]'
    a = Proc.new { |x| "hello #{x}" }
    assert_equal("hello there", a["there"])
  end

  def test_arity
    tests = [
      [Proc.new {          }, -1],
      [Proc.new { |x,y|    },  2],
      [Proc.new { |x,y,z|  },  3],
      [Proc.new { |*z|     }, -1],
      [Proc.new { |x,*z|   }, -2],
      [Proc.new { |x,y,*z| }, -3],
    ]

    Version.less_or_equal("1.6.1") do
      tests << 
        [Proc.new { ||       },  -1] <<
        [Proc.new { |x|      },  -2]
    end
    Version.greater_than("1.6.1") do
      tests <<
        [Proc.new { ||       },  0] <<
        [Proc.new { |x|      }, -1]
    end

    tests.each do |proc, expected_arity|
      assert_equal(expected_arity, proc.arity)
    end
  end

  def test_call
    a = Proc.new { |x| "hello #{x}" }
    assert_equal("hello there", a.call("there"))
  end

  def test_s_new
    a = procFrom { "hello" }
    assert_equal("hello", a.call)
    a = Proc.new { "there" }
    assert_equal("there", a.call)
  end

end

Rubicon::handleTests(TestProc) if $0 == __FILE__
@


1.6
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d26 1
a26 1
    if $rubyVersion <= "1.6.1"
d30 2
a31 1
    else
@


1.5
log
@Add more confitional tests to handle logic changes between Ruby versions
@
text
@d1 2
a2 1
require '../rubicon'
@


1.4
log
@Matz ruled: proc.arity{} = -1, proc.arity{||} = 0
@
text
@d16 2
a17 3
    [ [Proc.new {          }, -1],
      [Proc.new { ||       },  0],
      [Proc.new { |x|      }, -1],
d23 13
a35 1
    ].each do |proc, expected_arity|
@


1.3
log
@Make Aleksi's changes
@
text
@d17 1
a17 1
      [Proc.new { ||       }, -1],
@


1.2
log
@DOne
@
text
@d16 11
a26 12
    a = Proc.new { "hello" }
    assert_equal(-1, a.arity)
    a = Proc.new { |x| "hello #{x}" }
    assert_equal(-2, a.arity)
    a = Proc.new { |x,y| "hello #{x}" }
    assert_equal(2, a.arity)
    a = Proc.new { |x,y,z| "hello #{x}" }
    assert_equal(3, a.arity)
    a = Proc.new { |x,*z| "hello #{x}" }
    assert_equal(-2, a.arity)
    a = Proc.new { |*x| "hello #{x}" }
    assert_equal(-1, a.arity)
@


1.1
log
@Initial revision
@
text
@d6 4
d11 2
a12 1
    assert_fail("untested")
d16 12
a27 1
    assert_fail("untested")
d31 2
a32 1
    assert_fail("untested")
d36 4
a39 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
