head	1.36;
access;
symbols
	V0_3_2:1.25
	V0_1_4:1.15
	V0_1_3:1.15
	V0_1_2:1.14
	V0_1_1:1.13
	V0_1:1.12
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.36
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.35;

1.35
date	2002.06.28.14.31.38;	author matz;	state Exp;
branches;
next	1.34;

1.34
date	2002.01.28.19.09.33;	author nobu;	state Exp;
branches;
next	1.33;

1.33
date	2002.01.05.14.35.05;	author chad;	state Exp;
branches;
next	1.32;

1.32
date	2001.11.27.23.54.09;	author chad;	state Exp;
branches;
next	1.31;

1.31
date	2001.11.27.02.20.07;	author dave;	state Exp;
branches;
next	1.30;

1.30
date	2001.11.26.04.09.52;	author dave;	state Exp;
branches;
next	1.29;

1.29
date	2001.11.16.17.44.21;	author dave;	state Exp;
branches;
next	1.28;

1.28
date	2001.11.16.17.36.31;	author dave;	state Exp;
branches;
next	1.27;

1.27
date	2001.11.15.17.42.02;	author dave;	state Exp;
branches;
next	1.26;

1.26
date	2001.11.15.03.54.59;	author dave;	state Exp;
branches;
next	1.25;

1.25
date	2001.11.13.03.49.01;	author dave;	state Exp;
branches;
next	1.24;

1.24
date	2001.11.11.21.33.48;	author dave;	state Exp;
branches;
next	1.23;

1.23
date	2001.11.10.04.45.27;	author dave;	state Exp;
branches;
next	1.22;

1.22
date	2001.11.04.15.19.05;	author dave;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.02.06.09.14;	author dave;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.25.05.25.28;	author dave;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.27.05.49.26;	author dave;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.25.14.20.11;	author dave;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.26.18.22.06;	author dave;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.20.18.04.44;	author dave;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.12.19.27.47;	author dave;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.20.02.34.03;	author andy;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.21.20.21.55;	author dave;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.14.21.16.08;	author dave;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.07.21.43.02;	author dave;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.07.21.25.34;	author dave;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.07.20.58.02;	author dave;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.06.22.25.54;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.06.21.43.16;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.06.21.04.24;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.06.19.22.00;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.06.17.14.24;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.36
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'
require 'stat'

MsWin32.dont do
  require 'socket'
end


class TestFile < Rubicon::TestCase

  def setup
    setupTestDir

    @@file = File.join("_test", "_touched")

    touch("-a -t 122512341999 #@@file")
    @@aTime = Time.local(1999, 12, 25, 12, 34, 00)

    touch("-m -t 010112341997 #@@file")
    @@mTime = Time.local(1997,  1,  1, 12, 34, 00)
  end

  def teardown
    File.delete @@file if File.exist?(@@file)
    teardownTestDir
  end

  Windows.dont do    # FAT file systems only store mtime
    def test_s_atime
      assert_equal(@@aTime, File.atime(@@file))
    end
  end

  def test_s_basename
    assert_equal("_touched", File.basename(@@file))
    assert_equal("tmp", File.basename(File.join("/tmp")))
    assert_equal("",    File.basename(File.join("/tmp/")))
    assert_equal("b",   File.basename(File.join(*%w( g f d s a b))))
    assert_equal("",    File.basename("/"))
   
    Version.greater_or_equal("1.7.2") do
      unless File::ALT_SEPARATOR.nil?
        assert_equal("base", File.basename("dir" + File::ALT_SEPARATOR + "base")) 
      end
    end
  end

  def test_s_chmod
    base = $os == Cygwin ? 0444 : 0
    assert_exception(Errno::ENOENT) { File.chmod(0, "_gumby") }
    assert_equal(0, File.chmod(0))
    Dir.chdir("_test")
    begin
      assert_equal(1,         File.chmod(0, "_file1"))
      assert_equal(2,         File.chmod(0, "_file1", "_file2"))
      assert_equal(base,      File.stat("_file1").mode & 0777)
      assert_equal(1,         File.chmod(0400, "_file1"))
      assert_equal(base|0400, File.stat("_file1").mode & 0777)
      assert_equal(1,         File.chmod(0644, "_file1"))
      assert_equal(base|0644, File.stat("_file1").mode & 0777)
    ensure
      Dir.chdir("..")
    end
  end

  def test_s_chown
    super_user
  end

  def test_s_ctime
    sys("touch  #@@file")
    ctime = RubiconStat::ctime(@@file)
    @@cTime = Time.at(ctime)

    assert_equal(@@cTime, File.ctime(@@file))
  end

  def test_s_delete
    Dir.chdir("_test")
    assert_equal(0, File.delete)
    assert_exception(Errno::ENOENT) { File.delete("gumby") }
    assert_equal(2, File.delete("_file1", "_file2"))
  end

  def test_s_dirname
    assert_equal("/",         File.dirname(File.join("/tmp")))
    assert_equal("/tmp",      File.dirname(File.join("/tmp/")))
    assert_equal("g/f/d/s/a", File.dirname(File.join(*%w( g f d s a b))))
    assert_equal("/",         File.dirname("/"))

    Version.greater_or_equal("1.7.2") do
      unless File::ALT_SEPARATOR.nil? 
        assert_equal("dir", File.dirname("dir" + File::ALT_SEPARATOR + "base")) 
      end
    end
  end

  def test_s_expand_path
    if $os == MsWin32
      base = `cd`.chomp.tr '\\', '/'
    else
      base = `pwd`.chomp
    end

    assert_equal(base,                 File.expand_path(''))
    assert_equal(File.join(base, 'a'), File.expand_path('a'))
    assert_equal(File.join(base, 'a'), File.expand_path('a', nil)) # V0.1.1

    # Because of Ruby-Talk:18512
    assert_equal(File.join(base, 'a.'),    File.expand_path('a.')) 
    assert_equal(File.join(base, '.a'),    File.expand_path('.a')) 
    assert_equal(File.join(base, 'a..'),   File.expand_path('a..')) 
    assert_equal(File.join(base, '..a'),   File.expand_path('..a')) 
    assert_equal(File.join(base, 'a../b'), File.expand_path('a../b')) 

    b1 = File.join(base.split(File::SEPARATOR)[0..-2])
    assert_equal(b1, File.expand_path('..'))

    assert_equal('/tmp',   File.expand_path('', '/tmp'))
    assert_equal('/tmp/a', File.expand_path('a', '/tmp'))
    assert_equal('/tmp/a', File.expand_path('../a', '/tmp/xxx'))

    home = ENV['HOME']
    if (home)
      assert_equal(home, File.expand_path('~'))
      assert_equal(home, File.expand_path('~', '/tmp/gumby/ddd'))
      assert_equal(File.join(home, 'a'),
                         File.expand_path('~/a', '/tmp/gumby/ddd'))
    else
      skipping("$HOME not set")
    end

    begin
      File.open("/etc/passwd") do |pw|
	users = pw.readlines
	line = ''
	line = users.pop while users.nitems > 0 and (line.length == 0 || /^\+:/ =~ line)
	if line.length > 0 
	  line = line.split(':')
	  name, home = line[0], line[-2]
	  assert_equal(home, File.expand_path("~#{name}"))
	  assert_equal(home, File.expand_path("~#{name}", "/tmp/gumby"))
	  assert_equal(File.join(home, 'a'),
		       File.expand_path("~#{name}/a", "/tmp/gumby"))
	end
      end
    rescue Errno::ENOENT
      skipping("~user")
    end
  end

  def test_s_ftype
    Dir.chdir("_test")
    sock = nil

    MsWin32.dont do
      sock = UNIXServer.open("_sock")
      File.symlink("_file1", "_file3") # may fail
    end

    begin
      tests = {
        "../_test" => "directory",
        "_file1"   => "file",
      }

      Windows.dont do
	begin
	  tests[File.expand_path(File.readlink("/dev/tty"), "/dev")] =
	    "characterSpecial"
	rescue Errno::EINVAL
	  tests["/dev/tty"] = "characterSpecial"
	end
      end

      MsWin32.dont do
        tests["_file3"] = "link"
	tests["_sock"]  = "socket"
      end

      Linux.only do
        tests["/dev/"+`readlink /dev/fd0 || echo fd0`.chomp] = "blockSpecial"
	system("mkfifo _fifo") # may fail
	tests["_fifo"] = "fifo"
      end

      tests.each { |file, type|
        if File.exists?(file)
          assert_equal(type, File.ftype(file), file.dup)
        else
          skipping("#{type} not supported")
        end
      }
    ensure
      sock.close if sock 
    end
  end

  def test_s_join

    [
      %w( a b c d ),
      %w( a ),
      %w( ),
      %w( a b .. c )
    ].each do |a|
      assert_equal(a.join(File::SEPARATOR), File.join(*a))
    end
  end

  def test_s_link
    Dir.chdir("_test")
    begin
      assert_equal(0, File.link("_file1", "_file3"))
      
      assert(File.exists?("_file3"))
      Windows.dont do
	assert_equal(2, File.stat("_file1").nlink)
	assert_equal(2, File.stat("_file3").nlink)
	assert(File.stat("_file1").ino == File.stat("_file3").ino)
      end
    ensure
      Dir.chdir("..")
    end
  end

  MsWin32.dont do
    def test_s_lstat
      
      Dir.chdir("_test")
      File.symlink("_file1", "_file3") # may fail
      
      assert_equal(0, File.stat("_file3").size)
      assert(0 < File.lstat("_file3").size)
      
      assert_equal(0, File.stat("_file1").size)
      assert_equal(0,  File.lstat("_file1").size)
    end
  end

  def test_s_mtime
    assert_equal(@@mTime, File.mtime(@@file))
  end

  def test_s_open
    file1 = "_test/_file1"

    assert_exception(Errno::ENOENT) { File.open("_gumby") }

    # test block/non block forms
    
    f = File.open(file1)
    begin
      assert_equal(File, f.class)
    ensure
      f.close
    end

    assert_nil(File.open(file1) { |f| assert_equal(File, f.class)})

    # test modes

    modes = [
      %w( r w r+ w+ a a+ ),
      [ File::RDONLY, 
        File::WRONLY | File::CREAT,
        File::RDWR,
        File::RDWR   + File::TRUNC + File::CREAT,
        File::WRONLY + File::APPEND + File::CREAT,
        File::RDWR   + File::APPEND + File::CREAT
        ]]

    for modeset in modes
      sys("rm -f #{file1}")
      sys("touch #{file1}")

      mode = modeset.shift      # "r"

      # file: empty
      File.open(file1, mode) { |f| 
        assert_nil(f.gets)
        assert_exception(IOError) { f.puts "wombat" }
      }

      mode = modeset.shift      # "w"

      # file: empty
      File.open(file1, mode) { |f| 
        assert_nil(f.puts("wombat"))
        assert_exception(IOError) { f.gets }
      }

      mode = modeset.shift      # "r+"

      # file: wombat
      File.open(file1, mode) { |f| 
        assert_equal("wombat\n", f.gets)
        assert_nil(f.puts("koala"))
        f.rewind
        assert_equal("wombat\n", f.gets)
        assert_equal("koala\n", f.gets)
      }

      mode = modeset.shift      # "w+"

      # file: wombat/koala
      File.open(file1, mode) { |f| 
        assert_nil(f.gets)
        assert_nil(f.puts("koala"))
        f.rewind
        assert_equal("koala\n", f.gets)
      }

      mode = modeset.shift      # "a"

      # file: koala
      File.open(file1, mode) { |f| 
        assert_nil(f.puts("wombat"))
        assert_exception(IOError) { f.gets }
      }
      
      mode = modeset.shift      # "a+"

      # file: koala/wombat
      File.open(file1, mode) { |f| 
        assert_nil(f.puts("wallaby"))
        f.rewind
        assert_equal("koala\n", f.gets)
        assert_equal("wombat\n", f.gets)
        assert_equal("wallaby\n", f.gets)
      }

    end

    # Now try creating files

    filen = "_test/_filen"

    File.open(filen, "w") {}
    begin
      assert(File.exists?(filen))
    ensure
      File.delete(filen)
    end
    
    File.open(filen, File::CREAT, 0444) {}
    begin
      assert(File.exists?(filen))
      Cygwin.known_problem do
        assert_equal(0444 & ~File.umask, File.stat(filen).mode & 0777)
      end
    ensure
      File.delete(filen)
    end
  end

  def test_s_readlink
    MsWin32.dont do 
      Dir.chdir("_test")
      File.symlink("_file1", "_file3") # may fail
      assert_equal("_file1", File.readlink("_file3"))
      assert_exception(Errno::EINVAL) { File.readlink("_file1") }
    end
  end

  def test_s_rename
    Dir.chdir("_test")
    assert_exception(Errno::ENOENT) { File.rename("gumby", "pokey") }
    assert_equal(0, File.rename("_file1", "_renamed"))
    assert(!File.exists?("_file1"))
    assert(File.exists?("_renamed"))

  end

  def test_s_size
    file = "_test/_file1"
    assert_exception(Errno::ENOENT) { File.size("gumby") }
    assert_equal(0, File.size(file))
    File.open(file, "w") { |f| f.puts "123456789" }
    if $os == MsWin32
      assert_equal(11, File.size(file))
    else
      assert_equal(10, File.size(file))
    end
  end

  def test_s_split
    %w{ "/", "/tmp", "/tmp/a", "/tmp/a/b", "/tmp/a/b/", "/tmp//a",
        "/tmp//"
    }.each { |file|
      assert_equals( [ File.dirname(file), File.basename(file) ],
                     File.split(file), file )
    }
  end

  # Stat is pretty much tested elsewhere, so we're minimal here
  def test_s_stat
    assert_instance_of(File::Stat, File.stat("."))
  end


  def test_s_symlink
    MsWin32.dont do 
      Dir.chdir("_test")
      File.symlink("_file1", "_file3") # may fail
      assert(File.symlink?("_file3"))
      assert(!File.symlink?("_file1"))
    end
  end

  def test_s_truncate
    file = "_test/_file1"
    File.open(file, "w") { |f| f.puts "123456789" }
    if $os <= MsWin32
      assert_equal(11, File.size(file))
    else
      assert_equal(10, File.size(file))
    end
    File.truncate(file, 5)
    assert_equal(5, File.size(file))
    File.open(file, "r") { |f|
      assert_equal("12345", f.read(99))
      assert(f.eof?)
    }
  end

  MsWin32.dont do
    def myUmask
      Integer(`sh -c umask`.chomp)
    end

    def test_s_umask
      orig = myUmask
      assert_equal(myUmask, File.umask)
      assert_equal(myUmask, File.umask(0404))
      assert_equal(0404, File.umask(orig))
    end
  end

  
  def test_s_unlink
    Dir.chdir("_test")
    assert_equal(0, File.unlink)
    assert_exception(Errno::ENOENT) { File.unlink("gumby") }
    assert_equal(2, File.unlink("_file1", "_file2"))
  end

  def test_s_utime
    Dir.chdir("_test")
    begin
      [ 
	[ Time.at(18000),             Time.at(53423) ],
	[ Time.at(Time.now.to_i), Time.at(54321) ],
	[ Time.at(121314),        Time.now.to_i ]
      ].each { |aTime, mTime|
	File.utime(aTime, mTime, "_file1", "_file2")
	
	for file in [ "_file1", "_file2" ]
	  assert_equal(aTime, File.stat(file).atime) # does automatic conversion
	  assert_equal(mTime, File.stat(file).mtime)
	end
      }
    ensure
      Dir.chdir("..")
    end
  end

  # Instance methods

  Windows.dont do   # FAT filesystems don't store this properly
    def test_atime
      File.open(@@file) { |f| assert_equal(@@aTime, f.atime) }
    end
  end

  # Apparently you can't remove read permission on a file
  # under cygwin (at least on W2K)

  def test_chmod
    base = $os == Cygwin ? 0444 : 0

    Dir.chdir("_test")
    File.open("_file1") { |f|
      assert_equal(0,    f.chmod(0))
      assert_equal(base,    f.stat.mode & 0777)
      assert_equal(0,    f.chmod(0400))
      assert_equal(base | 0400, f.stat.mode & 0777)
      assert_equal(0,    f.chmod(0644))
      assert_equal(base | 0644, f.stat.mode & 0777)
    }
  end

  def test_chown
    super_user
  end

  def test_ctime
    sys("touch  #@@file")
    ctime = RubiconStat::ctime(@@file)
    @@cTime = Time.at(ctime)

    File.open(@@file) { |f| assert_equal(@@cTime, f.ctime) }
  end

  def test_flock
    MsWin32.dont do

      Dir.chdir("_test")
      
      # parent forks, then waits for a SIGUSR1 from child. Child locks file
      # and signals parent, then sleeps
      # When parent gets signal, confirms file si locked, kills child,
      # and confirms its unlocked
      
      pid = fork
      if pid
	File.open("_file1", "w") { |f|
	  trap("USR1") {
	    assert_equal(false, f.flock(File::LOCK_EX | File::LOCK_NB))
	    Process.kill "KILL", pid
	    Process.waitpid(pid, 0)
	    assert_equal(0, f.flock(File::LOCK_EX | File::LOCK_NB))
	    return
	  }
	  sleep 10
	  assert_fail("Never got signalled")
	}
      else
	File.open("_file1", "w") { |f|
	  assert_equal(0, f.flock(File::LOCK_EX))
	  sleep 1
	  Process.kill "USR1", Process.ppid
	  sleep 10
	  assert_fail "Parent never killed us"
	}
      end
    end
  end

  def test_lstat
    MsWin32.dont do
      Dir.chdir("_test")

      begin
	File.symlink("_file1", "_file3") # may fail
	f1 = File.open("_file1")
	begin
	  f3 = File.open("_file3")
	  
	  assert_equal(0, f3.stat.size)
	  assert(0 < f3.lstat.size)
	  
	  assert_equal(0, f1.stat.size)
	  assert_equal(0, f1.lstat.size)
	f3.close
	ensure
	  f1.close
	end
      ensure
	Dir.chdir("..")
      end
    end
  end

  def test_mtime
    File.open(@@file) { |f| assert_equal(@@mTime, f.mtime) }
  end

  def test_path
    File.open(@@file) { |f| assert_equal(@@file, f.path) }
  end

  def test_truncate
    file = "_test/_file1"
    File.open(file, "w") { |f|
      f.syswrite "123456789" 
      f.truncate(5)
    }
    assert_equal(5, File.size(file))
    File.open(file, "r") { |f|
      assert_equal("12345", f.read(99))
      assert(f.eof?)
    }
  end


end

Rubicon::handleTests(TestFile) if $0 == __FILE__
@


1.35
log
@several updates to follow the latest.
@
text
@d255 1
a255 1
      assert_equal(File, f.type)
d260 1
a260 1
    assert_nil(File.open(file1) { |f| assert_equal(File, f.type)})
@


1.34
log
@* builtin/TestFile.rb (TestFile::test_s_expand_path): avoid
  warnings in 1.7.

* builtin/TestKernel.rb (TestKernel::test_s_open1): 1.7 feature.

* language/TestBlocksProcs.rb (TestBlocksProcs::testYield): ditto.

* language/TestFloats.rb (TestFloats::test_number_to_string):
  strict number check.

* language/TestFloats.rb (TestFloats::test_malformed): ditto.

* language/TestFloats.rb (TestFloats::test_string_to_number): ditto.
@
text
@d290 1
a290 1
        assert_nil(f.puts "wombat")
d299 1
a299 1
        assert_nil(f.puts "koala")
d310 1
a310 1
        assert_nil(f.puts "koala")
d319 1
a319 1
        assert_nil(f.puts "wombat")
d327 1
a327 1
        assert_nil(f.puts "wallaby")
@


1.33
log
@Replaced $rubyVersion global with Version class methods.  Replaced references to the former with the latter.  Deprecated tests for #indexes and #indices where appropriate.  Removed some duplication in several tests in ArrayBase and HashBase.
@
text
@d140 2
a141 1
          name, home  = line.split(':').indices(0, -2)
@


1.32
log
@Took out pre-18000-second tests for file dates, because Win32 didn't like them.
@
text
@d42 1
a42 1
    if $rubyVersion >= "1.7.2" 
d92 1
a92 1
    if $rubyVersion >= "1.7.2" 
d140 1
a140 1
	  name, home  = line.split(':').indices(0, -2)
@


1.31
log
@iSupport for ALT_SEPARATOR in dirname and basename
@
text
@d451 2
a452 2
      [ [ 0,                      0 ],
	[ Time.at(0),             Time.at(12345) ],
@


1.30
log
@More support for MsWin32.

Added GNUmakefile, and made .c code compile under both MSVC and GCC.
@
text
@d41 6
d91 6
@


1.29
log
@Fix spelling in TestFile
@
text
@d29 4
a32 2
  def test_s_atime
    assert_equal(@@aTime, File.atime(@@file))
d122 4
a125 5
    pw = File.open("/etc/passwd")
    if pw
      begin
        users = pw.readlines
        line = ''
d127 7
a133 9
        if line.length > 0 
          name, home  = line.split(':').indices(0, -2)
          assert_equal(home, File.expand_path("~#{name}"))
          assert_equal(home, File.expand_path("~#{name}", "/tmp/gumby"))
          assert_equal(File.join(home, 'a'),
                             File.expand_path("~#{name}/a", "/tmp/gumby"))
        end
      ensure 
        pw.close
d135 1
a135 1
    else
d458 4
a461 2
  def test_atime
    File.open(@@file) { |f| assert_equal(@@aTime, f.atime) }
@


1.28
log
@Added support for 'known problems'.

This is only used for those problems that really will never get
fixed.
@
text
@d338 1
a338 1
      Cygwi.known_problem do
@


1.27
log
@Good ol' Windows needed more tweaking in the ownership department.
@
text
@d329 5
a333 2
    assert(File.exists?(filen))
    File.delete(filen)
d336 8
a343 3
    assert(File.exists?(filen))
    assert_equal(0444 & ~File.umask, File.stat(filen).mode & 0777)
    File.delete(filen)
@


1.26
log
@Fix strange hang on dblack's machine.

A test in ThreadGroup was leaving 10 threads each doing a sleep 60. On his
machine, this caused some I/O tests to abort. Reap these sleeping threads,
and the hang goes away.

Also include umask in some file permission calculations
@
text
@d148 1
a148 1
   end
d156 7
a162 5
      begin
        tests[File.expand_path(File.readlink("/dev/tty"), "/dev")] =
          "characterSpecial"
      rescue Errno::EINVAL
        tests["/dev/tty"] = "characterSpecial"
d408 4
a411 3
  def myUmask
    Integer(`sh -c umask`.chomp)
  end
d413 6
a418 5
  def test_s_umask
    orig = myUmask
    assert_equal(myUmask, File.umask)
    assert_equal(myUmask, File.umask(0404))
    assert_equal(0404, File.umask(orig))
d421 1
@


1.25
log
@Yet more tidying.

Get stuff working across Cygwin and MsRuby.
@
text
@d332 1
a332 1
    assert_equal(0444, File.stat(filen).mode & 0777)
@


1.24
log
@Fixes to File and IO by Tanaka Akira
@
text
@d359 1
a359 1
    if $os <= Windows
d393 1
a393 1
    if $os <= Windows
@


1.23
log
@Tidy a couple of old-fashioned "if $os == ..." lines
@
text
@d125 1
a125 1
        line = users.pop while users.nitems > 0 and line.length == 0
a153 1
        "/dev/tty" => "characterSpecial",
d156 7
d491 1
a491 1
	File.open("_file1") { |f|
d503 1
a503 1
	File.open("_file1") { |f|
d505 1
@


1.22
log
@Continue makig the tests Windows-agnostic. Include patch from Masaki
Suketa which fixes some bad tests (assert(...) being used in place
of assert_equals(...))
@
text
@d5 1
a5 1
if $os != MsWin32
d198 1
a198 1
      unless $os <= Windows
@


1.21
log
@Get more tests working under Win32, and tidy up some of the
operating system dependencies a tad
@
text
@d324 1
a324 1
    File.open(filen, "w", 0444) {}
d326 1
a326 1
    assert(0444, File.stat(filen).mode)
@


1.20
log
@Added many patches from Nobu Nakad for 1.7 features (plus some bug fixes)
@
text
@d4 4
a7 1
require 'socket'
d86 6
a91 1
    base = `pwd`.chomp
d143 6
a148 2
    File.symlink("_file1", "_file3") # may fail
    sock = UNIXServer.open("_sock")
a154 2
        "_sock"    => "socket",
        "_file3"   => "link",
d157 6
a162 1
      if $os == Linux
d176 1
a176 1
      sock.close if sock
d208 12
a219 9
  def test_s_lstat
    Dir.chdir("_test")
    File.symlink("_file1", "_file3") # may fail

    assert_equal(0, File.stat("_file3").size)
    assert(0 < File.lstat("_file3").size)

    assert_equal(0, File.stat("_file1").size)
    assert_equal(0,  File.lstat("_file1").size)
d331 6
a336 4
    Dir.chdir("_test")
    File.symlink("_file1", "_file3") # may fail
    assert_equal("_file1", File.readlink("_file3"))
    assert_exception(Errno::EINVAL) { File.readlink("_file1") }
d376 6
a381 4
    Dir.chdir("_test")
    File.symlink("_file1", "_file3") # may fail
    assert(File.symlink?("_file3"))
    assert(!File.symlink?("_file1"))
d474 1
a474 1
    Dir.chdir("_test")
d476 28
a503 25
    # parent forks, then waits for a SIGUSR1 from child. Child locks file
    # and signals parent, then sleeps
    # When parent gets signal, confirms file si locked, kills child,
    # and confirms its unlocked

    pid = fork
    if pid
      File.open("_file1") { |f|
        trap("USR1") {
          assert_equal(false, f.flock(File::LOCK_EX | File::LOCK_NB))
          Process.kill "KILL", pid
          Process.waitpid(pid, 0)
          assert_equal(0, f.flock(File::LOCK_EX | File::LOCK_NB))
          return
        }
        sleep 10
        assert_fail("Never got signalled")
      }
    else
      File.open("_file1") { |f|
        assert_equal(0, f.flock(File::LOCK_EX))
        Process.kill "USR1", Process.ppid
        sleep 10
        assert_fail "Parent never killed us"
      }
d508 21
a528 16
    Dir.chdir("_test")
    begin
      File.symlink("_file1", "_file3") # may fail
      
      f1 = File.open("_file1")
      f3 = File.open("_file3")
      
      assert_equal(0, f3.stat.size)
      assert(0 < f3.lstat.size)
      
      assert_equal(0, f1.stat.size)
      assert_equal(0, f1.lstat.size)
      f1.close
      f3.close
    ensure
      Dir.chdir("..")
@


1.19
log
@Start to get tests running better under Windows. Start some basic work
on File and Dir, We seem to be bumping up against some Cygwin bugs
though; utime and IGNORED signals don't seem to work correctly. Once I get the
tests stabilized I'll publish a list and hopefully those who know about
these things will be able to comment.
@
text
@d87 1
d89 4
a92 4
    assert_equal(File.join(base, 'a.'), File.expand_path('a.')) 
    assert_equal(File.join(base, '.a'), File.expand_path('.a')) 
    assert_equal(File.join(base, 'a..'), File.expand_path('a..')) 
    assert_equal(File.join(base, '..a'), File.expand_path('..a')) 
d94 1
d148 1
a148 1
        tests["/dev/fd0"] = "blockSpecial"
@


1.18
log
@Add tests for the file join bug
@
text
@d39 1
d43 11
a53 7
    assert_equal(1,    File.chmod(0, "_file1"))
    assert_equal(2,    File.chmod(0, "_file1", "_file2"))
    assert_equal(0,    File.stat("_file1").mode & 0777)
    assert_equal(1,    File.chmod(0400, "_file1"))
    assert_equal(0400, File.stat("_file1").mode & 0777)
    assert_equal(1,    File.chmod(0644, "_file1"))
    assert_equal(0644, File.stat("_file1").mode & 0777)
a133 1
    system("mkfifo _fifo") # may fail
a142 1
        "_fifo"    => "fifo" 
d147 2
d177 12
a188 7
    
    assert_equal(0, File.link("_file1", "_file3"))
    
    assert(File.exists?("_file3"))
    assert_equal(2, File.stat("_file1").nlink)
    assert_equal(2, File.stat("_file3").nlink)
    assert(File.stat("_file1").ino == File.stat("_file3").ino)
d331 5
a335 1
    assert_equal(10, File.size(file))
d363 5
a367 1
    assert_equal(10, File.size(file))
d396 16
a411 13

    [ [ 0,                      0 ],
      [ Time.at(0),             Time.at(12345) ],
      [ Time.at(Time.now.to_i), Time.at(54321) ],
      [ Time.at(121314),        Time.now.to_i ]
    ].each { |aTime, mTime|
      File.utime(aTime, mTime, "_file1", "_file2")

      for file in [ "_file1", "_file2" ]
        assert_equal(aTime, File.stat(file).atime) # does automatic conversion
        assert_equal(mTime, File.stat(file).mtime)
      end
    }
d420 3
d424 2
d429 1
a429 1
      assert_equal(0,    f.stat.mode & 0777)
d431 1
a431 1
      assert_equal(0400, f.stat.mode & 0777)
d433 1
a433 1
      assert_equal(0644, f.stat.mode & 0777)
d482 16
a497 10
    File.symlink("_file1", "_file3") # may fail

    f1 = File.open("_file1")
    f3 = File.open("_file3")

    assert_equal(0, f3.stat.size)
    assert(0 < f3.lstat.size)

    assert_equal(0, f1.stat.size)
    assert_equal(0, f1.lstat.size)
@


1.17
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d82 6
@


1.16
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d6 1
d12 1
a12 1
    @@file = "_test/_touched"
d14 1
a14 1
    sys("../util/test_touch -a -t 122512341999 #@@file")
d17 1
a17 1
    sys("../util/test_touch -m -t 010112341997 #@@file")
@


1.15
log
@Try to remove yet more machine dependencies
@
text
@d1 2
a2 1
require '../rubicon'
@


1.14
log
@Make Aleksi's changes
@
text
@d125 1
a125 1
      {
a128 1
        "/dev/fd0" => "blockSpecial",
d132 7
a138 1
      }.each { |file, type|
@


1.13
log
@Add our own touch utility
@
text
@d3 1
d122 1
d124 19
a142 15
    {
      "../_test"          => "directory",
      "_file1"            => "file",
      "/dev/tty"          => "characterSpecial",
      "/dev/fd0"          => "blockSpecial",
      "/tmp/.X11-unix/X0" => "socket",
      "_file3"            => "link",
      "_fifo"             => "fifo" 
    }.each { |file, type|
      if File.exists?(file)
        assert_equal(type, File.ftype(file), file.dup)
      else
        skipping("#{type} not supported")
      end
    }
@


1.12
log
@Fixed problem with different versions of "touch"
@
text
@d11 1
a11 2
    #sys("touch -a -t 122512341999 #@@file")
    sys_touch("a", "1225", "1234", "1999", @@file)
d14 1
a14 2
    #sys("touch -m -t 010112341997 #@@file")
    sys_touch("m", "0101", "1234", "1997", @@file)
d78 1
@


1.11
log
@Archive save
@
text
@d11 2
a12 1
    sys("touch -a -t 122512341999 #@@file")
d15 2
a16 1
    sys("touch -m -t 010112341997 #@@file")
@


1.10
log
@Archive save
@
text
@d184 5
a188 2
    assert_equal(File, f.type)
    f.close
@


1.9
log
@Fix problem with stat
@
text
@d312 1
a312 1
    assert_instance_of(File.stat("."), File::Stat)
@


1.8
log
@Use new stat module
@
text
@a10 4
    sys("touch  #@@file")
    xxxx = RubiconStat::ctime(@@file)
    @@cTime = Time.at(xxxx)

a18 1
    puts "!!!!"
d53 4
d393 4
@


1.7
log
@Get the ctime via Perl
@
text
@d2 1
a2 1

d12 2
a13 3
    ctime = `perl -e "print((stat('.'))[10], '\n')"`.to_i
    # Yes - there's a race condition here...
    @@cTime = Time.at(ctime)
d23 1
@


1.6
log
@Finished with TestFile
@
text
@d12 1
d14 1
a14 2
    n = Time.now
    @@cTime = Time.local(n.year, n.month, n.day, n.hour, n.min, n.sec)
@


1.5
log
@Archive
@
text
@d313 1
a313 1
    assert_instance_of?(File::Stat, File.stat("."))
d320 2
a321 2
    assert(File.symlink("_file3"))
    assert(!File.symlink("_file1"))
d341 1
d344 1
a344 1
    assert_equal(0404, File.umask)
d374 1
a374 1
    assert_fail("untested")
d378 9
a386 1
    assert_fail("untested")
d390 1
a390 1
    assert_fail("untested")
d394 1
a394 1
    assert_fail("untested")
d398 28
a425 1
    assert_fail("untested")
d429 11
a439 1
    assert_fail("untested")
d443 1
a443 1
    assert_fail("untested")
d447 1
a447 1
    assert_fail("untested")
d451 10
a460 1
    assert_fail("untested")
@


1.4
log
@Archive
@
text
@d286 6
a291 1
    assert_fail("untested")
d295 5
a299 1
    assert_fail("untested")
d303 6
a308 1
    assert_fail("untested")
d311 1
d313 1
a313 1
    assert_fail("untested")
d316 1
d318 4
a321 1
    assert_fail("untested")
d325 13
a337 1
    assert_fail("untested")
d341 3
a343 1
    assert_fail("untested")
d347 4
a350 1
    assert_fail("untested")
d354 14
a367 1
    assert_fail("untested")
d369 2
@


1.3
log
@Archive save
@
text
@d93 1
a93 1
      $stderr.puts "Skipping test_s_expand_path(~)"
d113 1
a113 1
      $stderr.puts "Slipping test_s_expand_path(~user)"
d123 4
a126 4
      "../_test" => "directory",
      "_file1" => "file",
      "/dev/tty"     => "characterSpecial",
      "/dev/fd0"     => "blockSpecial",
d128 2
a129 2
      "_file3"  => "link",
      "_fifo"   => "fifo" 
d140 9
a148 1
    assert_fail("untested")
d152 8
a159 1
    assert_fail("untested")
d163 8
a170 1
    assert_fail("untested")
d178 98
a275 1
    assert_fail("untested")
d279 4
a282 1
    assert_fail("untested")
@


1.2
log
@Archive
@
text
@d9 6
a14 1
    @@file = "_test/_file1"
a18 3
#    sys("touch -c -t 070412341998 #@@file")
#    @@cTime = Time.local(1998,  7,  4, 12, 34, 00)

d24 1
d33 5
a37 1
    assert_fail("untested")
d41 10
a50 1
    assert_fail("untested")
d54 1
a54 1
    assert_fail("untested")
d58 1
a58 1
    assert_fail("untested")
d62 4
a65 1
    assert_fail("untested")
d69 4
a72 1
    assert_fail("untested")
d76 39
a114 1
    assert_fail("untested")
d118 19
a136 1
    assert_fail("untested")
@


1.1
log
@Initial revision
@
text
@d6 2
a7 3
  def test_atime
    assert_fail("untested")
  end
d9 1
a9 15
  def test_chmod
    assert_fail("untested")
  end

  def test_chown
    assert_fail("untested")
  end

  def test_ctime
    assert_fail("untested")
  end

  def test_flock
    assert_fail("untested")
  end
d11 2
a12 3
  def test_lstat
    assert_fail("untested")
  end
d14 2
a15 3
  def test_mtime
    assert_fail("untested")
  end
d17 2
a18 2
  def test_path
    assert_fail("untested")
d21 2
a22 2
  def test_truncate
    assert_fail("untested")
d26 1
a26 1
    assert_fail("untested")
d74 1
a74 1
    assert_fail("untested")
d120 37
@


1.1.1.1
log
@Initial Import
@
text
@@
