head	1.18;
access;
symbols
	V0_3_2:1.14
	V0_1_4:1.10
	V0_1_3:1.10
	V0_1_2:1.9
	V0_1_1:1.8
	V0_1:1.8
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.18
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.21.20.11.33;	author dave;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.18.17.24.27;	author dave;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.18.16.10.09;	author dave;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.10.04.45.27;	author dave;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.02.00.17.06;	author dave;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.27.05.49.26;	author dave;	state Exp;
branches;
next	1.11;

1.11
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.26.18.22.06;	author dave;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.20.18.04.44;	author dave;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.15.03.04.45;	author dave;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.15.02.56.08;	author dave;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.14.21.16.08;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.06.17.14.24;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.06.16.08.45;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.06.14.44.12;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.21.33.37;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.18
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'

class TestDir < Rubicon::TestCase

  def setup
    setupTestDir
  end

  def teardown
    teardownTestDir
  end

  def delete_test_dir
    MsWin32.only do sys("del _test /s /q") end
    MsWin32.dont do sys("rm _test/*") end
  end

  def test_s_aref
    [
      [ %w( _test ),                     Dir["_test"] ],
      [ %w( _test/ ),                    Dir["_test/"] ],
      [ %w( _test/_file1 _test/_file2 ), Dir["_test/*"] ],
      [ %w( _test/_file1 _test/_file2 ), Dir["_test/_file*"] ],
      [ %w(  ),                          Dir["_test/frog*"] ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_file*"] ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir["_test/_file[0-9]*"] ],
      [ %w( ),                           Dir["_test/_file[a-z]*"] ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir["_test/_file{0,1,2,3}"] ],
      [ %w( ),                           Dir["_test/_file{4,5,6,7}"] ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]l*"] ],    
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]e[0-9]"] ],
      [ %w( _test/_file1              ), Dir["**/_f*[il]e[01]"] ],
      [ %w( _test/_file1              ), Dir["**/_f*[il]e[01]*"] ],
      [ %w( _test/_file1              ), Dir["**/_f*[^ie]e[01]*"] ],
    ].each do |expected, got|
      assert_set_equal(expected, got)
    end
  end

  def test_s_chdir
    start = Dir.getwd
    assert_exception(Errno::ENOENT)       { Dir.chdir "_wombat" }
    assert_equal(0,                         Dir.chdir("_test"))
    assert_equal(File.join(start, "_test"), Dir.getwd)
    assert_equal(0,                         Dir.chdir(".."))
    assert_equal(start,                     Dir.getwd)
    MsWin32.only do
      assert_equal(0,                       Dir.chdir("C:/Program Files"));
      assert_equal("C:/Program Files",      Dir.getwd)
    end
    MsWin32.dont do
      assert_equal(0,                       Dir.chdir("/tmp"))
      assert_equal("/tmp",                  Dir.getwd)
    end
  end

  def test_s_chroot
    super_user
  end

  def test_s_delete
    assert_kindof_exception(SystemCallError)    { Dir.delete "_wombat" } 
    assert_kindof_exception(SystemCallError)    { Dir.delete "_test" } 
    delete_test_dir
    assert_equal(0, Dir.delete("_test"))
    assert_kindof_exception(SystemCallError)    { Dir.delete "_test" } 
  end

  def test_s_entries
    assert_exception(Errno::ENOENT)      { Dir.entries "_wombat" } 
    assert_exception(Errno::ENOENT)      { Dir.entries "_test/file*" } 
    assert_set_equal(@@files, Dir.entries("_test"))
    assert_set_equal(@@files, Dir.entries("_test/."))
    assert_set_equal(@@files, Dir.entries("_test/../_test"))
  end

  def test_s_foreach
    got = []
    entry = nil
    assert_exception(Errno::ENOENT) { Dir.foreach("_wombat") {}}
    assert_nil(Dir.foreach("_test") { |f| got << f } )
    assert_set_equal(@@files, got)
  end

  def test_s_getwd
    MsWin32.only do
      assert_equal(`cd`.chomp.gsub(/\\/, '/'), Dir.getwd)
    end
    MsWin32.dont do
      assert_equal(`pwd`.chomp, Dir.getwd)
    end
  end

  def test_s_glob
    [
      [ %w( _test ),                     Dir.glob("_test") ],
      [ %w( _test/ ),                    Dir.glob("_test/") ],
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("_test/*") ],
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file*") ],
      [ %w(  ),                          Dir.glob("_test/frog*") ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("**/_file*") ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file[0-9]*") ],
      [ %w( ),                           Dir.glob("_test/_file[a-z]*") ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file{0,1,2,3}") ],
      [ %w( ),                           Dir.glob("_test/_file{4,5,6,7}") ],
      
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("**/_f*[il]l*") ],
      [ %w( _test/_file1 _test/_file2 ), Dir.glob("**/_f*[il]e[0-9]") ],
      [ %w( _test/_file1              ), Dir.glob("**/_f*[il]e[01]") ],
      [ %w( _test/_file1              ), Dir.glob("**/_f*[il]e[01]*") ],
      [ %w( _test/_file1              ), Dir.glob("**/_f*[^ie]e[01]*") ],
    ].each do |expected, got|
      assert_set_equal(expected, got)
    end
  end

  def test_s_mkdir
    assert_equal(0, Dir.chdir("_test"))
    assert_equal(0, Dir.mkdir("_lower1"))
    assert(File.stat("_lower1").directory?)
    assert_equal(0, Dir.chdir("_lower1"))
    assert_equal(0, Dir.chdir(".."))
    assert_equal(0, Dir.mkdir("_lower2", 0777))
    skipping "Anyone think of a way to test permissions?"
    assert_equal(0, Dir.delete("_lower1"))
    assert_equal(0, Dir.delete("_lower2"))
  end

  def test_s_new
    assert_exception(ArgumentError) { Dir.new }
    assert_exception(ArgumentError) { Dir.new("a", "b") }
    assert_exception(Errno::ENOENT) { Dir.new("_wombat") }

    assert_equal(Dir, Dir.new(".").class)
  end

  def test_s_open
    assert_exception(ArgumentError) { Dir.open }
    assert_exception(ArgumentError) { Dir.open("a", "b") }
    assert_exception(Errno::ENOENT) { Dir.open("_wombat") }

    assert_equal(Dir, Dir.open(".").class)
    assert_nil(Dir.open(".") { |d| assert_equal(Dir, d.class) } )
  end

  def test_s_pwd
    MsWin32.only do
      assert_equal(`cd`.chomp.gsub(/\\/, '/'), Dir.pwd)
    end
    MsWin32.dont do
      assert_equal(`pwd`.chomp, Dir.pwd)
    end
  end

  def test_s_rmdir
    assert_kindof_exception(SystemCallError)    { Dir.rmdir "_wombat" } 
    assert_kindof_exception(SystemCallError)    { Dir.rmdir "_test" } 
    delete_test_dir
    assert_equal(0, Dir.rmdir("_test"))
    assert_kindof_exception(SystemCallError)    { Dir.rmdir "_test" } 
  end

  def test_s_unlink
    assert_kindof_exception(SystemCallError)    { Dir.unlink "_wombat" } 
    assert_kindof_exception(SystemCallError)    { Dir.unlink "_test" } 
    delete_test_dir
    assert_equal(0, Dir.unlink("_test"))
    assert_kindof_exception(SystemCallError)    { Dir.unlink "_test" } 
  end

  def test_close
    d = Dir.new(".")
    d.read
    assert_nil(d.close)
    assert_exception(IOError) { d.read }
  end

  def test_each
    got = []
    d = Dir.new("_test")
    assert_equal(d, d.each { |f| got << f })
    assert_set_equal(@@files, got)
    d.close
  end

  def test_read
    d = Dir.new("_test")
    got = []
    entry = nil
    got << entry while entry = d.read
    assert_set_equal(@@files, got)
    d.close
  end

  def test_rewind
    d = Dir.new("_test")
    entry = nil
    got = []
    got << entry while entry = d.read
    assert_set_equal(@@files, got)
    d.rewind
    got = []
    got << entry while entry = d.read
    assert_set_equal(@@files, got)
    d.close
  end

  def test_seek
    d = Dir.new("_test")
    d.read
    pos = d.tell
    assert_equal(Fixnum, pos.class)
    name = d.read
    assert_equal(d, d.seek(pos))
    assert_equal(name, d.read)
    d.close
  end

  def test_tell
    d = Dir.new("_test")
    d.read
    pos = d.tell
    assert_equal(Fixnum, pos.class)
    name = d.read
    assert_equal(d, d.seek(pos))
    assert_equal(name, d.read)
    d.close
  end

  def test_improper_close
    teardownTestDir
    Cygwin.known_problem do
      Dir.mkdir("_test")
      d = Dir.new("_test")
      Dir.rmdir("_test")
      begin
        Dir.mkdir("_test")
      rescue
        raise RUNIT::AssertionFailedError
      ensure
        d.close
      end
    end
  end
  
end

Rubicon::handleTests(TestDir) if $0 == __FILE__
@


1.17
log
@Fix the directory deletion stuff under Win2k (patch from Chris Morris)
@
text
@d142 1
a142 1
    assert_equal(Dir, Dir.new(".").type)
d150 2
a151 2
    assert_equal(Dir, Dir.open(".").type)
    assert_nil(Dir.open(".") { |d| assert_equal(Dir, d.type) } )
d220 1
a220 1
    assert_equal(Fixnum, pos.type)
d231 1
a231 1
    assert_equal(Fixnum, pos.type)
@


1.16
log
@Added 'ensure' to cygwin know problem case
@
text
@d14 5
d69 1
a69 1
    sys("rm _test/*")
d166 1
a166 1
    sys("rm _test/*")
d174 1
a174 1
    sys("rm _test/*")
@


1.15
log
@Fixes by Chad for File/Dir stuff under cygwin
@
text
@d243 2
d248 1
a248 1

@


1.14
log
@Tidy a couple of old-fashioned "if $os == ..." lines
@
text
@d186 1
d195 1
d208 1
d231 14
@


1.13
log
@Start adding MsWin32 support
@
text
@d47 1
a47 1
    if $os == MsWin32
d50 2
a51 1
    else
d86 1
a86 1
    if $os == MsWin32
d88 2
a89 1
    else
d150 1
a150 1
    if $os == MsWin32
d152 2
a153 1
    else
@


1.12
log
@Start to get tests running better under Windows. Start some basic work
on File and Dir, We seem to be bumping up against some Cygwin bugs
though; utime and IGNORED signals don't seem to work correctly. Once I get the
tests stabilized I'll publish a list and hopefully those who know about
these things will be able to comment.
@
text
@d30 2
a31 1
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]l*"] ],      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]e[0-9]"] ],
d47 7
a53 2
    assert_equal(0,                         Dir.chdir("/tmp"))
    assert_equal("/tmp",                    Dir.getwd)
d85 5
a89 1
    assert_equal(`pwd`.chomp, Dir.getwd)
d148 5
a152 1
    assert_equal(`pwd`.chomp, Dir.pwd)
@


1.11
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d30 1
a30 2
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]l*"] ],
      [ %w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]e[0-9]"] ],
a176 1
    assert_nil(d.read)
a184 1
    assert_nil(d.read)
a188 1
    assert_nil(d.read)
d199 1
d210 1
@


1.10
log
@Try to remove yet more machine dependencies
@
text
@d1 2
a2 2
require '../rubicon'

@


1.9
log
@Make Aleksi's changes
@
text
@d15 23
a37 19
    assert_equal(%w( _test ),                     Dir["_test"])
    assert_equal(%w( _test/ ),                    Dir["_test/"])
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["_test/*"])
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["_test/_file*"])
    assert_equal(%w(  ),                          Dir["_test/frog*"])

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["**/_file*"])

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["_test/_file[0-9]*"])
    assert_equal(%w( ),                           Dir["_test/_file[a-z]*"])

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["_test/_file{0,1,2,3}"])
    assert_equal(%w( ),                           Dir["_test/_file{4,5,6,7}"])
    
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]l*"])
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir["**/_f*[il]e[0-9]"])
    assert_equal(%w( _test/_file1              ), Dir["**/_f*[il]e[01]"])
    assert_equal(%w( _test/_file1              ), Dir["**/_f*[il]e[01]*"])
    assert_equal(%w( _test/_file1              ), Dir["**/_f*[^ie]e[01]*"])
d66 3
a68 3
    assert_equal(@@files, Dir.entries("_test"))
    assert_equal(@@files, Dir.entries("_test/."))
    assert_equal(@@files, Dir.entries("_test/../_test"))
d72 2
a73 1
    expected = @@files
d75 2
a76 2
    assert_nil(Dir.foreach("_test") { |f|
                   assert_equal(expected.shift, f) } )
d84 23
a106 19
    assert_equal(%w( _test ),                     Dir.glob("_test"))
    assert_equal(%w( _test/ ),                    Dir.glob("_test/"))
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("_test/*"))
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file*"))
    assert_equal(%w(  ),                          Dir.glob("_test/frog*"))

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("**/_file*"))

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file[0-9]*"))
    assert_equal(%w( ),                           Dir.glob("_test/_file[a-z]*"))

    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("_test/_file{0,1,2,3}"))
    assert_equal(%w( ),                           Dir.glob("_test/_file{4,5,6,7}"))
    
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("**/_f*[il]l*"))
    assert_equal(%w( _test/_file1 _test/_file2 ), Dir.glob("**/_f*[il]e[0-9]"))
    assert_equal(%w( _test/_file1              ), Dir.glob("**/_f*[il]e[01]"))
    assert_equal(%w( _test/_file1              ), Dir.glob("**/_f*[il]e[01]*"))
    assert_equal(%w( _test/_file1              ), Dir.glob("**/_f*[^ie]e[01]*"))
d166 1
a166 1
    expected = @@files
d168 2
a169 2
    assert_equal(d, d.each { |f|
                   assert_equal(expected.shift, f) } )
d174 4
a177 1
    @@files.each { |expected| assert_equal(expected, d.read);  }
d183 4
a186 1
    @@files.each { |expected| assert_equal(expected, d.read); }
d189 3
a191 1
    @@files.each { |expected| assert_equal(expected, d.read); }
@


1.8
log
@Change stderr write to skipping()
@
text
@d52 2
a53 2
    assert_exception(Errno::ENOENT)    { Dir.delete "_wombat" } 
    assert_exception(Errno::ENOTEMPTY) { Dir.delete "_test" } 
d56 1
a56 1
    assert_exception(Errno::ENOENT)    { Dir.delete "_test" } 
d134 2
a135 2
    assert_exception(Errno::ENOENT)    { Dir.rmdir "_wombat" } 
    assert_exception(Errno::ENOTEMPTY) { Dir.rmdir "_test" } 
d138 1
a138 1
    assert_exception(Errno::ENOENT)    { Dir.rmdir "_test" } 
d142 2
a143 2
    assert_exception(Errno::ENOENT)    { Dir.unlink "_wombat" } 
    assert_exception(Errno::ENOTEMPTY) { Dir.unlink "_test" } 
d146 1
a146 1
    assert_exception(Errno::ENOENT)    { Dir.unlink "_test" } 
@


1.7
log
@Ensure we actually burn some time so the tests don;t fail
@
text
@d70 1
a70 1
    assert(nil != Dir.foreach("_test") { |f|
@


1.6
log
@Archive save
@
text
@d107 1
a107 1
    $stderr.puts "Anyone think of a way to test permissions?"
@


1.5
log
@Archive
@
text
@d48 1
a48 1
    assert_fail("untested")
@


1.4
log
@Save away
@
text
@a5 5
  def sys(cmd)
    assert(system(cmd), cmd)
    assert_equal(0, $?, "cmd: #{$?}")
  end
    
d7 1
a7 10
    @@start = Dir.getwd
    system("mkdir _test")
    if $? != 0
      $stderr.puts "Cannot run directory test: " + 
                   "will destroy existing directory _test"
      exit(99)
    end
    sys("touch _test/_file1")
    sys("touch _test/_file2")
    @@files = %w(. .. _file1 _file2)
d11 1
a11 3
    Dir.chdir(@@start)
    system("rm -f _test/*")
    system("rmdir _test 2>/dev/null")
@


1.3
log
@Archive
@
text
@d91 1
a91 1
    assert_equal(`pwd`, Dir.getwd)
d117 9
a125 1
    assert_fail("untested")
d129 5
a133 1
    assert_fail("untested")
d137 6
a142 1
    assert_fail("untested")
d146 1
a146 1
    assert_fail("untested")
d150 5
a154 1
    assert_fail("untested")
d158 5
a162 1
    assert_fail("untested")
d166 4
a169 1
    assert_fail("untested")
d173 4
a176 1
    assert_fail("untested")
d180 3
a182 1
    assert_fail("untested")
d186 6
a191 1
    assert_fail("untested")
d195 7
a201 1
    assert_fail("untested")
d205 7
a211 1
    assert_fail("untested")
@


1.2
log
@Get everything to run through
@
text
@d6 44
a49 2
  def test_close
    assert_fail("untested")
d52 9
a60 2
  def test_each
    assert_fail("untested")
d63 1
a63 1
  def test_read
d67 6
a72 2
  def test_rewind
    assert_fail("untested")
d75 6
a80 2
  def test_seek
    assert_fail("untested")
d83 5
a87 2
  def test_tell
    assert_fail("untested")
d90 2
a91 2
  def test_s_aref
    assert_fail("untested")
d94 20
a113 2
  def test_s_chdir
    assert_fail("untested")
d116 1
a116 1
  def test_s_chroot
d120 1
a120 1
  def test_s_delete
d124 1
a124 1
  def test_s_entries
d128 1
a128 1
  def test_s_foreach
d132 1
a132 1
  def test_s_getwd
d136 1
a136 1
  def test_s_glob
d140 1
a140 1
  def test_s_mkdir
d144 1
a144 1
  def test_s_new
d148 1
a148 1
  def test_s_open
d152 1
a152 1
  def test_s_pwd
d156 1
a156 1
  def test_s_rmdir
d160 1
a160 1
  def test_s_unlink
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
  def test_s_[]
@


1.1.1.1
log
@Initial Import
@
text
@@
