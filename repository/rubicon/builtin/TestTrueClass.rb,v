head	1.4;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.2
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.06.17.51.12;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestTrueClass < Rubicon::TestCase

  def test_00sanity
    assert_equal(true,TRUE)
  end

  def test_AND # '&'
    truth_table(true.method("&"), false, true)
  end

  def test_OR # '|'
    truth_table(true.method("|"), true, true)
  end

  def test_XOR # '^'
    truth_table(true.method("^"), true, false)
  end

  def test_to_s
    assert_equal("true", true.to_s)
    assert_equal("true", TRUE.to_s)
  end

  def test_type
    assert_equal(TrueClass, true.class)
    assert_equal(TrueClass, TRUE.class)
  end

end

Rubicon::handleTests(TestTrueClass) if $0 == __FILE__
@


1.3
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d29 2
a30 2
    assert_equal(TrueClass, true.type)
    assert_equal(TrueClass, TRUE.type)
@


1.2
log
@Trivial
@
text
@d1 2
a2 1
require '../rubicon'
@


1.1
log
@Initial revision
@
text
@d6 4
d11 1
a11 1
    assert_fail("untested")
d15 1
a15 1
    assert_fail("untested")
d19 1
a19 1
    assert_fail("untested")
d23 2
a24 1
    assert_fail("untested")
d28 2
a29 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
