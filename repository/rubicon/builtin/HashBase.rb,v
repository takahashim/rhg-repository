head	1.6;
access;
symbols
	V0_3_2:1.4;
locks; strict;
comment	@# @;


1.6
date	2002.01.05.14.35.05;	author chad;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.05.12.53.38;	author chad;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.20.15.42.34;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.07.04.57.20;	author dave;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Replaced $rubyVersion global with Version class methods.  Replaced references to the former with the latter.  Deprecated tests for #indexes and #indices where appropriate.  Removed some duplication in several tests in ArrayBase and HashBase.
@
text
@require "rubicon"


class HashBase < Rubicon::TestCase

  def setup
    @@h = @@cls[
      1 => 'one', 2 => 'two', 3 => 'three',
      self => 'self', true => 'true', nil => 'nil',
      'nil' => nil
    ]
  end

  def test_s_aref
    h = @@cls["a" => 100, "b" => 200]
    assert_equal(100, h['a'])
    assert_equal(200, h['b'])
    assert_nil(h['c'])

    h = @@cls.[]("a" => 100, "b" => 200)
    assert_equal(100, h['a'])
    assert_equal(200, h['b'])
    assert_nil(h['c'])
  end

  def test_s_new
    h = @@cls.new
    assert_instance_of(@@cls, h)
    assert_nil(h.default)
    assert_nil(h['spurious'])

    h = @@cls.new('default')
    assert_instance_of(@@cls, h)
    assert_equal('default', h.default)
    assert_equal('default', h['spurious'])
    
  end

  def test_AREF # '[]'
    t = Time.now
    h = @@cls[
      1 => 'one', 2 => 'two', 3 => 'three',
      self => 'self', t => 'time', nil => 'nil',
      'nil' => nil
    ]

    assert_equal('one',   h[1])
    assert_equal('two',   h[2])
    assert_equal('three', h[3])
    assert_equal('self',  h[self])
    assert_equal('time',  h[t])
    assert_equal('nil',   h[nil])
    assert_equal(nil,     h['nil'])
    assert_equal(nil,     h['koala'])

    h1 = h.dup
    h1.default = :default

    assert_equal('one',    h1[1])
    assert_equal('two',    h1[2])
    assert_equal('three',  h1[3])
    assert_equal('self',   h1[self])
    assert_equal('time',   h1[t])
    assert_equal('nil',    h1[nil])
    assert_equal(nil,      h1['nil'])
    assert_equal(:default, h1['koala'])


  end

  def test_ASET # '[]='
    t = Time.now
    h = @@cls.new
    h[1]     = 'one'
    h[2]     = 'two'
    h[3]     = 'three'
    h[self]  = 'self'
    h[t]     = 'time'
    h[nil]   = 'nil'
    h['nil'] = nil
    assert_equal('one',   h[1])
    assert_equal('two',   h[2])
    assert_equal('three', h[3])
    assert_equal('self',  h[self])
    assert_equal('time',  h[t])
    assert_equal('nil',   h[nil])
    assert_equal(nil,     h['nil'])
    assert_equal(nil,     h['koala'])

    h[1] = 1
    h[nil] = 99
    h['nil'] = nil
    z = [1,2]
    h[z] = 256
    assert_equal(1,       h[1])
    assert_equal('two',   h[2])
    assert_equal('three', h[3])
    assert_equal('self',  h[self])
    assert_equal('time',  h[t])
    assert_equal(99,      h[nil])
    assert_equal(nil,     h['nil'])
    assert_equal(nil,     h['koala'])
    assert_equal(256,     h[z])
  end

  def test_EQUAL # '=='
    h1 = @@cls[ "a" => 1, "c" => 2 ]
    h2 = @@cls[ "a" => 1, "c" => 2, 7 => 35 ]
    h3 = @@cls[ "a" => 1, "c" => 2, 7 => 35 ]
    h4 = @@cls[ ]
    assert(h1 == h1)
    assert(h2 == h2)
    assert(h3 == h3)
    assert(h4 == h4)
    assert(!(h1 == h2))
    assert(h2 == h3)
    assert(!(h3 == h4))
  end

  def test_clear
    assert(@@h.size > 0)
    @@h.clear
    assert_equal(0, @@h.size)
    assert_nil(@@h[1])
  end

  def test_clone
    for taint in [ false, true ]
      for frozen in [ false, true ]
        a = @@h.clone
        a.taint  if taint
        a.freeze if frozen
        b = a.clone

        assert_equal(a, b)
        assert(a.id != b.id)
        assert_equal(a.frozen?, b.frozen?)
        assert_equal(a.tainted?, b.tainted?)
      end
    end
  end

  def test_default
    assert_nil(@@h.default)
    h = @@cls.new(:xyzzy)
    assert_equal(:xyzzy, h.default)
  end

  def test_default=
    assert_nil(@@h.default)
    @@h.default = :xyzzy
    assert_equal(:xyzzy, @@h.default)
  end

  def test_delete
    h1 = @@cls[ 1 => 'one', 2 => 'two', true => 'true' ]
    h2 = @@cls[ 1 => 'one', 2 => 'two' ]
    h3 = @@cls[ 2 => 'two' ]

    assert_equal('true', h1.delete(true))
    assert_equal(h2, h1)

    assert_equal('one', h1.delete(1))
    assert_equal(h3, h1)

    assert_equal('two', h1.delete(2))
    assert_equal(@@cls[], h1)

    assert_nil(h1.delete(99))
    assert_equal(@@cls[], h1)

    assert_equal('default 99', h1.delete(99) {|i| "default #{i}" })
  end

  def test_delete_if
    base = @@cls[ 1 => 'one', 2 => false, true => 'true', 'cat' => 99 ]
    h1   = @@cls[ 1 => 'one', 2 => false, true => 'true' ]
    h2   = @@cls[ 2 => false, 'cat' => 99 ]
    h3   = @@cls[ 2 => false ]

    h = base.dup
    assert_equal(h, h.delete_if { false })
    assert_equal(@@cls[], h.delete_if { true })

    h = base.dup
    assert_equal(h1, h.delete_if {|k,v| k.instance_of?(String) })
    assert_equal(h1, h)

    h = base.dup
    assert_equal(h2, h.delete_if {|k,v| v.instance_of?(String) })
    assert_equal(h2, h)

    h = base.dup
    assert_equal(h3, h.delete_if {|k,v| v })
    assert_equal(h3, h)
  end

  def test_dup
    for taint in [ false, true ]
      for frozen in [ false, true ]
        a = @@h.dup
        a.taint  if taint
        a.freeze if frozen
        b = a.dup

        assert_equal(a, b)
        assert(a.id != b.id)
        assert_equals(false, b.frozen?)
        assert_equals(a.tainted?, b.tainted?)
      end
    end
  end

  def test_each
    count = 0
    @@cls[].each { |k, v| count + 1 }
    assert_equal(0, count)

    h = @@h
    h.each do |k, v|
      assert_equal(v, h.delete(k))
    end
    assert_equal(@@cls[], h)
  end

  def test_each_key
    count = 0
    @@cls[].each_key { |k| count + 1 }
    assert_equal(0, count)

    h = @@h
    h.each_key do |k|
      h.delete(k)
    end
    assert_equal(@@cls[], h)
  end

  def test_each_pair
    count = 0
    @@cls[].each_pair { |k, v| count + 1 }
    assert_equal(0, count)

    h = @@h
    h.each_pair do |k, v|
      assert_equal(v, h.delete(k))
    end
    assert_equal(@@cls[], h)
  end

  def test_each_value
    res = []
    @@cls[].each_value { |v| res << v }
    assert_equal(0, [].length)

    @@h.each_value { |v| res << v }
    assert_equal(0, [].length)

    expected = []
    @@h.each { |k, v| expected << v }

    assert_equal([], expected - res)
    assert_equal([], res - expected)
  end

  def test_empty?
    assert(@@cls[].empty?)
    assert(!@@h.empty?)
  end

  def test_fetch
    assert_exception(IndexError) { @@cls[].fetch(1) }
    assert_exception(IndexError) { @@h.fetch('gumby') }
    assert_equal('gumbygumby',     @@h.fetch('gumby') {|k| k*2} )
    assert_equal('pokey',          @@h.fetch('gumby', 'pokey'))

    assert_equal('one', @@h.fetch(1))
    assert_equal(nil,   @@h.fetch('nil'))
    assert_equal('nil', @@h.fetch(nil))
  end


  def test_has_key?
    assert(!@@cls[].has_key?(1))
    assert(!@@cls[].has_key?(nil))
    assert(@@h.has_key?(nil))
    assert(@@h.has_key?(1))
    assert(!@@h.has_key?('gumby'))
  end

  def test_has_value?
    assert(!@@cls[].has_value?(1))
    assert(!@@cls[].has_value?(nil))
    assert(@@h.has_value?('one'))
    assert(@@h.has_value?(nil))
    assert(!@@h.has_value?('gumby'))
  end

  def test_include?
    assert(!@@cls[].include?(1))
    assert(!@@cls[].include?(nil))
    assert(@@h.include?(nil))
    assert(@@h.include?(1))
    assert(!@@h.include?('gumby'))
  end

  def test_index
    assert_equal(1,     @@h.index('one'))
    assert_equal(nil,   @@h.index('nil'))
    assert_equal('nil', @@h.index(nil))

    assert_equal(nil,   @@h.index('gumby'))
    assert_equal(nil,   @@cls[].index('gumby'))
  end

  Version.less_than("1.7.2") do
    def test_indexes
      generic_index_tester(:indexes)
    end
  
    def test_indices
      generic_index_tester(:indices)
    end
  end

  Version.greater_or_equal("1.7.2") do
    def test_select
      generic_index_tester(:select)
    end
  end

  def generic_index_tester(symbol)
    res = @@h.send symbol, *%w( dog cat horse ) 
    assert(res.length == 3)
    assert_equal([nil, nil, nil], res)

    res = @@h.send symbol
    assert(res.length == 0)

    res = @@h.send symbol, 3, 2, 1, nil 
    assert(res.length == 4)
    assert_equal(%w( three two one nil ), res)

    res = @@h.send symbol, 3, 99, 1, nil 
    assert(res.length == 4)
    assert_equal([ 'three', nil, 'one', 'nil' ], res)
  end


  def test_invert
    h = @@h.invert
    assert_equal(1, h['one'])
    assert_equal(true, h['true'])
    assert_equal(nil,  h['nil'])

    h.each do |k, v|
      assert(@@h.has_key?(v))    # not true in general, but works here
    end

    h = @@cls[ 'a' => 1, 'b' => 2, 'c' => 1].invert
    assert_equal(2, h.length)
    assert(h[1] == 'a' || h[1] == 'c')
    assert_equal('b', h[2])
  end

  def test_key?
    assert(!@@cls[].key?(1))
    assert(!@@cls[].key?(nil))
    assert(@@h.key?(nil))
    assert(@@h.key?(1))
    assert(!@@h.key?('gumby'))
  end

  def test_keys
    assert_equal([], @@cls[].keys)

    keys = @@h.keys
    expected = []
    @@h.each { |k, v| expected << k }
    assert_equal([], keys - expected)
    assert_equal([], expected - keys)
  end

  def test_length
    assert_equal(0, @@cls[].length)
    assert_equal(7, @@h.length)
  end

  def test_member?
    assert(!@@cls[].member?(1))
    assert(!@@cls[].member?(nil))
    assert(@@h.member?(nil))
    assert(@@h.member?(1))
    assert(!@@h.member?('gumby'))
  end

  def test_rehash
    a = [ "a", "b" ]
    c = [ "c", "d" ]
    h = @@cls[ a => 100, c => 300 ]
    assert_equal(100, h[a])
    a[0] = "z"
    assert_nil(h[a])
    h.rehash
    assert_equal(100, h[a])
  end

  def test_reject
    base = @@cls[ 1 => 'one', 2 => false, true => 'true', 'cat' => 99 ]
    h1   = @@cls[ 1 => 'one', 2 => false, true => 'true' ]
    h2   = @@cls[ 2 => false, 'cat' => 99 ]
    h3   = @@cls[ 2 => false ]

    h = base.dup
    assert_equal(h, h.reject { false })
    assert_equal(@@cls[], h.reject { true })

    h = base.dup
    assert_equal(h1, h.reject {|k,v| k.instance_of?(String) })

    assert_equal(h2, h.reject {|k,v| v.instance_of?(String) })

    assert_equal(h3, h.reject {|k,v| v })
    assert_equal(base, h)
  end

  def test_reject!
    base = @@cls[ 1 => 'one', 2 => false, true => 'true', 'cat' => 99 ]
    h1   = @@cls[ 1 => 'one', 2 => false, true => 'true' ]
    h2   = @@cls[ 2 => false, 'cat' => 99 ]
    h3   = @@cls[ 2 => false ]

    h = base.dup
    assert_equal(nil, h.reject! { false })
    assert_equal(@@cls[],  h.reject! { true })

    h = base.dup
    assert_equal(h1, h.reject! {|k,v| k.instance_of?(String) })
    assert_equal(h1, h)

    h = base.dup
    assert_equal(h2, h.reject! {|k,v| v.instance_of?(String) })
    assert_equal(h2, h)

    h = base.dup
    assert_equal(h3, h.reject! {|k,v| v })
    assert_equal(h3, h)
  end

  def test_replace
    h = @@cls[ 1 => 2, 3 => 4 ]
    h1 = h.replace(@@cls[ 9 => 8, 7 => 6 ])
    assert_equal(h, h1)
    assert_equal(8, h[9])
    assert_equal(6, h[7])
    assert_nil(h[1])
    assert_nil(h[2])
  end

  def test_shift
    h = @@h.dup
    
    @@h.length.times {
      k, v = h.shift
      assert(@@h.has_key?(k))
      assert_equal(@@h[k], v)
    }

    assert_equal(0, h.length)
  end

  def test_size
    assert_equal(0, @@cls[].length)
    assert_equal(7, @@h.length)
  end

  def test_sort
    h = @@cls[].sort
    assert_equal([], h)

    h = @@cls[ 1 => 1, 2 => 1 ].sort
    assert_equal([[1,1], [2,1]], h)

    h = @@cls[ 'cat' => 'feline', 'ass' => 'asinine', 'bee' => 'beeline' ]
    h1 = h.sort
    assert_equal([ %w(ass asinine), %w(bee beeline), %w(cat feline)], h1)
  end

  def test_store
    t = Time.now
    h = @@cls.new
    h.store(1, 'one')
    h.store(2, 'two')
    h.store(3, 'three')
    h.store(self, 'self')
    h.store(t,  'time')
    h.store(nil, 'nil')
    h.store('nil', nil)
    assert_equal('one',   h[1])
    assert_equal('two',   h[2])
    assert_equal('three', h[3])
    assert_equal('self',  h[self])
    assert_equal('time',  h[t])
    assert_equal('nil',   h[nil])
    assert_equal(nil,     h['nil'])
    assert_equal(nil,     h['koala'])

    h.store(1, 1)
    h.store(nil,  99)
    h.store('nil', nil)
    assert_equal(1,       h[1])
    assert_equal('two',   h[2])
    assert_equal('three', h[3])
    assert_equal('self',  h[self])
    assert_equal('time',  h[t])
    assert_equal(99,      h[nil])
    assert_equal(nil,     h['nil'])
    assert_equal(nil,     h['koala'])
  end

  def test_to_a
    assert_equal([], @@cls[].to_a)
    assert_equal([[1,2]], @@cls[ 1=>2 ].to_a)
    a = @@cls[ 1=>2, 3=>4, 5=>6 ].to_a
    assert_equal([1,2], a.delete([1,2]))
    assert_equal([3,4], a.delete([3,4]))
    assert_equal([5,6], a.delete([5,6]))
    assert_equal(0, a.length)
  end

  def test_to_hash
    h = @@h.to_hash
    assert_equal(@@h, h)
  end

  def test_to_s
    h = @@cls[ 1 => 2, "cat" => "dog", 1.5 => :fred ]
    assert_equal(h.to_a.join, h.to_s)
    $, = ":"
    assert_equal(h.to_a.join, h.to_s)
    h = @@cls[]
    assert_equal(h.to_a.join, h.to_s)
    $, = nil
  end

  def test_update
    h1 = @@cls[ 1 => 2, 2 => 3, 3 => 4 ]
    h2 = @@cls[ 2 => 'two', 4 => 'four' ]

    ha = @@cls[ 1 => 2, 2 => 'two', 3 => 4, 4 => 'four' ]
    hb = @@cls[ 1 => 2, 2 => 3, 3 => 4, 4 => 'four' ]

    assert_equal(ha, h1.update(h2))
    assert_equal(ha, h1)

    h1 = @@cls[ 1 => 2, 2 => 3, 3 => 4 ]
    h2 = @@cls[ 2 => 'two', 4 => 'four' ]

    assert_equal(hb, h2.update(h1))
    assert_equal(hb, h2)
  end

  def test_value?
    assert(!@@cls[].value?(1))
    assert(!@@cls[].value?(nil))
    assert(@@h.value?(nil))
    assert(@@h.value?('one'))
    assert(!@@h.value?('gumby'))
  end

  def test_values
    assert_equal([], @@cls[].values)

    vals = @@h.values
    expected = []
    @@h.each { |k, v| expected << v }
    assert_equal([], vals - expected)
    assert_equal([], expected - vals)
  end

end
@


1.5
log
@Removed duplication in indexes/indeces tests to prepare for #select test.
@
text
@d315 8
a322 2
  def test_indexes
    generic_index_tester(:indexes)
d325 4
a328 2
  def test_indices
    generic_index_tester(:indices)
@


1.4
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d316 2
a317 3
    res = @@h.indexes( *%w( dog cat horse ) )
    assert(res.length == 3)
    assert_equal([nil, nil, nil], res)
d319 2
a320 10
    res = @@h.indexes()
    assert(res.length == 0)

    res = @@h.indexes( 3, 2, 1, nil )
    assert(res.length == 4)
    assert_equal(%w( three two one nil ), res)

    res = @@h.indexes( 3, 99, 1, nil )
    assert(res.length == 4)
    assert_equal([ 'three', nil, 'one', 'nil' ], res)
d323 2
a324 2
  def test_indices
    res = @@h.indices( *%w( dog cat horse ) )
d328 1
a328 1
    res = @@h.indices()
d331 1
a331 1
    res = @@h.indices( 3, 2, 1, nil )
d335 1
a335 1
    res = @@h.indices( 3, 99, 1, nil )
d339 1
@


1.3
log
@Add test for Bignum marshaling
@
text
@d93 2
d103 1
@


1.2
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@a0 16
#!/usr/bin/env ruby
=begin

	MetaRuby 0.4
	file: Test cases for Hash

	This package is Copyright (c) 2001 by Mathieu Bouchard
	This file is Copyright (c) 2000,2001 by Dave Thomas
	Licensed under the same license as Ruby.

	Adapted by Mathieu Bouchard

	Could be merged back with Rubicon eventually

=end

@


1.1
log
@Add Matju's changes to TestHash to create HashBase

Also experiment with a new style require that would let the individual files
be run from anywhere
@
text
@d17 1
a17 2
$: << File.dirname($0) << File.join(File.dirname($0), "..")
require "rubicon.rb"
@

