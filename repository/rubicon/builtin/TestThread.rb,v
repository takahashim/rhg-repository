head	1.21;
access;
symbols
	V0_3_2:1.19
	V0_1_4:1.10
	V0_1_3:1.10
	V0_1_2:1.10
	V0_1_1:1.10
	V0_1:1.10
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.21
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.22.12.08.32;	author nobu;	state Exp;
branches;
next	1.19;

1.19
date	2001.11.10.04.53.16;	author dave;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.09.06.10.57;	author dave;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.09.05.46.17;	author dave;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.04.15.19.05;	author dave;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.03.04.15.17;	author dave;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.02.00.17.06;	author dave;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.25.05.25.28;	author dave;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.14.02.40.12;	author dave;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.01.03.12.40;	author dave;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.30.16.03.01;	author dave;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.23.19.31.57;	author dave;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.17.05.55.17;	author dave;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.09.02.30.01;	author dave;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.09.02.28.56;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.09.01.09.33;	author andy;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.08.21.24.01;	author andy;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.08.20.32.05;	author andy;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.21
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestThread < Rubicon::TestCase

  def setup
    puts "******************" if Thread.critical
  end

  def thread_control
    @@ready = false
    yield
    @@ready = false
  end

  def _signal
    @@ready = true
  end

  def _wait
    sleep .1 while !@@ready
    @@ready = false
  end

  class SubThread < Thread
    def initialize
      @@wasCalled = true
      super
    end
    def initCalled?
      @@wasCalled
    end
  end
  
  def teardown
    Thread.list.each do |t|
      if t != Thread.main
        t.kill
      end
    end
  end

  def test_AREF # '[]'
    t = Thread.current
    t2 = Thread.new { sleep 60 }

    t[:test] = "alpha"
    t2[:test] = "gamma"
    assert_equals(t[:test], "alpha")
    assert_equals(t2[:test], "gamma")
    t["test"] = "bravo"
    t2["test"] = "delta"
    assert_equals(t["test"], "bravo")
    assert_equals(t2["test"], "delta")
    assert(t[:none].nil?)
    assert(t["none"].nil?)
    assert(t2[:none].nil?)
    assert(t2["none"].nil?)
  end

  def test_ASET # '[]='
    t = Thread.current
    t2 = Thread.new { sleep 60 }

    t[:test] = "alpha"
    t2[:test] = "gamma"
    assert_equals(t[:test], "alpha")
    assert_equals(t2[:test], "gamma")
    t["test"] = "bravo"
    t2["test"] = "delta"
    assert_equals(t["test"], "bravo")
    assert_equals(t2["test"], "delta")
    assert(t[:none].nil?)
    assert(t["none"].nil?)
    assert(t2[:none].nil?)
    assert(t2["none"].nil?)
  end

  def test_abort_on_exception
    # Test default
    assert_equal(false, Thread.current.abort_on_exception)
    Thread.current.abort_on_exception = true
    assert_equal(true, Thread.current.abort_on_exception)
    Thread.current.abort_on_exception = false
    assert_equal(false, Thread.current.abort_on_exception)
  end

  class MyException < Exception; end

  def test_abort_on_exception=()
    save_stderr = nil
    begin
      begin
        t = Thread.new do
          raise MyException, "boom"
        end
        Thread.pass
        assert(true)
      rescue MyException
        assert_fail("Thread exception propogated to main thread")
      end

      msg = nil
      begin
        t = Thread.new do
          Thread.current.abort_on_exception = true
          save_stderr = $stderr.dup
          $stderr.reopen(open("xyzzy.dat", "w"))
          raise MyException, "boom"
        end
        Thread.pass while t.alive?
        assert_fail("Exception should have interrupted main thread")
      rescue SystemExit
        msg = open("xyzzy.dat") {|f| f.gets}
      ensure
        $stderr.reopen(save_stderr)
        File.unlink("xyzzy.dat")
      end
      assert_match(msg, /\(TestThread::MyException\)$/)
    rescue Exception
      assert_fail($!.to_s)
    end
  end

  def test_alive?
    t1 = t2 = nil
    thread_control do
      t1 = Thread.new { _signal; Thread.stop }
      _wait
    end
    thread_control do
      t2 = Thread.new { _signal; sleep 60 }
      _wait
    end
    t3 = Thread.new {}
    t3.join
    assert_equals(true,Thread.current.alive?)
    assert_equals(true,t1.alive?)
    assert_equals(true,t2.alive?)
    assert_equals(false,t3.alive?)
  end

  def test_exit
    t = Thread.new { Thread.current.exit }
    t.join
    assert_equals(t,t.exit)
    assert_equals(false,t.alive?)
  end

  def test_join
    sum = 0
    t = Thread.new do
      5.times { sum += 1; sleep .1 }
    end
    assert(sum != 5)
    t.join
    assert_equal(5, sum)

    sum = 0
    t = Thread.new do
      5.times { sum += 1; sleep .1 }
    end
    t.join
    assert_equal(5, sum)

    # if you join a thread, it's exceptions become ours
    t = Thread.new do
      Thread.pass
      raise "boom"
    end

    begin
      t.join
    rescue Exception => e
      assert_equals("boom", e.message)
    end
  end

  def test_key?
    t = Thread.current
    t2 = Thread.new { sleep 60 }

    t[:test] = "alpha"
    t2[:test] = "gamma"
    assert_equals(true,t.key?(:test))
    assert_equals(true,t2.key?(:test))
    assert_equals(false,t.key?(:none))
    assert_equals(false,t2.key?(:none))
  end

  def test_kill
    t = Thread.new { Thread.current.kill }
    t.join
    assert_equals(t, t.kill)
    assert_equals(false, t.alive?)
  end

  def test_priority
    assert_equals(0, Thread.current.priority)
  end

  def test_priority=()
    Cygwin.only do
      assert_fail("Thread priorities seem broken under Cygwin")
      return
    end

    c1 = 0
    c2 = 0
    my_priority = Thread.current.priority
    begin
      Thread.current.priority = 10
      a = Thread.new { Thread.stop; loop { c1 += 1 }}
      b = Thread.new { Thread.stop; loop { c2 += 1 }}
      a.priority = my_priority - 2
      b.priority = my_priority - 1
      1 until a.stop? and b.stop?
      a.wakeup
      b.wakeup
      sleep 1
      Thread.critical = true
      begin
	assert (c2 > c1)
	c1 = 0
	c2 = 0
	a.priority = my_priority - 1
	b.priority = my_priority - 2
	Thread.critical = false
	sleep 1 
	Thread.critical = true
	assert (c1 > c2)
	a.kill
	b.kill
      ensure
	Thread.critical = false
      end
    ensure
      Thread.current.priority = my_priority
    end
  end

  def test_raise
    madeit = false
    t = nil

    thread_control do
      t = Thread.new do
	_signal
	sleep 5
	madeit = true 
      end
      _wait
    end
    t.raise "Gotcha"
    assert(!t.alive?)
    assert_equals(false,madeit)
  end

  def test_run
    wokeup = false
    t1 = nil
    thread_control do
      t1 = Thread.new { _signal; Thread.stop; wokeup = true ; _signal}
      _wait
      assert_equals(false, wokeup)
      t1.run
      _wait
      assert_equals(true, wokeup)
    end

    wokeup = false
    thread_control do
      t1 = Thread.new { _signal; Thread.stop; _signal; wokeup = true }
      _wait

      assert_equals(false, wokeup)
      Thread.critical = true
      t1.run
      assert_equals(false, wokeup)
      Thread.critical = false
      t1.run
      _wait
      t1.join
      assert_equals(true, wokeup)
    end
  end

  def test_safe_level
    t = Thread.new do
      assert_equals(0, Thread.current.safe_level)
      $SAFE=1
      assert_equals(1, Thread.current.safe_level)
      $SAFE=2
      assert_equals(2, Thread.current.safe_level)
      $SAFE=3
      assert_equals(3, Thread.current.safe_level)
      $SAFE=4
      assert_equals(4, Thread.current.safe_level)
      Thread.pass
    end
    t.join rescue nil
    assert_equals(0, Thread.current.safe_level)
    assert_equals(4, t.safe_level)
  end

  def test_status
    a = b = c = nil

    thread_control do
      a = Thread.new { _signal; raise "dead" }
      _wait
    end
    
    thread_control do
      b = Thread.new { _signal; Thread.stop }
      _wait
    end

    thread_control do
      c = Thread.new { _signal;  }
      _wait
    end

    assert_equals("run",   Thread.current.status)
    assert_equals(nil,     a.status)
    assert_equals("sleep", b.status)
    assert_equals(false,   c.status)
  end

  def test_stop?
    a = nil
    thread_control do
      a = Thread.new { _signal; Thread.stop }
      _wait
    end
    assert_equals(true, a.stop?)
    assert_equals(false, Thread.current.stop?)
  end

  def test_value
    t=[]
    10.times { |i|
      t[i] = Thread.new { i }
    }
    result = 0
    10.times { |i|
      result += t[i].value
    }
    assert_equals(45, result)
  end

  def test_wakeup
    madeit = false
    t = Thread.new { Thread.stop; madeit = true }
    assert_equals(false, madeit)
    Thread.pass while t.status != "sleep"
    t.wakeup
    assert_equals(false, madeit) # Hasn't run it yet
    t.run
    t.join
    assert_equals(true, madeit)
  end

  def test_s_abort_on_exception
    assert_equal(false,Thread.abort_on_exception)
    Thread.abort_on_exception = true
    assert_equal(true,Thread.abort_on_exception)
    Thread.abort_on_exception = false
    assert_equal(false,Thread.abort_on_exception)
  end

  def test_s_abort_on_exception=
    save_stderr = nil

    begin
      Thread.new do
	raise "boom"
      end
      Thread.pass
      assert(true)
    rescue Exception
      fail("Thread exception propagated to main thread")
    end

    msg = nil
    begin
      Thread.abort_on_exception = true
      t = Thread.new do
	save_stderr = $stderr.dup
	$stderr.reopen(open("xyzzy.dat", "w"))
	raise MyException, "boom"
      end
      Thread.pass while t.alive?
      fail("Exception should have interrupted main thread")
    rescue SystemExit
      msg = open("xyzzy.dat") {|f| f.gets}
    ensure
      Thread.abort_on_exception = false
      $stderr.reopen(save_stderr)
      File.unlink("xyzzy.dat")
    end
    assert_match(msg, /\(TestThread::MyException\)$/)
  end

  def test_s_critical
    assert_equal(false,Thread.critical)
    Thread.critical = true
    assert_equal(true,Thread.critical)
    Thread.critical = false
    assert_equal(false,Thread.critical)
  end

  def test_s_critical=
    count = 0
    a = nil
    thread_control do
      a = Thread.new { _signal; loop { count += 1; Thread.pass }}
      _wait
    end

    Thread.critical = true
    saved = count # Fixnum, will copy the value
    10000.times { |i| Math.sin(i) ** Math.tan(i/2) }
    assert_equal(saved, count)

    Thread.critical = false
    10000.times { |i| Math.sin(i) ** Math.tan(i/2) }
    assert(saved != count)
  end

  def test_s_current
    t = nil
    thread_control do
      t = Thread.new { _signal; Thread.stop }
      _wait
    end
    assert(Thread.current != t)
  end

  def test_s_exit
    t = Thread.new { Thread.exit }
    t.join
    assert_equals(t, t.exit)
    assert_equals(false, t.alive?)
    IO.popen("#$interpreter -e 'Thread.exit; puts 123'") do |p|
      assert_nil(p.gets)
    end
    assert_equals(0, $?)
  end

  def test_s_fork
    madeit = false
    t = Thread.fork { madeit = true }
    t.join
    assert_equals(true,madeit)
  end

  def test_s_kill
    count = 0
    t = Thread.new { loop { Thread.pass; count += 1 }}
    sleep .1
    saved = count
    Thread.kill(t)
    sleep .1
    t.join
    assert_equals(saved, count)
  end

  def test_s_list
    t = []
    100.times { t << Thread.new { Thread.stop } }
    assert_equals(101, Thread.list.length)
    t.each { |i| i.run; i.join }
    assert_equals(1, Thread.list.length)
  end

  def test_s_main
    t = nil
    thread_control do
      t = Thread.new { _signal; Thread.stop }
      _wait
    end
    assert_equals(Thread.main, Thread.current)
    assert(Thread.main != t)
  end

  def test_s_new
    madeit = false
    t = Thread.new { madeit = true }
    t.join
    assert_equals(true,madeit)
  end

  def test_s_pass
    madeit = false
    t = Thread.new { Thread.pass; madeit = true }
    t.join
    assert_equals(true, madeit)
  end

  def test_s_start
    t = nil
    thread_control do
      t = SubThread.new { _signal; Thread.stop }
      _wait
    end
    assert_equals(true, t.initCalled?)

    thread_control do
      t = SubThread.start { _signal; Thread.stop }
      _wait
    end
    assert_equals(nil, t.initCalled?)
  end

  def test_s_stop
    t = nil
    thread_control do
      t = Thread.new { Thread.critical = true; _signal; Thread.stop }
      _wait
    end
    assert_equals(false,   Thread.critical)
    assert_equals("sleep", t.status)
  end

  if Thread.instance_method(:join).arity != 0
    def test_timeout
      start = Time.now
      t = Thread.new do
	sleep 3
      end
      timeout = proc do |i|
	s = Time.now
	assert_nil(t.join(i))
	e = Time.now
	assert_equal(true, t.alive?)
	e - s
      end
      assert(timeout[0] < 0.1)
      i = timeout[1]
      assert(0.5 < i && i < 1.5)
      i = timeout[0.5]
      assert(0.4 < i && i < 0.6)
      assert_equal(t, t.join(nil))
      i = Time.now - start
      assert(2.5 < i && i < 3.5)
    ensure
      t.kill
    end
  end

end

Rubicon::handleTests(TestThread) if $0 == __FILE__
@


1.20
log
@* builtin/TestThread.rb (TestThread::test_abort_on_exception): get
  rid of error message sent to stderr, and confirm whether exact
  exception was raised from the message.

* builtin/TestThread.rb (TestThread::test_s_abort_on_exception):
  ditto.

* builtin/TestThread.rb (TestThread::test_safe_level): not depend
  on context switch order.

* builtin/TestThread.rb (TestThread::MyException::test_timeout):
  added for optional argument to Thread#join.
@
text
@d424 1
a424 1
    100000.times { |i| Math.sin(i) ** Math.tan(i/2) }
d428 1
a428 1
    100000.times { |i| Math.sin(i) ** Math.tan(i/2) }
@


1.19
log
@Give up on abort_on_exception for a while.

TestScope had the wrong Ruby version dependency.
@
text
@a91 2
    skipping("Can't find a test for all platforms")
    return
d103 2
a104 1
      
d106 1
a106 1
        Thread.new do
d108 2
a109 2
          save_stderr = $stderr
          $stderr = nil
d112 1
a112 1
        Thread.pass
d114 2
a115 2
      rescue TestThread::MyException
        assert(true)
d117 2
a118 1
        $stderr = save_stderr
d120 1
d302 1
a304 1
    t.kill
d380 1
d386 1
d389 4
a392 4
      Thread.new do
	save_stderr = $stderr
	$stderr = nil
	raise "boom"
d394 1
d396 2
a397 2
    rescue Exception
      assert(true)
d400 2
a401 1
      $stderr = save_stderr
d403 1
d525 26
@


1.18
log
@Give up on abort_on_exception=.

Handle path separator differences between mswin and cygwin.
@
text
@d202 6
a207 1
  def test_priority=
d210 1
a210 9
    a = Thread.new { Thread.stop; loop { c1 += 1 }}
    b = Thread.new { Thread.stop; loop { c2 += 1 }}
    a.priority = -2
    b.priority = -1
    1 until a.stop? and b.stop?
    a.wakeup
    b.wakeup
    sleep 1
    Thread.critical = true
d212 9
a220 7
      assert (c2 > c1)
      c1 = 0
      c2 = 0
      a.priority = -1
      b.priority = -2
      Thread.critical = false
      sleep 1 
d222 15
a236 3
      assert (c1 > c2)
      a.kill
      b.kill
d238 1
a238 1
      Thread.critical = false
@


1.17
log
@There seems to be an interpreter bug, but it' proving slippery to find.

For now, we'll just protect all of abort_on_exception= and hope for
the best.
@
text
@d92 2
@


1.16
log
@Continue makig the tests Windows-agnostic. Include patch from Masaki
Suketa which fixes some bad tests (assert(...) being used in place
of assert_equals(...))
@
text
@d89 2
a92 1

d94 8
a101 2
      Thread.new do
	raise "boom"
d103 14
a116 11
      assert(true)
    rescue Exception
      fail("Thread exception propogated to main thread")
    end

    begin
      Thread.new do
	Thread.current.abort_on_exception = true
	save_stderr = $stderr
	$stderr = nil
	raise "boom"
a117 1
      fail("Exception should have interrupted main thread")
d119 1
a119 3
      assert(true)
    ensure
      $stderr = save_stderr
@


1.15
log
@Win32 changes to Kernel, etc... Thread is incomplete: we'll do something of
a rewrite under Linux.
@
text
@d90 11
a100 1
    tf = Tempfile.new("tf")
d102 9
a110 28
      tf.puts %{
	$stderr.close # Don't want to see the mess.
	t = Thread.new {
	  Thread.current.abort_on_exception = true
	  raise "Error"
	}
	t.join
	sleep 5
	exit 1}
      tf.close
      IO.popen("#$interpreter #{tf.path}").close
      assert_equal(0, $?) # Relies on abort doing exit(0)

      tf.open
      tf.puts %{
	$stderr.puts "start"
	Thread.current.abort_on_exception = false
	t = Thread.new {
	  $stderr.puts "Raising"
	  raise "Error"
	}
	$stderr.puts "sleeping"
	sleep .5
	$stderr.puts "exiting"
	exit 1}
      tf.close
      IO.popen("#$interpreter #{tf.path}").close
      assert_equal(1, $?)
d112 1
a112 1
      tf.close(true)
d141 4
a144 13
  def try_join(dojoin=false)
    a = []
    t = []
    10.times {|i|
      t[i] = Thread.new { 
        10.times {|j|
          a << "#{i}-#{j}"
          sleep .01
        }
      }
    }
    if (dojoin)
      10.times {|i| t[i].join }
d146 3
a148 2
    a.length
  end
d150 6
a155 1
  def test_join
d157 4
a160 2
    result = runChild do
      exit try_join
a161 1
    assert(result != 100)
d163 4
a166 2
    result = runChild do
      exit try_join(true)
a167 3
    assert_equals(100, result)


d200 1
d203 1
a203 1
    10000.times { Thread.pass}
d213 1
a222 1
    puts Thread.list
d269 2
a270 3
    result = runChild do
      $stderr.close
      exit 1 if 0 != Thread.current.safe_level
d272 12
a283 4
      exit 1 if 1 != Thread.current.safe_level
      exit 0
    end
    assert_equals(0, result)
d353 3
a355 1
    result = runChild do
d357 1
a357 6
        $stderr.close # Don't want to see the mess.
        Thread.abort_on_exception = true
        thread_control do
          Thread.new { _signal; raise "Error" }
          _wait
        end
d359 18
a376 2
      sleep 5
      exit 1
a377 1
    assert_equal(0, result) # Relies on abort doing exit(0)
a401 2
    p saved
    p count
a402 2
    p saved
    p count
d420 2
a421 3
    result = runChild do
      Thread.exit
      exit(1)
d423 1
a423 1
    assert_equals(0,result)
@


1.14
log
@Start adding MsWin32 support
@
text
@d37 1
a37 1
    Thread.list.each {|t|
d41 1
a41 1
    }
d82 1
a82 1
    assert_equal(false,Thread.current.abort_on_exception)
d84 1
a84 1
    assert_equal(true,Thread.current.abort_on_exception)
d86 1
a86 1
    assert_equal(false,Thread.current.abort_on_exception)
d89 33
a121 11
  def test_abort_on_exception=
    result = runChild do
      Thread.new { 
        $stderr.close # Don't want to see the mess.
        Thread.new {
          Thread.current.abort_on_exception = true
          raise "Error"
        }
      }
      sleep 5
      exit 1
a122 1
    assert_equal(0,result) # Relies on abort doing exit(0)
@


1.13
log
@Added many patches from Nobu Nakad for 1.7 features (plus some bug fixes)
@
text
@d7 4
d176 2
a177 2
    assert_equals(t,t.kill)
    assert_equals(false,t.alive?)
d187 2
a188 2
    a = Thread.new { loop { c1 += 1 }}
    b = Thread.new { loop { c2 += 1 }}
d191 3
a193 1
    sleep 1
d195 14
a208 10
    assert (c2 > c1)
    c1 = 0
    c2 = 0
    a.priority = -1
    b.priority = -2
    Thread.critical = false
    sleep 1 
    assert (c1 > c2)
    a.kill
    b.kill
d212 1
d215 1
d217 5
a221 1
      t = Thread.new { _signal; sleep 60; madeit = true }
d363 1
a363 1
      a = Thread.new { _signal; loop { count += 1; sleep .01 }}
d369 1
a369 2
    foo = 0
    10000.times { |i| foo += Math.sin(i) ** Math.tan(i/2) }
d371 1
d373 5
a377 1
    10000.times { |i| foo += Math.sin(i) ** Math.tan(i/2) }
d411 1
a411 1
    t = Thread.new { loop { count += 1 }}
d417 1
a417 1
    assert_equals(saved,count)
@


1.12
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d237 1
@


1.11
log
@Many contributions from members of the ml
@
text
@d1 2
a2 1
require '../rubicon'
@


1.10
log
@Track the language
@
text
@d216 1
a216 1
      t1 = Thread.new { _signal; Thread.stop; wokeup = true }
d218 4
a222 4

    assert_equals(false, wokeup)
    t1.run
    assert_equals(true, wokeup)
@


1.9
log
@Fix a race condition
@
text
@d265 1
a265 1
      c = Thread.new { _signal; Thread.exit }
d269 2
a270 2
    assert_equals("run", Thread.current.status)
    assert_equals(nil, a.status)
d272 1
@


1.8
log
@Archive save
@
text
@d399 4
a402 4
    100.times { |i| t[i] = Thread.new { sleep 1 } }
    assert_equals(101,Thread.list.length)
    100.times { |i| t[i].join }
    assert_equals(1,Thread.list.length)
@


1.7
log
@Various fixes
@
text
@d6 15
a30 15
  #
  # Signal
  #
  def s
    $spinlock = true
  end
  
  #
  # Wait
  #
  def w
    sleep .1 while !$spinlock
    $spinlock = false
  end

d85 1
a85 1
    result = runChild { 
d95 1
a95 1
    }
d100 9
a108 4
    t1 = Thread.new { s; Thread.stop }
    w
    t2 = Thread.new { s; sleep 60 }
    w
d143 1
a143 1
    result = runChild {
d145 1
a145 1
    }
d148 1
a148 1
    result = runChild {
d150 1
a150 1
    }
d202 5
a206 2
    t = Thread.new { s; sleep 60; madeit = true }
    w
d214 6
a219 2
    t1 = Thread.new { s; Thread.stop; wokeup = true }
    w
d225 13
a237 9
    t1 = Thread.new { s; Thread.stop; wokeup = true }
    w
    assert_equals(false, wokeup)
    Thread.critical = true
    t1.run
    assert_equals(false, wokeup)
    Thread.critical = false
    t1.run
    assert_equals(true, wokeup)
d241 1
a241 1
    result = runChild {
d247 1
a247 1
    }
d252 17
a268 6
    a = Thread.new { s; raise "dead" }
    w
    b = Thread.new { s; Thread.stop }
    w
    c = Thread.new { s; Thread.exit }
    w
d275 5
a279 2
    a = Thread.new { s; Thread.stop }
    w
d298 1
a298 2
    t = Thread.new { s; Thread.stop; madeit = true }
    w
d300 1
d304 1
d317 2
a318 2
    result = runChild { 
      Thread.new { 
d321 5
a325 3
        Thread.new { s; raise "Error" }
        w
      }
d328 2
a329 2
    }
    assert_equal(0,result) # Relies on abort doing exit(0)
d342 6
a347 2
    a = Thread.new { s; loop { count += 1; sleep .01 }}
    w
d359 5
a363 2
    t = Thread.new { s; Thread.stop }
    w
d370 3
a372 3
    assert_equals(t,t.exit)
    assert_equals(false,t.alive?)
    result = runChild {
d375 1
a375 1
    }
d406 5
a410 2
    t = Thread.new { s; Thread.stop }
    w
d424 1
a424 3
    t = Thread.new { s; Thread.pass; madeit = true }
    w
    assert_equals(false, madeit)
d430 12
a441 6
    t = SubThread.new { s; Thread.stop }
    w
    assert_equals(true,t.initCalled?)
    t = SubThread.start { s; Thread.stop }
    w
    assert_equals(nil,t.initCalled?)
d445 7
a451 4
    t = Thread.new { s; Thread.critical = true; Thread.stop }
    w
    assert_equals(false,Thread.critical)
    assert_equals("sleep",t.status)
@


1.6
log
@And add second tet
@
text
@d3 18
a20 4
class SubThread < Thread
  def initialize
    @@wasCalled = true
    super
d22 7
a28 2
  def initCalled?
    @@wasCalled
a29 18
end

#
# Signal
#
def s
  $spinlock = true
end

#
# Wait
#
def w
  sleep .1 while !$spinlock
  $spinlock = false
end

class TestThread < Rubicon::TestCase
@


1.5
log
@Fix prioriy test
@
text
@d180 8
d189 1
a189 1
    assert (c2 > c1)
@


1.4
log
@Added spinlocks; Priorities still messed up.
@
text
@a173 1
    assert_fail("unimplemented")
d178 2
a179 1
    b.priority = 99999
@


1.3
log
@Added join all
@
text
@d13 15
d99 4
a102 2
    t1 = Thread.new { Thread.stop }
    t2 = Thread.new { sleep 60 }
a170 1
    assert_fail("unimplemented")
d175 9
d188 2
a189 1
    t = Thread.new { sleep 60; madeit = true }
d197 3
a199 2
    t1 = Thread.new { Thread.stop; wokeup = true }
    assert_equals(false,wokeup)
d201 1
a201 1
    assert_equals(true,wokeup)
d204 3
a206 2
    t1 = Thread.new { Thread.stop; wokeup = true }
    assert_equals(false,wokeup)
d209 1
a209 1
    assert_equals(false,wokeup)
d212 1
a212 1
    assert_equals(true,wokeup)
a214 3
  #
  # Just do an exit, don't be clever.
  #
d218 1
a218 1
      assert_equals(0, Thread.current.safe_level)
d220 2
a221 2
      assert_equals(1, Thread.current.safe_level)
      exit 23
d223 1
a223 1
    assert_equals(23,result)
d227 6
a232 3
    a = Thread.new { raise "dead" }
    b = Thread.new { Thread.stop }
    c = Thread.new { Thread.exit }
a235 1
    assert_equals("run", c.status)
d239 2
a240 1
    a = Thread.new { Thread.stop }
d259 2
a260 1
    t = Thread.new { Thread.stop; madeit = true }
d281 2
a282 1
        Thread.new { raise "Error" }
d300 2
a301 1
    a = Thread.new { loop { count += 1; sleep .01 }}
d313 2
a314 1
    t = Thread.new { Thread.stop }
d357 2
a358 1
    t = Thread.new { Thread.stop }
d372 2
a373 1
    t = Thread.new { Thread.pass; madeit = true }
d380 2
a381 1
    t = SubThread.new { Thread.stop }
d383 2
a384 1
    t = SubThread.start { Thread.stop }
d389 2
a390 1
    t = Thread.new { Thread.critical = true; Thread.stop }
@


1.2
log
@Finished.  Took forever, wasn't that big. *sigh*.
@
text
@d15 8
d187 3
@


1.1
log
@Initial revision
@
text
@d3 9
d16 15
a30 1
    assert_fail("untested")
d34 15
a48 1
    assert_fail("untested")
d52 6
a57 1
    assert_fail("untested")
d61 12
a72 1
    assert_fail("untested")
d76 8
a83 1
    assert_fail("untested")
d87 21
a107 1
    assert_fail("untested")
d110 12
a121 3
  def test_inspect
    assert_fail("untested")
  end
a122 2
  def test_join
    assert_fail("untested")
d126 9
a134 1
    assert_fail("untested")
d138 4
a141 1
    assert_fail("untested")
d145 2
a146 1
    assert_fail("untested")
d150 1
a150 1
    assert_fail("untested")
d154 5
a158 1
    assert_fail("untested")
d162 15
a176 1
    assert_fail("untested")
d180 8
a187 1
    assert_fail("untested")
d191 7
a197 1
    assert_fail("untested")
d201 3
a203 1
    assert_fail("untested")
d207 9
a215 1
    assert_fail("untested")
d219 7
a225 1
    assert_fail("untested")
d229 5
a233 1
    assert_fail("untested")
d237 10
a246 1
    assert_fail("untested")
d250 5
a254 1
    assert_fail("untested")
d258 10
a267 1
    assert_fail("untested")
d271 2
a272 1
    assert_fail("untested")
d276 9
a284 1
    assert_fail("untested")
d288 4
a291 1
    assert_fail("untested")
d295 8
a302 1
    assert_fail("untested")
d306 5
a310 1
    assert_fail("untested")
d314 3
a316 1
    assert_fail("untested")
d320 4
a323 1
    assert_fail("untested")
d327 5
a331 1
    assert_fail("untested")
d335 4
a338 1
    assert_fail("untested")
d342 3
a344 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
