head	1.4;
access;
symbols
	V0_3_2:1.4
	V0_1_4:1.3
	V0_1_3:1.3
	V0_1_2:1.3
	V0_1_1:1.3
	V0_1:1.3
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.03.20.42;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.14.02.57.45;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestMatchData < Rubicon::TestCase

  def setup
    @@m = /(.)(.)(\d+)(\d)/.match("THX1138.")
  end
  
  def test_AREF # '[]'
    assert_equal("HX1138",      @@m[0])
    assert_equal(%w( H X ),     @@m[1, 2])
    assert_equal(%w( H X 113 ), @@m[1..3])
    assert_equal(%w( X 113 ),   @@m[-3, 2])
  end

  def test_begin
    assert_equal(1, @@m.begin(0))
    assert_equal(2, @@m.begin(2))
  end

  def test_end
    assert_equal(7, @@m.end(0))
    assert_equal(3, @@m.end(2))
  end

  def test_length
    assert_equal(5, @@m.length)
  end

  def test_offset
    assert_equal([1,7], @@m.offset(0))
    assert_equal([6,7], @@m.offset(4))
  end

  def test_post_match
    assert_equal(".", @@m.post_match)
  end

  def test_pre_match
    assert_equal("T", @@m.pre_match)
  end

  def test_size
    assert_equal(5, @@m.size)
  end

  def test_string
    assert_equal("THX1138.", @@m.string)
    assert(@@m.string.frozen?)
  end

  def test_to_a
    assert_equal(%w( HX1138 H X 113 8 ), @@m.to_a)
  end

  def test_to_s
    assert_equal("HX1138", @@m.to_s)
  end

end

Rubicon::handleTests(TestMatchData) if $0 == __FILE__
@


1.3
log
@Added Method
@
text
@d1 2
a2 1
require '../rubicon'
@


1.2
log
@Add MatchData
@
text
@d8 2
a9 2
    end

a14 1

@


1.1
log
@Initial revision
@
text
@d6 4
d11 5
a15 1
    assert_fail("untested")
d19 2
a20 5
    assert_fail("untested")
  end

  def test_clone
    assert_fail("untested")
d24 2
a25 5
    assert_fail("untested")
  end

  def test_inspect
    assert_fail("untested")
d29 1
a29 1
    assert_fail("untested")
d33 2
a34 1
    assert_fail("untested")
d38 1
a38 1
    assert_fail("untested")
d42 1
a42 1
    assert_fail("untested")
d46 1
a46 1
    assert_fail("untested")
d50 2
a51 1
    assert_fail("untested")
d55 1
a55 1
    assert_fail("untested")
d59 1
a59 1
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
