head	1.4;
access;
symbols
	V0_3_2:1.3
	V0_1_4:1.2
	V0_1_3:1.2
	V0_1_2:1.2
	V0_1_1:1.2
	V0_1:1.2
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.07.08.00.23;	author matz;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.06.16.32.07;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* replace "type" by "class" since Object#type is deprecated in
  1.7.3.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestException < Rubicon::TestCase

  MSG = "duck"

  def test_s_exception
    e = Exception.exception
    assert_equal(Exception, e.class)

    e = Exception.exception(MSG)
    assert_equal(MSG, e.message)
  end

  def test_backtrace
    assert_nil(Exception.exception.backtrace)
    begin
      line=__LINE__; file=__FILE__; raise MSG
    rescue RuntimeError => detail
      assert_equal(RuntimeError, detail.class)
      assert_equal(MSG, detail.message)
      expected = "#{file}:#{line}:in `test_backtrace'"
      assert_equal(expected, detail.backtrace[0])
    end
  end

  def test_exception
    e = IOError.new
    assert_equal(IOError, e.class)
    assert_equal(IOError, e.exception.class)
    assert_equal(e,       e.exception)

    e = IOError.new
    e1 = e.exception(MSG)
    assert_equal(IOError, e1.class)
    assert_equal(MSG,     e1.message)
  end

  def test_message
    e = IOError.new(MSG)
    assert_equal(MSG, e.message)
  end

  def test_set_backtrace
    e = IOError.new
    a = %w( here there everywhere )
    assert_equal(a, e.set_backtrace(a))
    assert_equal(a, e.backtrace)
  end

end

Rubicon::handleTests(TestException) if $0 == __FILE__
@


1.3
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d11 1
a11 1
    assert_equal(Exception, e.type)
d22 1
a22 1
      assert_equal(RuntimeError, detail.type)
d31 2
a32 2
    assert_equal(IOError, e.type)
    assert_equal(IOError, e.exception.type)
d37 1
a37 1
    assert_equal(IOError, e1.type)
@


1.2
log
@Yet another class bites the dust
@
text
@d1 2
a2 1
require '../rubicon'
@


1.1
log
@Initial revision
@
text
@d6 10
d17 9
a25 1
    assert_fail("untested")
d29 9
a37 5
    assert_fail("untested")
  end

  def test_inspect
    assert_fail("untested")
d41 2
a42 1
    assert_fail("untested")
d46 4
a49 13
    assert_fail("untested")
  end

  def test_to_s
    assert_fail("untested")
  end

  def test_to_str
    assert_fail("untested")
  end

  def test_s_exception
    assert_fail("untested")
@


1.1.1.1
log
@Initial Import
@
text
@@
