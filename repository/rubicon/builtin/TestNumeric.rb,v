head	1.4;
access;
symbols
	V0_3_2:1.4
	V0_1_4:1.3
	V0_1_3:1.3
	V0_1_2:1.3
	V0_1_1:1.3
	V0_1:1.3
	initial:1.1.1.1
	PragProg:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.14.21.37.45;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.21.33.37;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.06.05.19.16.27;	author dave;	state Exp;
branches;
next	;


desc
@@


1.4
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestNumeric < Rubicon::TestCase

  def test_UPLUS
    skipping("untestable")
  end

  def test_UMINUS
    skipping("untestable")
  end

  def test_VERY_EQUAL # '==='  
    assert(1.0 === 1)
    assert(1   === 1.0)
    assert(1.1 === 1.1)
  end

  def test_abs
    skipping("untestable")
  end

  def test_coerce
    assert_equal([2.5, 1.0], 1.coerce(2.5))
    assert_equal([3.0, 1.2], 1.2.coerce(3))
    assert_equal([2, 1],     1.coerce(2))
  end

  def test_divmod
    skipping("untestable")
  end

  def test_eql?
    assert(1.eql?(1))
    assert(1.0.eql?(1.0))
    assert(!(1.eql?(1.0)))
    assert(!(1.0.eql?(1)))
  end

  def test_integer?
    assert(1.integer?)
    assert((10**50).integer?)
    assert(!1.2.integer?)
  end

  def test_nonzero?
    assert_equal(nil,    0.nonzero?)
    assert_equal(1,      1.nonzero?)
    assert_equal(10**50, (10**50).nonzero?)
    assert_equal(1.2,    1.2.nonzero?)
  end

  def test_zero?
    assert_equal(true, 0.zero?)
    assert_equal(true, 0.0.zero?)
    assert_equal(false, 1.zero?)
    assert_equal(false, 1.1.zero?)
  end

end

Rubicon::handleTests(TestNumeric) if $0 == __FILE__
@


1.3
log
@Archive save
@
text
@d1 2
a2 1
require '../rubicon'
@


1.2
log
@Get everything to run through
@
text
@d7 1
a7 1
    assert_fail("untested")
d11 1
a11 1
    assert_fail("untested")
d14 4
a17 2
  def test_VERY_EQUAL # '==='
    assert_fail("untested")
d21 1
a21 5
    assert_fail("untested")
  end

  def test_clone
    assert_fail("untested")
d25 3
a27 1
    assert_fail("untested")
d31 1
a31 1
    assert_fail("untested")
d35 4
a38 1
    assert_fail("untested")
d42 3
a44 1
    assert_fail("untested")
d48 4
a51 1
    assert_fail("untested")
d55 4
a58 1
    assert_fail("untested")
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
  def test_+@@
d10 1
a10 1
  def test_-@@
@


1.1.1.1
log
@Initial Import
@
text
@@
