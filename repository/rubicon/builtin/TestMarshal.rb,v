head	1.6;
access;
symbols
	V0_3_2:1.5
	V0_1_4:1.1
	V0_1_3:1.1
	V0_1_2:1.1
	V0_1_1:1.1
	V0_1:1.1;
locks; strict;
comment	@# @;


1.6
date	2002.02.26.06.52.36;	author matz;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.10.06.15.46;	author dave;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.22.14.01.35;	author dave;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.20.15.42.34;	author dave;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.15.21.15.31;	author dave;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.03.00.08;	author dave;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* builtin/TestMarshal.rb (TestMarshal::test_s_dump_load3): new
  Marshal.load calls proc for Fixnums.
@
text
@$: << File.dirname($0) << File.join(File.dirname($0), "..")
require 'rubicon'


class TestMarshal < Rubicon::TestCase

  class A
    attr :a1
    attr :a2
    def initialize(a1, a2)
      @@a1, @@a2 = a1, a2
    end
  end

  class B
    attr :b1
    attr :b2
    def initialize(b1, b2)
      @@b1 = A.new(b1, 2*b1)
      @@b2 = b2
    end
  end

  # Dump/load to string
  def test_s_dump_load1
    b = B.new(10, "wombat")
    assert_equal(10,       b.b1.a1)
    assert_equal(20,       b.b1.a2)
    assert_equal("wombat", b.b2)

    s = Marshal.dump(b)

    assert_instance_of(String, s)

    newb = Marshal.load(s)
    assert_equal(10,       newb.b1.a1)
    assert_equal(20,       newb.b1.a2)
    assert_equal("wombat", newb.b2)

    assert(newb.id != b.id)

    assert_exception(ArgumentError) { Marshal.dump(b, 1) }
  end

  def test_s_dump_load2
    b = B.new(10, "wombat")
    assert_equal(10,       b.b1.a1)
    assert_equal(20,       b.b1.a2)
    assert_equal("wombat", b.b2)

    File.open("_dl", "w") { |f| Marshal.dump(b, f) }
    
    begin
      newb = nil
      File.open("_dl") { |f| newb = Marshal.load(f) }

      assert_equal(10,       newb.b1.a1)
      assert_equal(20,       newb.b1.a2)
      assert_equal("wombat", newb.b2)
      
    ensure
      File.delete("_dl")
    end
  end

  def test_s_dump_load3
    b = B.new(10, "wombat")
    s = Marshal.dump(b)

    res = []
    newb = Marshal.load(s, proc { |obj| res << obj unless obj.kind_of?(Fixnum)})

    assert_equal(10,       newb.b1.a1)
    assert_equal(20,       newb.b1.a2)
    assert_equal("wombat", newb.b2)

    assert_set_equal([newb, newb.b1, newb.b2], res)
  end

  # there was a bug Marshaling Bignums, so

  def test_s_dump_load4
    b1 = 123456789012345678901234567890
    b2 = -123**99
    b3 = 2**32
    assert_equal(b1, Marshal.load(Marshal.dump(b1)))
    assert_equal(b2, Marshal.load(Marshal.dump(b2)))
    assert_equal(b3, Marshal.load(Marshal.dump(b3)))
  end

  def test_s_dump_load5
    x = [1, 2, 3, [4, 5, "foo"], {1=>"bar"}, 2.5, 9**30]
    y = Marshal.dump(x)
    assert_equal(x, Marshal.load(y))
  end

  def test_s_restore
    b = B.new(10, "wombat")
    assert_equal(10,       b.b1.a1)
    assert_equal(20,       b.b1.a2)
    assert_equal("wombat", b.b2)

    s = Marshal.dump(b)

    assert_instance_of(String, s)

    newb = Marshal.restore(s)
    assert_equal(10,       newb.b1.a1)
    assert_equal(20,       newb.b1.a2)
    assert_equal("wombat", newb.b2)

    assert(newb.id != b.id)
  end

end

Rubicon::handleTests(TestMarshal) if $0 == __FILE__
@


1.5
log
@Add all the 1.6.4 sample/test.rb tests to Rubicon, and integrate the
language and library tests
@
text
@d71 1
a71 1
    newb = Marshal.load(s, proc { |obj| res << obj })
@


1.4
log
@Knu found another Marshal bug
@
text
@d91 6
@


1.3
log
@Add test for Bignum marshaling
@
text
@d85 1
a85 1
    
d88 1
@


1.2
log
@1. Add preamble to all tests to allow them to be run from any location (that
   is we now add the path to rubicon to $:)

2. Change string tests so they aren't wired to the String class.
@
text
@d80 10
@


1.1
log
@Archive save
@
text
@d1 2
a2 1
require '../rubicon'
@

