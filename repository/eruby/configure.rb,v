head	1.17;
access;
symbols
	release_0_9_8:1.16
	autoconfiscation-branch:1.16.0.2
	root-of-autoconfiscation:1.16
	release_0_9_7:1.16
	release_0_9_6:1.15
	release_0_9_5:1.13
	release_0_9_4:1.11
	release_0_9_3:1.11;
locks; strict;
comment	@# @;


1.17
date	2002.05.07.05.26.31;	author shugo;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.10.02.39.12;	author shugo;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.07.23.03.24.09;	author shugo;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.10.03.03.07;	author shugo;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.09.09.54.37;	author shugo;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.08.09.54.34;	author shugo;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.04.10.07.45;	author shugo;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.28.02.16.02;	author shugo;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.25.10.09.43;	author shugo;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.25.05.11.54;	author shugo;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.25.05.03.42;	author shugo;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.22.04.38.15;	author shugo;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.18.07.44.53;	author shugo;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.18.05.58.57;	author shugo;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.16.09.27.08;	author shugo;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.16.08.33.52;	author shugo;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.16.04.27.02;	author shugo;	state Exp;
branches;
next	;

1.16.2.1
date	2001.10.19.07.07.46;	author shugo;	state dead;
branches;
next	;


desc
@@


1.17
log
@* Makefile.in: added datadir.
* configure.rb: added datadir support.
@
text
@#!/usr/bin/env ruby

# Generated automatically using autoconf.rb version 0.2.3

require "mkmf"

$ac_help = ""
$ac_help += "  --enable-shared         build a shared library for eruby" "\n"
$ac_help += "  --with-charset=CHARSET  default charset is CHARSET [iso-8859-1]" "\n"

$ac_sed = {}
$ac_confdefs = {}
$ac_features = {}
$ac_packages = {}
  
def AC_SUBST(variable)
  $ac_sed[variable] = true
end

def AC_DEFINE(variable, value = 1)
  case value
  when true
    value = "1"
  when false
    value = "0"
  when String
    value = value.dump
  else
    value = value.inspect
  end
  $ac_confdefs[variable] = value
end

AC_GIVEN = Object.new
def AC_GIVEN.if_not_given
  # do nothing
end

AC_NOT_GIVEN = Object.new
def AC_NOT_GIVEN.if_not_given
  yield
end

def AC_ENABLE(feature, action = Proc.new)
  if $ac_features[feature]
    yield($ac_features[feature])
    return AC_GIVEN
  else
    return AC_NOT_GIVEN
  end
end

def AC_WITH(package, action = Proc.new)
  if $ac_packages[package]
    yield($ac_packages[package])
    return AC_GIVEN
  else
    return AC_NOT_GIVEN
  end
end

def AC_OUTPUT(*files)
  if $AC_LIST_HEADER
    $DEFS = "-DHAVE_CONFIG_H"
    AC_OUTPUT_HEADER($AC_LIST_HEADER)
  else
    $DEFS = $ac_confdefs.collect {|k, v| "-D#{k}=#{v}" }.join(" ")
  end
  for file in files
    print "creating ", file, "\n"
    open(File.join($srcdir, file + ".in")) do |fin|
      open(file, "w") do |fout|
	while line = fin.gets
	  line.gsub!(/@@([A-Za-z_]+)@@/) do |s|
	    name = $1
	    if $ac_sed.key?(name)
	      eval("$" + name) #"
	    else
	      s
	    end
	  end
	  fout.print(line)
	end
      end
    end
  end
end

def AC_OUTPUT_HEADER(header)
  print "creating ", header, "\n"
  open(File.join($srcdir, header + ".in")) do |fin|
    open(header, "w") do |fout|
      while line = fin.gets
	line.sub!(/^(#define|#undef)\s+([A-Za-z_]+).*$/) do |s|
	  name = $2
	  if $ac_confdefs.key?(name)
	    val = $ac_confdefs[name]
	    "#define #{name} #{val}"
	  else
	    s
	  end
	end
	fout.print(line)
      end
    end
  end
  $ac_confdefs.clear
end

def AC_CONFIG_HEADER(header)
  $AC_LIST_HEADER = header
end

def AC_CHECK(feature)
  AC_MSG_CHECKING(feature)
  AC_MSG_RESULT(yield)
end

def AC_MSG_CHECKING(feature)
  print "checking #{feature}... "
  $stdout.flush
end

def AC_MSG_RESULT(result)
  case result
  when true
    result = "yes"
  when false, nil
    result = "no"
  end
  puts(result)
end

def AC_MSG_WARN(msg)
  $stderr.print("configure.rb: warning: ", msg, "\n")
end

def AC_MSG_ERROR(msg)
  $stderr.print("configure.rb: error: ", msg, "\n")
  exit(1)
end

def AC_CONFIG_AUX_DIR_DEFAULT
  AC_CONFIG_AUX_DIRS($srcdir, "#{$srcdir}/..",  "#{$srcdir}/../..")
end

def AC_CONFIG_AUX_DIRS(*dirs)
  for dir in dirs
    for prog in [ "install-rb", "install.rb" ]
      file = File.join(dir, prog)
      if File.file?(file); then
	$ac_aux_dir = dir
	$ac_install_rb = "#{file} -c"
	return
      end
    end
  end
end

def AC_PROG_INSTALL
  AC_MSG_CHECKING("for a BSD compatible install")
  $ac_cv_path_install = callcc { |c|
    for dir in ENV["PATH"].split(/:/)
      if %r'^(/|\./|/etc/.*|/usr/sbin/.*|/usr/etc/.*|/sbin/.*|/usr/afsws/bin/.*|/usr/ucb/.*)$' =~ dir + "/" # '
	next
      end
      for prog in [ "ginstall", "scoinst", "install" ]
	file = File.join(dir, prog)
	if File.file?(file)
	  if prog == "install" &&
	      `#{file} 2>&1` =~ /dspmsg/
	    # AIX install.  It has an incompatible calling convention.
	  else
	    c.call("#{file} -c")
	  end
	end
      end
    end
    unless $ac_install_rb
      AC_CONFIG_AUX_DIR_DEFAULT()
    end
    $ac_install_rb
  }
  $INSTALL = $ac_cv_path_install
  AC_MSG_RESULT($INSTALL)
  $INSTALL_PROGRAM ||= "$(INSTALL)"
  $INSTALL_SCRIPT ||= "$(INSTALL)"
  $INSTALL_DATA ||= "$(INSTALL) -m 644"
  $INSTALL_DLLIB ||= "$(INSTALL) -m 555"
  $INSTALL_DIR ||= "$(INSTALL) -d"
  AC_SUBST("INSTALL")
  AC_SUBST("INSTALL_PROGRAM")
  AC_SUBST("INSTALL_SCRIPT")
  AC_SUBST("INSTALL_DATA")
  AC_SUBST("INSTALL_DLLIB")
  AC_SUBST("INSTALL_DIR")
end

$stdout.sync = true

drive = File::PATH_SEPARATOR == ';' ? /\A\w:/ : /\A/
prefix = Regexp.new("\\A" + Regexp.quote(CONFIG["prefix"]))
$drive = CONFIG["prefix"] =~ drive ? $& : ''
$prefix = CONFIG["prefix"].sub(drive, '')
$exec_prefix = "$(prefix)"
$bindir = CONFIG["bindir"].sub(prefix, "$(exec_prefix)").sub(drive, '')
$datadir = CONFIG["datadir"].sub(prefix, "$(prefix)").sub(drive, '')
$libdir = CONFIG["libdir"].sub(prefix, "$(exec_prefix)").sub(drive, '')
$archdir = $archdir.sub(prefix, "$(prefix)").sub(drive, '')
$sitelibdir = $sitelibdir.sub(prefix, "$(prefix)").sub(drive, '')
$sitearchdir = $sitearchdir.sub(prefix, "$(prefix)").sub(drive, '')
$includedir = CONFIG["includedir"].sub(prefix, "$(prefix)").sub(drive, '')
$mandir = CONFIG["mandir"].sub(prefix, "$(prefix)").sub(drive, '')

$rubylibdir ||=
  $libdir + "/ruby/" + CONFIG["MAJOR"] + "." + CONFIG["MINOR"]

for option in ARGV
  if option =~ /^-.*?=(.*)/
    optarg = $1
  else
    optarg = nil
  end
  case option
  when /^--prefix/
    $prefix = optarg
  when /^--exec-prefix/
    $exec_prefix = optarg
  when /^--bindir/
    $bindir = optarg
  when /^--datadir/
    $datadir = optarg
  when /^--libdir/
    $libdir = optarg
  when /^--includedir/
    $includedir = optarg
  when /^--mandir/
    $mandir = optarg
  when /^--enable-([^=]+)/
    feature = $1
    if optarg.nil?
      optarg = "yes"
    end
    $ac_features[feature] = optarg
  when /^--with-([^=]+)/
    package = $1
    if optarg.nil?
      optarg = "yes"
    end
    $ac_packages[package] = optarg
  when "--help"
    print <<EOF
Usage: configure.rb [options]
Options: [defaults in brackets after descriptions]
Configuration:
  --help                  print this message
Directory and file names:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [#{$prefix}]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [same as prefix]
  --bindir=DIR            user executables in DIR [EPREFIX/bin]
  --libdir=DIR            object code libraries in DIR [EPREFIX/lib]
  --includedir=DIR        C header files in DIR [PREFIX/include]
  --datadir=DIR           read-only architecture-independent data in DIR
                          [PREFIX/share]
  --mandir=DIR            manual pages in DIR [PREFIX/man]
EOF
    if $ac_help.length > 0
      print "--enable and --with options recognized:\n"
      print $ac_help
    end
    exit(0)
  when /^-.*/
    AC_MSG_ERROR("#{option}: invalid option; use --help to show usage")
  end
end

$srcdir = File.dirname($0)
$VPATH = ""

$arch = CONFIG["arch"]
$ruby_version = Config::CONFIG["ruby_version"] ||
  CONFIG["MAJOR"] + "." + CONFIG["MINOR"]

$CC = CONFIG["CC"]
$AR = CONFIG["AR"]
$LD = "$(CC)"
$RANLIB = CONFIG["RANLIB"]

if CFLAGS.index(CONFIG["CCDLFLAGS"])
  $CFLAGS = CFLAGS
else
  $CFLAGS = CFLAGS + " " + CONFIG["CCDLFLAGS"]
end
$LDFLAGS = CONFIG["LDFLAGS"]
$LIBS = CONFIG["LIBS"]
$XLDFLAGS = CONFIG["XLDFLAGS"]
$DLDFLAGS = CONFIG["DLDFLAGS"]
$LDSHARED = CONFIG["LDSHARED"]

$EXEEXT = CONFIG["EXEEXT"]
$DLEXT = CONFIG["DLEXT"]

$RUBY_INSTALL_NAME = CONFIG["RUBY_INSTALL_NAME"]
$RUBY_SHARED = (CONFIG["ENABLE_SHARED"] == "yes")
$LIBRUBYARG = CONFIG["LIBRUBYARG"]
if $RUBY_SHARED
  $LIBRUBYARG.gsub!(/-L\./, "-L$(libdir)")
else
  if RUBY_PLATFORM !~ /mswin32/
    $LIBRUBYARG = "$(hdrdir)/" + $LIBRUBYARG
  end
end
$LIBRUBY_A = CONFIG["LIBRUBY_A"]
$RUBY_SO_NAME = CONFIG["RUBY_SO_NAME"]

case PLATFORM
when /-aix/
  if $RUBY_SHARED
    $LIBRUBYARG = "-Wl,$(libdir)/" + CONFIG["LIBRUBY_SO"]
    $LIBRUBYARG.sub!(/\.so\.[.0-9]*$/, '.so')
    $XLDFLAGS = ""
  else
    $XLDFLAGS = "-Wl,-bE:$(topdir)/ruby.imp"
  end
  if $DLDFLAGS !~ /-Wl,/
    $LIBRUBYARG.gsub!(/-Wl,/, '')
    $XLDFLAGS.gsub!(/-Wl,/, '')
    $DLDFLAGS.gsub!(/-Wl,/, '')
  end
end

AC_SUBST("srcdir")
AC_SUBST("topdir")
AC_SUBST("hdrdir")
AC_SUBST("VPATH")

AC_SUBST("arch")
AC_SUBST("ruby_version")
AC_SUBST("drive")
AC_SUBST("prefix")
AC_SUBST("exec_prefix")
AC_SUBST("bindir")
AC_SUBST("datadir")
AC_SUBST("libdir")
AC_SUBST("rubylibdir")
AC_SUBST("archdir")
AC_SUBST("sitedir")
AC_SUBST("sitelibdir")
AC_SUBST("sitearchdir")
AC_SUBST("includedir")
AC_SUBST("mandir")

AC_SUBST("CC")
AC_SUBST("AR")
AC_SUBST("LD")
AC_SUBST("RANLIB")

AC_SUBST("CFLAGS")
AC_SUBST("DEFS")
AC_SUBST("LDFLAGS")
AC_SUBST("LIBS")
AC_SUBST("XLDFLAGS")
AC_SUBST("DLDFLAGS")
AC_SUBST("LDSHARED")

AC_SUBST("OBJEXT")
AC_SUBST("EXEEXT")
AC_SUBST("DLEXT")

AC_SUBST("RUBY_INSTALL_NAME")
AC_SUBST("LIBRUBYARG")
AC_SUBST("LIBRUBY_A")
AC_SUBST("RUBY_SO_NAME")

$MAJOR, $MINOR, $TEENY =
  open(File.join($srcdir, "eruby.h")).grep(/ERUBY_VERSION/)[0].scan(/(\d+).(\d+).(\d+)/)[0]
$MAJOR_MINOR = format("%02d", ($MAJOR.to_i * 10 + $MINOR.to_i))
AC_SUBST("MAJOR")
AC_SUBST("MINOR")
AC_SUBST("TEENY")
AC_SUBST("MAJOR_MINOR")

AC_MSG_CHECKING("whether we are using gcc")
if $CC == "gcc" || `#{$CC} -v 2>&1` =~ /gcc/
  $using_gcc = true
  $CFLAGS += " -Wall"
else
  $using_gcc = false
end
AC_MSG_RESULT($using_gcc)

AC_MSG_CHECKING("Ruby version")
AC_MSG_RESULT(RUBY_VERSION)
if RUBY_VERSION < "1.6"
  AC_MSG_ERROR("eruby requires Ruby 1.6.x or later.")
end

AC_MSG_CHECKING("for default charset")
$DEFAULT_CHARSET = "iso-8859-1"
AC_WITH("charset") { |withval|
  $DEFAULT_CHARSET = withval
}
AC_MSG_RESULT($DEFAULT_CHARSET)
AC_DEFINE("ERUBY_DEFAULT_CHARSET", $DEFAULT_CHARSET)

AC_MSG_CHECKING("whether enable shared")
$ENABLE_SHARED = false
AC_ENABLE("shared") { |enableval|
  if enableval == "yes"
    if PLATFORM =~ /-mswin32/
      AC_MSG_ERROR("can't enable shared on mswin32")
    end
    $ENABLE_SHARED = true
  end
}
AC_MSG_RESULT($ENABLE_SHARED)

$LIBERUBY_A = "liberuby.a"
$LIBERUBY = "${LIBERUBY_A}"
$LIBERUBYARG="$(LIBERUBY_A)"

$LIBERUBY_SO = "liberuby.#{CONFIG['DLEXT']}.$(MAJOR).$(MINOR).$(TEENY)"
$LIBERUBY_ALIASES = "liberuby.#{CONFIG['DLEXT']}"

if $ENABLE_SHARED
  $LIBERUBY = "${LIBERUBY_SO}"
  $LIBERUBYARG = "-L. -leruby"
  case PLATFORM
  when /-sunos4/
    $LIBERUBY_ALIASES = "liberuby.so.$(MAJOR).$(MINOR) liberuby.so"
  when /-linux/
    $DLDFLAGS = '-Wl,-soname,liberuby.so.$(MAJOR).$(MINOR)'
    $LIBERUBY_ALIASES = "liberuby.so.$(MAJOR).$(MINOR) liberuby.so"
  when /-(freebsd|netbsd)/
    $LIBERUBY_SO = "liberuby.so.$(MAJOR).$(MINOR)"
    if PLATFORM =~ /elf/ || PLATFORM =~ /-freebsd[3-9]/
      $LIBERUBY_SO = "liberuby.so.$(MAJOR_MINOR)"
      $LIBERUBY_ALIASES = "liberuby.so"
    else
      $LIBERUBY_ALIASES = "liberuby.so.$(MAJOR) liberuby.so"
    end
  when /-solaris/
    $XLDFLAGS = "-R$(prefix)/lib"
  when /-hpux/
    $XLDFLAGS = "-Wl,+s,+b,$(prefix)/lib"
    $LIBERUBY_SO = "liberuby.sl.$(MAJOR).$(MINOR).$(TEENY)"
    $LIBERUBY_ALIASES = 'liberuby.sl.$(MAJOR).$(MINOR) liberuby.sl'
  when /-aix/
    $DLDFLAGS = '-Wl,-bE:eruby.imp'
    $LIBERUBYARG = "-L$(prefix)/lib -Wl,liberuby.so"
    if $DLDFLAGS !~ /-Wl,/
      $LIBRUBYARG.gsub!(/-Wl,/, '')
      $XLDFLAGS.gsub!(/-Wl,/, '')
      $DLDFLAGS.gsub!(/-Wl,/, '')
    end
    print "creating eruby.imp\n"
    ifile = open("eruby.imp", "w")
    begin
      ifile.write <<EOIF
#!
ruby_filename
eruby_mode
eruby_noheader
eruby_charset
EOIF
    ensure
      ifile.close
    end
  end
end

if PLATFORM =~ /-mswin32/
  $AR = "lib"
  $AROPT = "/out:$@@"
  $LIBERUBY_A = "liberuby.lib"
  $LIBERUBY = "$(LIBERUBY_A)"
  $LIBRUBYARG.gsub!(CONFIG["RUBY_SO_NAME"] + ".lib", CONFIG["LIBRUBY_A"])
  if /nmake/i =~ $make
    $LD = "$(CC)"
    $VPATH = "{$(VPATH)}"
  else
    $LD = "env LIB='$(subst /,\\\\,$(libdir));$(LIB)' $(CC)"
  end
else
  $AROPT = "rcu $@@"
end

AC_SUBST("LIBERUBY_A")
AC_SUBST("LIBERUBY")
AC_SUBST("LIBERUBYARG")
AC_SUBST("LIBERUBY_SO")
AC_SUBST("LIBERUBY_ALIASES")
AC_SUBST("AROPT")

$EXT_DLDFLAGS = CONFIG["DLDFLAGS"]
if $RUBY_SHARED || RUBY_PLATFORM =~ /mswin32/
  $EXT_LIBRUBYARG = "$(LIBRUBYARG)"
else
  $EXT_LIBRUBYARG = ""
end

$MKERUBY = ""
if /mswin32/ =~ RUBY_PLATFORM
  if /nmake/i =~ $make
    $MKERUBY << "set LIB=$(libdir:/=\\);$(LIB)\n\t"
  else
    $MKERUBY << "\tenv LIB='$(subst /,\\\\,$(LIBPATH)); $(EXT_LIBRUBYARG) $(LIB)' \\\n\t"
  end
end
$MKERUBY << "$(LD) $(LDFLAGS) $(XLDFLAGS) $(OBJS) $(LIBERUBYARG) $(LIBRUBYARG) $(LIBS) -o $@@"

if $DLEXT != $OBJEXT
  $MKDLLIB = ""
  if /mswin32/ =~ RUBY_PLATFORM
    if /nmake/i =~ $make
      $MKDLLIB << "set LIB=$(libdir:/=\\);$(LIB)\n\t"
    else
      $MKDLLIB << "\tenv LIB='$(subst /,\\\\,$(LIBPATH)); $(EXT_LIBRUBYARG) $(LIB)' \\\n\t"
    end
  end
  $MKDLLIB << "$(LDSHARED) $(EXT_DLDFLAGS) -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(EXT_LIBRUBYARG) $(LIBS)"
  if /mswin32/ =~ RUBY_PLATFORM && /nmake/i =~ $make
    $MKDLLIB << " -link /INCREMENTAL:no /EXPORT:Init_eruby"
  end
else
  case RUBY_PLATFORM
  when "m68k-human"
    $MKDLLIB = "ar cru $(DLLIB) $(EXT_OBJS) $(LIBS)"
  else
    $MKDLLIB = "ld $(DLL_DLDFLAGS) -r -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(EXT_LIBRUBYARG) $(LIBS)"
  end
end

AC_SUBST("EXT_DLDFLAGS")
AC_SUBST("EXT_LIBRUBYARG")
AC_SUBST("MKERUBY")
AC_SUBST("MKDLLIB")

AC_CONFIG_HEADER("config.h")
AC_OUTPUT("Makefile")

# Local variables:
# mode: Ruby
# tab-width: 8
# End:
@


1.16
log
@* eruby_main.c (run): print error messages to stderr if $DEBUG is
false.
@
text
@d207 1
d231 2
d265 2
d345 1
@


1.16.2.1
log
@*** empty log message ***
@
text
@@


1.15
log
@* hack for mswin32.
@
text
@d3 1
a3 1
# Generated automatically using autoconf.rb version 0.2.2
d164 3
d537 5
@


1.14
log
@* eruby_lib.c (eruby_load): don't set eruby_charset and
eruby_noheader.
@
text
@d3 1
a3 1
# Generated automatically using autoconf.rb version 0.2.1
d200 1
d303 3
a305 1
  $LIBRUBYARG = "$(hdrdir)/" + $LIBRUBYARG
d333 1
d472 1
a472 1
    $LD = "(set LIB=$(libdir:/=\\);$(LIB))& $(CC)"
d489 1
a489 1
if $RUBY_SHARED
d495 10
d509 1
a509 1
      $MKDLLIB << "set LIB=$(LIBPATH:/=\\); $(EXT_LIBRUBYARG) $(LIB)\n\t"
d515 3
d529 1
@


1.13
log
@* configure.rb.in: check for gcc.
* eruby_lib.c (eruby_compiler_get_sourcefile): new method.
* eruby_lib.c (eruby_compiler_set_sourcefile): ditto.
@
text
@d364 8
a385 8

$MAJOR, $MINOR, $TEENY =
  open(File.join($srcdir, "eruby.h")).grep(/ERUBY_VERSION/)[0].scan(/(\d+).(\d+).(\d+)/)[0]
$MAJOR_MINOR = format("%02d", ($MAJOR.to_i * 10 + $MINOR.to_i))
AC_SUBST("MAJOR")
AC_SUBST("MINOR")
AC_SUBST("TEENY")
AC_SUBST("MAJOR_MINOR")
@


1.12
log
@* examples/httpd.conf: changed the example of Apache's LIBEXECDIR
to /usr/local/apache/libexec.
@
text
@d3 1
a3 1
# Generated automatically using autoconf.rb version 0.2
d114 5
d282 5
a286 1
$CFLAGS = CFLAGS + " " + CONFIG["CCDLFLAGS"]
a297 2
p $RUBY_SHARED
p CONFIG["ENABLE_SHARED"]
d363 9
@


1.11
log
@* configure.rb.in: use DLL_DLDFLAGS for eruby.so.
@
text
@d3 1
a3 1
# Generated automatically using autoconf.rb version 0.1
a267 2
$RUBY_INSTALL_NAME = CONFIG["RUBY_INSTALL_NAME"]
$RUBY_SO_NAME = CONFIG["RUBY_SO_NAME"]
d287 4
d292 3
a294 2
if $LIBRUBYARG =~ /\.a$/
  $RUBY_SHARED = false
a295 3
else
  $RUBY_SHARED = true
  $LIBRUBYARG.gsub!(/-L\./, "-L$(libdir)")
d297 2
a320 2
AC_SUBST("RUBY_INSTALL_NAME")
AC_SUBST("RUBY_SO_NAME")
d352 1
d354 2
d468 6
a473 1
$DLL_DLDFLAGS = CONFIG["DLDFLAGS"]
d479 1
a479 1
      $MKDLLIB << "set LIB=$(LIBPATH:/=\\);$(LIB)\n\t"
d481 1
a481 1
      $MKDLLIB << "\tenv LIB='$(subst /,\\\\,$(LIBPATH));$(LIB)' \\\n\t"
d484 1
a484 1
  $MKDLLIB << "$(LDSHARED) $(DLL_DLDFLAGS) -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
d490 1
a490 1
    $MKDLLIB = "ld $(DLL_DLDFLAGS) -r -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
d494 2
a495 1
AC_SUBST("DLL_DLDFLAGS")
@


1.10
log
@* Makefile.in: RUBY_SO_NAME for cygwin.
@
text
@d465 2
d476 1
a476 1
  $MKDLLIB << "$(LDSHARED) $(DLDFLAGS) -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
d482 1
a482 1
    $MKDLLIB = "ld $(DLDFLAGS) -r -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
d486 1
@


1.9
log
@*** empty log message ***
@
text
@d138 53
d269 1
d320 1
@


1.8
log
@* configure.rb.in: check for MKDLLIB.
@
text
@d123 1
a123 1
  when false
a245 1
  $DLDFLAGS = "-Wl,-bE:mod_ruby.imp -Wl,-bI:httpd.exp -Wl,-bM:SRE -Wl,-bnoentry -lc"
a364 7
    if $RUBY_SHARED
      $LIBRUBYARG = "-Wl," + $libdir + "/" + CONFIG["LIBRUBY_SO"]
      $LIBRUBYARG.sub!(/\.so\.[.0-9]*$/, '.so')
      $XLDFLAGS = ""
    else
      $XLDFLAGS = "-Wl,-bE:#{$topdir}/ruby.imp"
    end
@


1.7
log
@* configure.rb.in: new file.
@
text
@d418 21
@


1.6
log
@* configure.rb (create_file): support srcdir.
@
text
@d3 2
a5 1
require "getoptlong"
d7 86
a92 25
def usage
  $stderr.print(<<EOS)
usage: configure.rb [options]

  --help                      print this message

  --prefix=PREFIX             install architecture-independent files in PREFIX
                              [#{CONFIG["prefix"]}]
  --exec-prefix=EPREFIX       install architecture-dependent files in EPREFIX
                              [same as prefix]
  --bindir=DIR                user executables in DIR [EPREFIX/bin]
  --libdir=DIR                object code libraries in DIR [EPREFIX/lib]
  --includedir=DIR            C header files in DIR [PREFIX/include]
  --mandir=DIR                manual pages in DIR [PREFIX/man]

  --default-charset=CHARSET   default charset value
  --enable-shared             build a shared library for eruby
EOS
end

def create_file(filename, config)
  print "creating ", filename, "\n"
  dir = File.dirname($0)
  open(File.join(dir, filename) + ".in") do |fin|
    open(filename, "w") do |fout|
d94 5
a98 4
	line.gsub!(/@@[A-Za-z_]+@@/) do |s|
	  key = s[1..-2]
	  if config.key?(key)
	    config[key]
d107 5
d114 25
a138 11
$DEFAULT_CHARSET = case $KCODE
		   when /^e/i
		     "EUC-JP"
		   when /^s/i
		     "SHIFT_JIS"
		   when /^u/i
		     "UTF-8"
		   else
		     "ISO-8859-1"
		   end
$ENABLE_SHARED = false
d152 53
a204 33
parser = GetoptLong.new
parser.set_options(["--help", GetoptLong::NO_ARGUMENT],
		   ["--prefix", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--exec-prefix", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--bindir", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--libdir", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--includedir", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--mandir", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--default-charset", GetoptLong::OPTIONAL_ARGUMENT],
		   ["--enable-shared", GetoptLong::OPTIONAL_ARGUMENT])

begin
  parser.each_option do |name, arg|
    case name
    when "--prefix"
      $prefix = arg
    when "--exec-prefix"
      $exec_prefix = arg
    when "--bindir"
      $bindir = arg
    when "--libdir"
      $libdir = arg
    when "--includedir"
      $includedir = arg
    when "--mandir"
      $mandir = arg
    when "--default-charset"
      $DEFAULT_CHARSET = arg
    when "--enable-shared"
      $ENABLE_SHARED = true
    when "--help"
      usage
      exit(1)
d206 3
a209 3
rescue
  usage
  exit(1)
d212 19
a230 1
config = {}
d232 10
a241 3
if RUBY_VERSION < "1.6"
  $stderr.print("mod_ruby requires Ruby 1.6.x or later.\n")
  exit 1
d243 16
a258 2
if RUBY_VERSION < "1.6.4"
  $stderr.print("warning: mod_ruby recommends Ruby 1.6.4 or later.\n")
d261 36
a296 4
config["srcdir"] = File.dirname($0)
config["topdir"] = $topdir
config["hdrdir"] = $hdrdir
config["VPATH"] = ""
d298 1
a298 3
config["RUBY_INSTALL_NAME"] = CONFIG["RUBY_INSTALL_NAME"]
config["arch"] = CONFIG["arch"]
config["ruby_version"] = Config::CONFIG["ruby_version"]
d300 21
a320 2
config["prefix"] = $prefix
config["exec_prefix"] = $exec_prefix
d322 11
a332 46
config["bindir"] = $bindir
config["libdir"] = $libdir
config["rubylibdir"] = $rubylibdir ||
  $libdir + "/ruby/" + CONFIG["MAJOR"] + "." + CONFIG["MINOR"]
config["archdir"] = $archdir
config["sitedir"] = $sitedir
config["sitelibdir"] = $sitelibdir
config["sitearchdir"] = $sitearchdir
config["includedir"] = $includedir
config["mandir"] = $mandir

config["CC"] = CONFIG["CC"]
config["AR"] = CONFIG["AR"]
config["AROPT"] = "rcu $@@"
config["LD"] = "$(CC)"
config["RANLIB"] = CONFIG["RANLIB"]

config["CFLAGS"] = CFLAGS + " " + CONFIG["CCDLFLAGS"]
config["LDFLAGS"] = CONFIG["LDFLAGS"]
config["LIBS"] = CONFIG["LIBS"]
config["XLDFLAGS"] = $XLDFLAGS
config["DLDFLAGS"] = $DLDFLAGS
config["LDSHARED"] = CONFIG["LDSHARED"]

config["MAJOR"], config["MINOR"], config["TEENY"] =
  open(File.join(config["srcdir"], "eruby.h")).grep(/ERUBY_VERSION/)[0].scan(/(\d+).(\d+).(\d+)/)[0]
config["MAJOR_MINOR"] = (config["MAJOR"].to_i * 10 + config["MINOR"].to_i).to_s

config["OBJEXT"] = $OBJEXT
config["EXEEXT"] = CONFIG["EXEEXT"]
config["DLEXT"] = CONFIG["DLEXT"]

config["DEFAULT_CHARSET"] = $DEFAULT_CHARSET

begin
  config["LIBRUBYARG"] = Config.expand(CONFIG["LIBRUBYARG"])
rescue
  config["LIBRUBYARG"] = CONFIG["LIBRUBYARG"]
end
if config["LIBRUBYARG"] =~ /\.a$/
  $RUBY_SHARED = false
  config["LIBRUBYARG"] = $hdrdir + "/" + config["LIBRUBYARG"]
else
  $RUBY_SHARED = true
  config["LIBRUBYARG"].gsub!(/-L\./, "-L#{CONFIG['prefix']}/lib")
end
d334 3
a336 3
config["LIBERUBY_A"] = "liberuby.a"
config["LIBERUBY"] = "${LIBERUBY_A}"
config["LIBERUBYARG"]="$(LIBERUBY_A)"
d338 2
a339 2
config["LIBERUBY_SO"] = "liberuby.#{CONFIG['DLEXT']}.$(MAJOR).$(MINOR).$(TEENY)"
config["LIBERUBY_ALIASES"] = "liberuby.#{CONFIG['DLEXT']}"
d342 2
a343 2
  config["LIBERUBY"] = "${LIBERUBY_SO}"
  config["LIBERUBYARG"] = "-L. -leruby"
d346 1
a346 1
    config["LIBERUBY_ALIASES"] = "liberuby.so.$(MAJOR).$(MINOR) liberuby.so"
d348 2
a349 2
    config["DLDFLAGS"] = '-Wl,-soname,liberuby.so.$(MAJOR).$(MINOR)'
    config["LIBERUBY_ALIASES"] = "liberuby.so.$(MAJOR).$(MINOR) liberuby.so"
d351 1
a351 1
    config["LIBERUBY_SO"] = "liberuby.so.$(MAJOR).$(MINOR)"
d353 2
a354 2
      config["LIBERUBY_SO"] = "liberuby.so.$(MAJOR_MINOR)"
      config["LIBERUBY_ALIASES"] = "liberuby.so"
d356 1
a356 1
      config["LIBERUBY_ALIASES"] = "liberuby.so.$(MAJOR) liberuby.so"
d359 1
a359 1
    config["XLDFLAGS"] = "-R$(prefix)/lib"
d361 3
a363 3
    config["XLDFLAGS"] = "-Wl,+s,+b,$(prefix)/lib"
    config["LIBERUBY_SO"] = "liberuby.sl.$(MAJOR).$(MINOR).$(TEENY)"
    config["LIBERUBY_ALIASES"] = 'liberuby.sl.$(MAJOR).$(MINOR) liberuby.sl'
d365 1
a365 1
    config["DLDFLAGS"] = '-Wl,-bE:eruby.imp'
d367 3
a369 3
      config["LIBRUBYARG"] = "-Wl," + CONFIG["libdir"] + "/" + CONFIG["LIBRUBY_SO"]
      config["LIBRUBYARG"].sub!(/\.so\.[.0-9]*$/, '.so')
      config["XLDFLAGS"] = ""
d371 1
a371 1
      config["XLDFLAGS"] = "-Wl,-bE:#{$topdir}/ruby.imp"
d373 5
a377 5
    config["LIBERUBYARG"] = "-L$(prefix)/lib -Wl,liberuby.so"
    if CONFIG["DLDFLAGS"] !~ /-Wl,/
      config["LIBRUBYARG"].gsub!(/-Wl,/, '')
      config["XLDFLAGS"].gsub!(/-Wl,/, '')
      config["DLDFLAGS"].gsub!(/-Wl,/, '')
d396 5
a400 5
  config["AR"] = "lib"
  config["AROPT"] = "/out:$@@"
  config["LIBERUBY_A"] = "liberuby.lib"
  config["LIBERUBY"] = "$(LIBERUBY_A)"
  config["LIBRUBYARG"].gsub!(CONFIG["RUBY_SO_NAME"] + ".lib", CONFIG["LIBRUBY_A"])
d402 2
a403 2
    config["LD"] = "(set LIB=$(libdir:/=\\);$(LIB))& $(CC)"
    config["VPATH"] = "{$(VPATH)}"
d405 1
a405 1
    config["LD"] = "env LIB='$(subst /,\\\\,$(libdir));$(LIB)' $(CC)"
a406 12
end

if CONFIG["DLEXT"] != $OBJEXT
  config["MKDLLIB"] = ""
  if /mswin32/ =~ RUBY_PLATFORM
    if /nmake/i =~ $make
      config["MKDLLIB"] << "set LIB=$(LIBPATH:/=\\);$(LIB)\n\t"
    else
      config["MKDLLIB"] << "\tenv LIB='$(subst /,\\\\,$(LIBPATH));$(LIB)' \\\n\t"
    end
  end
  config["MKDLLIB"] << "$(LDSHARED) $(DLDFLAGS) -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
d408 1
a408 6
  case RUBY_PLATFORM
  when "m68k-human"
    config["MKDLLIB"] = "ar cru $(DLLIB) $(EXT_OBJS) $(LIBS)"
  else
    config["MKDLLIB"] = "ld $(DLDFLAGS) -r -o $(DLLIB) $(EXT_OBJS) $(LIBERUBYARG) $(LIBS)"
  end
d411 6
a416 2
create_file("config.h", config)
create_file("Makefile", config)
d418 2
a419 4
# Local variables:
# mode: Ruby
# tab-width: 8
# End:
@


1.5
log
@* Makefile.RB: removed.
@
text
@d28 2
a29 1
  open(filename + ".in") do |fin|
d111 8
@


1.4
log
@* configure.rb: support new version of mkmf.
@
text
@a94 4
    when "--archdir"
      $archdir = arg
    when "--sitearch"
      $sitearchdir = arg
d125 2
a126 1
config["rubylibdir"] = $rubylibdir
d147 10
a243 10

config["MAJOR"], config["MINOR"], config["TEENY"] =
  open(File.join(config["srcdir"], "eruby.h")).grep(/ERUBY_VERSION/)[0].scan(/(\d+).(\d+).(\d+)/)[0]
config["MAJOR_MINOR"] = (config["MAJOR"].to_i * 10 + config["MINOR"].to_i).to_s

config["OBJEXT"] = $OBJEXT
config["EXEEXT"] = CONFIG["EXEEXT"]
config["DLEXT"] = CONFIG["DLEXT"]

config["DEFAULT_CHARSET"] = $DEFAULT_CHARSET
@


1.3
log
@*** empty log message ***
@
text
@d57 3
a59 1
$prefix = CONFIG["prefix"]
d61 7
a67 5
prefix = Regexp.new("\\A" + Regexp.quote($prefix))
$bindir = CONFIG["bindir"].sub(prefix, "$(exec_prefix)")
$libdir = CONFIG["libdir"].sub(prefix, "$(exec_prefix)")
$includedir = CONFIG["includedir"].sub(prefix, "$(prefix)")
$mandir = CONFIG["mandir"].sub(prefix, "$(prefix)")
d116 2
a119 6
config["CC"] = CONFIG["CC"]
config["AR"] = CONFIG["AR"]
config["AROPT"] = "rcu $@@"
config["LD"] = "$(CC)"
config["RANLIB"] = CONFIG["RANLIB"]

d121 2
d129 5
d137 5
a141 6
drive = File::PATH_SEPARATOR == ';' ? /\A\w:/ : /\A/
config["archdir"] = $archdir.sub(drive, '')
config["sitearchdir"] = $sitearchdir.sub(drive, '')

config["topdir"] = $topdir
config["hdrdir"] = $hdrdir
@


1.2
log
@* configure.rb: new options, --prefix, --exec-prefix etc....
* config.h.in: quote @@DEFAULT_CHARSET@@.
@
text
@d28 4
a31 4
  open(filename + ".in") do |min|
    open(filename, "w") do |mout|
      while line = min.gets
	line.gsub!(/@@.*?@@/) do |s|
d39 1
a39 1
	mout.print(line)
a240 16

open("Makefile.in") do |min|
  open("Makefile", "w") do |mout|
    while line = min.gets
      line.gsub!(/@@.*?@@/) do |s|
	key = s[1..-2]
	if config.key?(key)
	  config[key]
	else
	  s
	end
      end
      mout.print(line)
    end
  end
end
@


1.1
log
@* configure.rb: new file.
* Makefile.in: new file.
* config.h.in: new file.
@
text
@d7 2
a8 2
  $stderr.printf <<EOS, $0
usage: %s [options]
d10 13
a22 3
  --help                        print this message
  --default-charset=CHARSET     default charset value
  --enable-shared               build a shared library for Ruby.
d57 8
d67 6
d79 16
d122 2
a123 1
config["prefix"] = CONFIG["prefix"]
d125 4
a128 6
prefix = Regexp.new("\\A" + Regexp.quote(config["prefix"]))
config["bindir"] = CONFIG["bindir"].sub(prefix, "$(prefix)")
config["libdir"] = CONFIG["libdir"].sub(prefix, "$(prefix)")
config["sitelibdir"] = $sitelibdir
config["includedir"] = CONFIG["includedir"].sub(prefix, "$(prefix)")
config["mandir"] = CONFIG["mandir"].sub(prefix, "$(prefix)")
@
