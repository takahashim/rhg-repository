head	1.12;
access;
symbols
	start:1.1.1.1 KNU:1.1.1;
locks; strict;
comment	@# @;


1.12
date	2001.06.06.12.47.34;	author knu;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.06.09.25.07;	author knu;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.05.05.24.14;	author knu;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.04.16.32.22;	author knu;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.07.16.42.21;	author knu;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.01.08.30.00;	author knu;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.31.15.07.20;	author knu;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.31.05.22.34;	author knu;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.30.18.33.49;	author knu;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.19.17.42.45;	author knu;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.15.16.55.11;	author knu;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.14.09.58.11;	author knu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.01.14.09.58.11;	author knu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Pull up loginfo.rb rev.1.12.
@
text
@#!/usr/bin/env ruby
#
# CVS commit mail script (loginfo)
#
# $Idaemons: /home/cvs/cvsmailer/loginfo.rb,v 1.3 2001/01/15 19:42:12 knu Exp $
# $devId: loginfo.rb,v 1.12 2001/06/06 12:46:24 knu Exp $
# $Id: loginfo_ruby.rb,v 1.11 2001/06/06 09:25:07 knu Exp $
#

MYNAME = File.basename($0)

require 'parsearg'
require 'socket'

def time2str(tm)
  ret = tm.strftime("%a, #{tm.mday} %b %Y %X ")
  gmt = Time.at(tm.to_i)
  gmt.gmtime
  offset = tm.to_i - Time.local(*gmt.to_a[0,6].reverse).to_i
  ret + sprintf('%+.2d%.2d', *(offset / 60).divmod(60))
end

$datestr = time2str(Time.now)
$ecvsuser = ENV['LOGNAME']
$pgrp = Process.getpgrp()

#
# parse arguments
#

puts "Invoking loginfo.rb...."

def usage()
  puts <<-EOF
Usage: #{MYNAME} CVSROOT USER 'CVS-LOG-STRING' MAIL_ADDRESSES
	[-d HELO_DOMAIN] [-s SMTP_SERVER] [-p SUBJECT_PREFIX]
	[-S SENDER_ADDRESS] [-R REPLY_TO_ADDRESS] [-x X_HEADER_PREFIX]
	[-w CVSWEB_URL] [-C PATH_TO_CVS] [-J]

-d	specify the domain to use in the SMTP session and in the mail header
	(default: FQDN of the host)
-s	specify the SMTP server to mail via
	(default: "localhost")
-S	specify the sender address for the mail
	(default: USER + "@@" + HELO_DOMAIN)
-R	specify the reply-to address for the mail
	(default: none)
-p	specify the prefix for the mail subject (which will be surrounded
	by `[' and `]')
	(default: "cvs")
-x	specify the prefix for the CVS informative headers
	(default: "X-")
-w	specify the URL of the CVSweb with two @@\'s, one for a path, and
	the other for a query (e.g. "'http://a.b/cvsweb.cgi@@?cvsroot=xyz&@@'")
	(default: none - no CVSweb links will be added)
-C	specify the full path to cvs
	(default: "/usr/bin/cvs")
-J	enable Japanese support (send mail in the JIS encoding)
	(default: disabled)
  EOF
end

if ARGV.size < 4
  usage()
  exit 1	# No way!
end

$cvsroot, $cvsuser, $cvsarg, $mailaddr = ARGV.slice!(0, 4)

$USAGE = 'usage'
parseArgs(0, nil, 'J',
	  'd:' + Socket::gethostbyname(Socket::gethostname)[0],
	  's:localhost',
	  'S:',
	  'R:',
	  'p:cvs',
	  'x:X-',
	  'w:',
	  'C:/usr/bin/cvs')

$helo_domain = $OPT_d
$smtp_server = $OPT_s
$subject_prefix = $OPT_p.strip
$x_header_prefix = $OPT_x.strip
$cvsweb_url = $OPT_w
$cvs_cmd = $OPT_C
$japanese_support = $OPT_J
$reply_to_address = $OPT_R

if $OPT_S
  $sender_address = $OPT_S
else
  $sender_address = "#{$ecvsuser}@@#{$helo_domain}"
end

$from_address = sprintf('%s (%s)', $sender_address, $ecvsuser)

# Temporary control files
$commitinfosavefile	= sprintf("/tmp/commitinfo.%s.%d", $cvsuser, $pgrp)
$loginfosavefile	= sprintf("/tmp/loginfo.%s.%d", $cvsuser, $pgrp)
$changelogfile		= sprintf("/tmp/loginfo.changelog.%s.%d", $cvsuser, $pgrp)
$addlogfile		= sprintf("/tmp/loginfo.addlog.%s.%d", $cvsuser, $pgrp)
$modlogfile		= sprintf("/tmp/loginfo.modlog.%s.%d", $cvsuser, $pgrp)
$removelogfile		= sprintf("/tmp/loginfo.removelog.%s.%d", $cvsuser, $pgrp)
$modulesfile		= sprintf("/tmp/loginfo.modules.%s.%d", $cvsuser, $pgrp)

def cleanup_tmpfiles
  for f in [
      $commitinfosavefile,
      $loginfosavefile,
      $changelogfile,
      $addlogfile,
      $modlogfile,
      $removelogfile,
      $modulesfile ]
    File.unlink(f) rescue true
  end
end

def read_file(fn)
  File.open(fn, "r") do |f|
    f.read
  end
end

def append_line(fn, s)
  File.open(fn, "a+") do |f|
    f.puts s
  end
end

class String
  def indent(n)
    self.gsub(/^/, ' ' * n)
  end
end

def build_header(subject)
  subject = "[#{$subject_prefix}] #{subject}"

  header = <<EOF
Return-Path: #{$sender_address}
From: #{$from_address}
Date: #{$datestr}
Subject: #{subject}
To: #{$mailaddr}
EOF

  if $reply_to_address
    header << <<EOF
Reply-To: #{$reply_to_address}
EOF
  end

  header << <<EOF
Sender: #{$sender_address}
#{$x_header_prefix}CVS-User: #{$cvsuser}
#{$x_header_prefix}CVS-Root: #{$cvsroot}
#{$x_header_prefix}CVS-Module: #{$modulenames.join(', ')}
#{$x_header_prefix}CVS-Branch: #{$branch}
EOF

  header
end

def build_bodyheader
  '%-10s  %s' % [$cvsuser, $datestr] + "\n\n"
end

def build_mail(subject, body)
  build_header(subject) + "\n" + body
end

def send_mail(mail)
  require "net/smtp"

  begin
    sm = Net::SMTPSession.new($smtp_server, 25)
    sm.start($helo_domain)

    if $japanese_support
      require "kconv"
      mail = Kconv.tojis(mail)
    end

    sm.sendmail(mail, "#{$sender_address}", $mailaddr.split(/,/))
  rescue
    puts "ERROR: cannot send email using MTA on #{$smtp_server}"
  end
end

def previous_rev(rev)
  /^(.*\.)(\d+)$/ =~ rev or return nil

  main = $1
  last = $2.to_i

  if last == 1 && rev.split('.').length & 1 == 0 	# a branch, EVILNESS
    main.sub(/\.(\d+)\.$/, '')
  else
    main + (last - 1).to_s
  end
end

def cvsweb_url(modulename, filename, query)
  i = 0

  $cvsweb_url.gsub(/@@/) { |at|
    case i += 1
    when 1
      "/#{modulename}/#{filename}"
    when 2
      query
    else
      at
    end
  }
end


# Save the first argument in a file
# File name is formatted as : "loginfo.%s.%d"

append_line($loginfosavefile, $cvsarg)

commithash = {}
loghash = {}

$isimport = ($cvsarg =~ /Imported sources$/)

if !$isimport
  # compare commitinfo temp files and loginfo temp files.
  # If the two files are logically equal, we know this time is the last one.

  begin
    cfile = File.open($commitinfosavefile, "r")
    lfile = File.open($loginfosavefile, "r")
  rescue => e
    print e.message
    cleanup_tmpfiles
    exit 0
  end

  cfile.each_line { |i|
    i.chomp!
    tk = i.split(/ /)
    croot = tk.shift	# CVSROOT mod-path file file file...
    cmodpath = tk.shift.sub(/^#{Regexp.quote(croot)}\//, "")
    tk.each { |j|
      commithash["#{cmodpath}/#{j}"] = true
    }
  }
  lfile.each_line { |i|
    i.chomp!
    tk = i.split(/ /)
    lmodpath = tk.shift
    tk.each { |j|
      loghash["#{lmodpath}/#{j}"] = true
    }
  }


  # Use "cvs log" and "cvs status" and save output string
  print "loginfo.rb is writing changelog..."

  cvsargtk = $cvsarg.split(/ /)
  modulename = cvsargtk.shift

  cvsargtk.each { |f|
    rev = ""
    `#{$cvs_cmd} -Qn status #{f}`.each_line { |l|
      l.strip!
	    
      if /^Repository revision:\s+(\S+)/ =~ l
	rev = $1
	break
      end
    }
    found = false
    `#{$cvs_cmd} -Qn log #{f}`.each_line { |l|
      l.strip!
	    
      if found
	if /state:\s+(\S+);(?:\s+lines:\s+(\S+)\s+(\S+))?$/ =~ l
	  state, plus, minus = $1, $2, $3

	  rev_prev = previous_rev(rev)

	  if state == 'dead'
	    append_line($changelogfile, 
			sprintf("%-11s %-9s  %s/%s",
				rev, '-REMOVED-', modulename, f))

	    if $cvsweb_url
	      append_line($changelogfile, 
			  cvsweb_url(modulename, f,
				     "rev=#{rev_prev}").indent(2))
	    end
	  elsif plus.nil?
	    append_line($changelogfile, 
			sprintf("%-11s %-9s  %s/%s",
				rev, '-ADDED-', modulename, f))

	    if $cvsweb_url
	      append_line($changelogfile, 
			  cvsweb_url(modulename, f,
				     "rev=#{rev}").indent(2))
	    end
	  else
	    append_line($changelogfile, 
			sprintf("%-11s %-4s %-4s  %s/%s",
				rev, plus, minus, modulename, f))

	    if $cvsweb_url
	      append_line($changelogfile, 
			  cvsweb_url(modulename, f,
				     "r1=#{rev_prev}&r2=#{rev}").indent(2))
	    end
	  end
	end

	break
      elsif /^revision\s(.+)$/ =~ l && $1 == rev
	found = true
      end
    }
  }

  puts "done"
end

# parse STDIN and sort out messages
print "loginfo.rb is parsing log message..." 

readmode = :init
files_begin = false
modulename = ""
logtext = ""
statustext = ""
$branch = "HEAD"

STDIN.each_line do |l|
  case l
  when /^Update of (.*)/
    modulename = $1.strip.sub(/^#{Regexp.quote($cvsroot)}\//, "")
    append_line($modulesfile, modulename)
    next
  when /^Modified Files:/
    readmode = :modify
    files_begin = true
    next
  when /^Added Files:/
    readmode = :add
    files_begin = true
    next
  when /^Removed Files:/
    readmode = :remove
    files_begin = true
    next
  when /^Log Message:/
    readmode = :log
    next
  when /^Status:/
    readmode = :status
    next
  when /^\s+Tag:\s+(\S+)$/
    $branch = $1
    next
  when nil
    break
  end

  case readmode
  when :modify, :add, :remove
    file = if readmode == :modify then
	     $modlogfile
	   elsif readmode == :add then
	     $addlogfile
	   else
	     $removelogfile
	   end

    if files_begin
      append_line(file, "#{modulename}:")
      files_begin = false
    end

    s = l.strip
    append_line(file, s.indent(2))
  when :log
    logtext << l
  when :status
    statustext << l
  end
end

puts "done"

# We need more modules...
print "loginfo.rb is testing modules..."
commithash.each_key { |k|
  if loghash[k].nil?
    puts "log info for `#{k}' is not ready" 
    exit 0
  end
}
puts "done"


#
# we can send a mail.
#

print "loginfo.rb is composing a mail..."

$modulenames = (read_file($modulesfile).chomp.split("\n") rescue Array.new)

# Use the first valuable line as the subject of the mail.
subject = "#{$modulenames.join(', ')}: "
logtext.each_line { |i|
  i.strip!
  if i != ""
    subject << i
    break
  end
}

branchinfo = if $branch == 'HEAD'
	       ""
	     else
	       "        (Branch: #{$branch})"
	     end

logtext.chomp!

body = build_bodyheader

if $isimport
  body <<
    ("Module:\n" +
     $modulenames.join("\n").indent(2) + "\n" +
     "Log:\n" +
     logtext.chomp.indent(2) + "\n" +
     "\n" +
     "Imported files:#{branchinfo}\n" +
     statustext.indent(2)).indent(2)
else
  body <<
    (("Modified files:#{branchinfo}\n" +
     read_file($modlogfile).indent(2) rescue "") +
     ("Added files:#{branchinfo}\n" +
      read_file($addlogfile).indent(2) rescue "") +
     ("Removed files:#{branchinfo}\n" +
      read_file($removelogfile).indent(2) rescue "") +
     "Log:\n" +
     logtext.chomp.indent(2) + "\n" +
     "\n" +
     ("Revision    Changes    Path\n" +
      read_file($changelogfile).chomp rescue "")).indent(2)
end

mail = build_mail(subject, body)

puts "done"

# detect _nomail_
if logtext =~ /_nomail_/
  puts "loginfo.rb is not posting email."
  puts "The composed mail is as follows:"
  puts mail
else
  print "loginfo.rb is posting email to #{$mailaddr} ..."
  send_mail(mail)
  puts "done"
end

# remove all temp files

print "loginfo.rb is deleting tmp files..."
cleanup_tmpfiles

puts "done"

exit 0
@


1.11
log
@Pull up loginfo.rb rev. 1.11.
@
text
@d6 2
a7 2
# $devId: loginfo.rb,v 1.11 2001/06/06 09:23:11 knu Exp $
# $Id: loginfo_ruby.rb,v 1.10 2001/06/05 05:24:14 knu Exp $
d151 1
a151 1
Reply-To: #{reply_to_address}
@


1.10
log
@Update to rev.1.10.
@
text
@d6 2
a7 2
# $devId: loginfo.rb,v 1.10 2001/06/05 05:22:12 knu Exp $
# $Id: loginfo_ruby.rb,v 1.9 2001/06/04 16:32:22 knu Exp $
d151 1
a151 1
Reply-To: ${reply_to_address}
@


1.9
log
@Update to cvsmailer 0.21.
@
text
@d6 2
a7 2
# $devId: loginfo.rb,v 1.9 2001/06/04 16:30:07 knu Exp $
# $Id: loginfo_ruby.rb,v 1.8 2001/05/07 16:42:21 knu Exp $
d37 2
a38 2
	[-S SENDER_ADDRESS] [-x X_HEADER_PREFIX] [-w CVSWEB_URL]
	[-C PATH_TO_CVS] [-J]
d46 2
d53 1
a53 1
-w	specify the URL of the CVSweb with two @@'s, one for a path, and
d75 1
d88 1
d141 1
a141 1
  return <<EOF
d147 9
d162 2
d391 1
a391 1
    logtext += l
d393 1
a393 1
    statustext += l
d423 1
a423 1
    subject += i
d439 1
a439 1
  body +=
d448 1
a448 1
  body +=
@


1.8
log
@Update to cvsmailer 0.19.
@
text
@d6 2
a7 2
# $devId: loginfo.rb,v 1.8 2001/05/07 16:35:22 knu Exp $
# $Id: loginfo_ruby.rb,v 1.7 2001/05/01 08:30:00 knu Exp $
d10 2
d35 4
a38 3
Usage: ./loginfo.rb CVSROOT USER 'CVS-LOG-STRING' MAILADDR
         [-d HELO_DOMAIN] [-s SMTP_SERVER] [-p SUBJECT_PREFIX]
         [-x X_HEADER_PREFIX] [-w CVSWEB_URL] [-C PATH_TO_CVS] [-J]
d44 2
d51 2
a52 2
-w	specify the URL of the CVSweb with two %s's, one for a path, and
	the other for a query (e.g. "'http://a.b/cvsweb.cgi%s?cvsroot=xyz&%s'")
d72 1
d86 7
d138 2
a139 2
Return-Path: #{$ecvsuser}@@#{$helo_domain}
From: #{$ecvsuser}@@#{$helo_domain}
d143 1
a143 1
Sender: #{$ecvsuser}@@#{$helo_domain}
d171 1
a171 1
    sm.sendmail(mail, "#{$ecvsuser}@@#{$helo_domain}", $mailaddr.split(/,/))
@


1.7
log
@Update to cvsmailer 0.18.
@
text
@a4 5
# ChangeLog:
# 0.1 Created usable version by Kengo Nakajima
# 0.11 Added "_nomail_" command 
# 0.12 subject_prefix, smtp_ipaddr, multiple-email-address. (2000/6/1)
#
d6 2
a7 2
# $devId: loginfo.rb,v 1.7 2001/05/01 08:25:57 knu Exp $
# $Id: loginfo_ruby.rb,v 1.6 2001/01/31 15:07:20 knu Exp $
d10 2
a11 2
$cvs = "/usr/bin/cvs"

d29 29
a57 2
if ARGV.size != 8
  puts "Usage: #{$0} CVSROOT USER 'CVS-LOG-STRING' MAILADDR HELO_DOMAIN\n SMTP_IP SUBJECT_PREFIX X_HEADER_PREFIX"
d61 18
a78 1
puts "Invoking loginfo.rb...."
a79 1
$cvsroot, $cvsuser, $cvsarg, $mailaddr, $helo_domain, $smtp_ipaddr, $subject_prefix, $x_header_prefix = *ARGV
a147 1
  require "kconv"
d150 1
a150 1
    sm = Net::SMTPSession.new($smtp_ipaddr, 25)
d152 7
a158 1
    sm.sendmail(Kconv.tojis(mail), "#{$ecvsuser}@@#{$helo_domain}", $mailaddr.split(/,/))
d160 1
a160 1
    puts "ERROR: cannot send email using MTA on #{$smtp_ipaddr}"
d164 28
d242 2
a243 2
    revision = ""
    `#{$cvs} -Qn status #{f}`.each_line { |l|
d247 1
a247 1
	revision = $1
d252 1
a252 1
    `#{$cvs} -Qn log #{f}`.each_line { |l|
d256 36
a291 4
	if /lines:\s+(.+)\s+(.+)$/ =~ l
	  append_line($changelogfile, 
		      sprintf("%-11s %-4s %-4s  %s/%s",
			      revision, $1, $2, modulename, f))
d295 1
a295 1
      elsif /^revision\s(.+)$/ =~ l && $1 == revision
d374 1
a374 1
  if loghash[k] == nil   
@


1.6
log
@Merge from the latest cvsmailer:

    - Chop the cvsroot part off a module path before checking ACL.

    - Lengthen the "Revision" column in commit mails.
@
text
@d11 2
a12 2
# $devId: loginfo.rb,v 1.6 2001/01/31 14:58:24 knu Exp $
# $Id: loginfo_ruby.rb,v 1.5 2001/01/31 05:22:34 knu Exp $
d50 1
d59 2
a60 1
      $removelogfile ]
d95 1
a95 1
#{$x_header_prefix}CVS-Module: #{$modulename}
d148 2
a149 2
    croot = tk.shift + "/"      # CVSROOT mod-path file file file...
    cmodpath = tk.shift.sub(/^#{Regexp.quote(croot)}/, "")
d168 1
a168 1
  $modulename = cvsargtk.shift
d172 4
a175 3
    status = `#{$cvs} -Qn status #{f}`
    status.split(/\n/).each { |i|
      if i =~ /Repository revision:\s+(.+)\s+/
d180 6
a185 9
    log = `#{$cvs} -Qn log #{f}`.split(/\n/)
    while true
      line1 = log.shift
      line1.strip!
      if line1 =~ /^revision\s(.+)$/
	if $1 == revision
	  nextline = log.shift
	  nextline.strip!
	  nextline =~ /lines:\s+(.+)\s+(.+)$/
d188 1
a188 2
			      revision, $1, $2, $modulename, f))
	  break
d190 4
d195 1
a195 1
    end				   
d205 2
a206 1
updatemsg = ""
d214 2
a215 1
    updatemsg = $1.strip
d219 1
d223 1
d227 1
d235 3
d243 12
a254 5
  when :modify
    if l =~ /^\s+Tag:\s+(\S+)$/
      $branch = $1
    else
      append_line($modlogfile, l.strip)
d256 3
a258 4
  when :add
    append_line($addlogfile, l.strip)
  when :remove
    append_line($removelogfile, l.strip)
d285 2
d288 1
a288 1
subject = "#{$modulename}: "
d305 1
a305 5
body =
  build_bodyheader +
  ("Module:\n" +
   updatemsg.indent(2) +
   "\n").indent(2)
d309 3
a311 1
    ("Log:\n" +
@


1.5
log
@Merge from the latest cvsmailer.

Turn debug output on.
@
text
@d11 2
a12 2
# $devId: loginfo.rb,v 1.5 2001/01/30 17:46:14 knu Exp $
# $Id: loginfo_ruby.rb,v 1.4 2001/01/30 18:33:49 knu Exp $
d147 1
a147 1
    cmodpath = tk.shift.sub(/^#{croot}/, "")
d187 1
a187 1
		      sprintf("%-9s %-4s %-4s  %s/%s",
d310 1
a310 1
     ("Revision  Changes    Path\n" +
@


1.4
log
@Update to cvsmailer 0.15.

Add rules for www, doc, and rwiki.
@
text
@d11 2
a12 1
# $Id: loginfo_ruby.rb,v 1.3 2001/01/19 17:42:45 knu Exp $
@


1.3
log
@Merge from cvsmailer 0.13.

Implement access control facilities.
@
text
@d11 1
a11 1
# $Id: loginfo_ruby.rb,v 1.2 2001/01/15 16:55:11 knu Exp $
d33 2
a34 2
if ARGV.size != 7
  puts "Usage: #{$0} CVSROOT USER 'CVS-LOG-STRING' MAILADDR HELO_DOMAIN\n SMTP_IP SUBJECT_PREFIX"
d40 1
a40 1
$cvsroot, $cvsuser, $cvsarg, $mailaddr, $helo_domain, $smtp_ipaddr, $subject_prefix = *ARGV
d90 4
a93 4
X-Ruby-CVS-User: #{$cvsuser}
X-Ruby-CVS-Root: #{$cvsroot}
X-Ruby-CVS-Module: #{$modulename}
X-Ruby-CVS-Branch: #{$branch}
@


1.2
log
@Fix the Date: header to conform to RFC822.

Submitted by:	Minero Aoki <aamine@@dp.u-netsurf.ne.jp>
@
text
@d10 3
a12 2
# $Idaemons: /home/cvs/cvsmailer/loginfo.rb,v 1.2 2001/01/14 09:54:20 knu Exp $
# $Id: loginfo_ruby.rb,v 1.1.1.1 2001/01/14 09:58:11 knu Exp $
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
# $Id$
d15 10
a24 1
$datestr = Time.now
@


1.1.1.1
log
@Initial import of the tools for Ruby repositories.
@
text
@@
